{"/home/travis/build/npmtest/node-npmtest-discord.js/test.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/test.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":1,"12":1,"13":1,"14":1,"15":2,"16":2,"17":2,"18":2,"19":1,"20":1,"21":2,"22":2,"23":2,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":2,"40":2,"41":1,"42":2,"43":2,"44":1,"45":2,"46":2,"47":1,"48":2,"49":2,"50":1,"51":1,"52":1,"53":1,"54":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[1,1],"5":[1,1],"6":[1,1],"7":[1,1],"8":[1,1],"9":[1,1],"10":[1,1,1],"11":[1,1],"12":[1,1],"13":[1,1],"14":[1,1],"15":[1,1],"16":[1,1],"17":[1,1]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":1,"7":1,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}},"4":{"name":"(anonymous_4)","line":61,"loc":{"start":{"line":61,"column":5},"end":{"line":61,"column":17}}},"5":{"name":"(anonymous_5)","line":82,"loc":{"start":{"line":82,"column":5},"end":{"line":82,"column":17}}},"6":{"name":"(anonymous_6)","line":91,"loc":{"start":{"line":91,"column":77},"end":{"line":94,"column":10}}},"7":{"name":"(anonymous_7)","line":112,"loc":{"start":{"line":112,"column":83},"end":{"line":115,"column":10}},"skip":true},"8":{"name":"(anonymous_8)","line":123,"loc":{"start":{"line":123,"column":77},"end":{"line":126,"column":10}},"skip":true},"9":{"name":"(anonymous_9)","line":139,"loc":{"start":{"line":139,"column":12},"end":{"line":139,"column":40}},"skip":true},"10":{"name":"(anonymous_10)","line":147,"loc":{"start":{"line":147,"column":77},"end":{"line":150,"column":10}},"skip":true},"11":{"name":"(anonymous_11)","line":158,"loc":{"start":{"line":158,"column":83},"end":{"line":161,"column":10}},"skip":true},"12":{"name":"(anonymous_12)","line":169,"loc":{"start":{"line":169,"column":79},"end":{"line":172,"column":10}},"skip":true},"13":{"name":"(anonymous_13)","line":180,"loc":{"start":{"line":180,"column":75},"end":{"line":183,"column":10}},"skip":true}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":195,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":56,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":40,"column":8},"end":{"line":53,"column":9}},"11":{"start":{"line":43,"column":12},"end":{"line":46,"column":14}},"12":{"start":{"line":47,"column":12},"end":{"line":47,"column":18}},"13":{"start":{"line":50,"column":12},"end":{"line":51,"column":46}},"14":{"start":{"line":52,"column":12},"end":{"line":52,"column":18}},"15":{"start":{"line":55,"column":8},"end":{"line":55,"column":35}},"16":{"start":{"line":61,"column":4},"end":{"line":63,"column":9}},"17":{"start":{"line":62,"column":8},"end":{"line":62,"column":15}},"18":{"start":{"line":64,"column":4},"end":{"line":77,"column":5}},"19":{"start":{"line":70,"column":8},"end":{"line":70,"column":14}},"20":{"start":{"line":76,"column":8},"end":{"line":76,"column":14}},"21":{"start":{"line":82,"column":4},"end":{"line":84,"column":9}},"22":{"start":{"line":83,"column":8},"end":{"line":83,"column":15}},"23":{"start":{"line":85,"column":4},"end":{"line":194,"column":5}},"24":{"start":{"line":91,"column":8},"end":{"line":99,"column":10}},"25":{"start":{"line":98,"column":12},"end":{"line":98,"column":35}},"26":{"start":{"line":102,"column":8},"end":{"line":104,"column":63}},"27":{"start":{"line":105,"column":8},"end":{"line":105,"column":14}},"28":{"start":{"line":112,"column":8},"end":{"line":121,"column":10},"skip":true},"29":{"start":{"line":119,"column":12},"end":{"line":119,"column":55},"skip":true},"30":{"start":{"line":120,"column":12},"end":{"line":120,"column":48},"skip":true},"31":{"start":{"line":123,"column":8},"end":{"line":136,"column":10},"skip":true},"32":{"start":{"line":130,"column":12},"end":{"line":130,"column":76},"skip":true},"33":{"start":{"line":131,"column":12},"end":{"line":131,"column":73},"skip":true},"34":{"start":{"line":132,"column":12},"end":{"line":132,"column":74},"skip":true},"35":{"start":{"line":133,"column":12},"end":{"line":133,"column":79},"skip":true},"36":{"start":{"line":134,"column":12},"end":{"line":134,"column":25},"skip":true},"37":{"start":{"line":135,"column":12},"end":{"line":135,"column":45},"skip":true},"38":{"start":{"line":138,"column":8},"end":{"line":145,"column":14},"skip":true},"39":{"start":{"line":143,"column":16},"end":{"line":143,"column":29},"skip":true},"40":{"start":{"line":144,"column":16},"end":{"line":144,"column":55},"skip":true},"41":{"start":{"line":147,"column":8},"end":{"line":156,"column":10},"skip":true},"42":{"start":{"line":154,"column":12},"end":{"line":154,"column":25},"skip":true},"43":{"start":{"line":155,"column":12},"end":{"line":155,"column":45},"skip":true},"44":{"start":{"line":158,"column":8},"end":{"line":167,"column":10},"skip":true},"45":{"start":{"line":165,"column":12},"end":{"line":165,"column":25},"skip":true},"46":{"start":{"line":166,"column":12},"end":{"line":166,"column":48},"skip":true},"47":{"start":{"line":169,"column":8},"end":{"line":178,"column":10},"skip":true},"48":{"start":{"line":176,"column":12},"end":{"line":176,"column":25},"skip":true},"49":{"start":{"line":177,"column":12},"end":{"line":177,"column":46},"skip":true},"50":{"start":{"line":180,"column":8},"end":{"line":189,"column":10},"skip":true},"51":{"start":{"line":187,"column":12},"end":{"line":187,"column":94},"skip":true},"52":{"start":{"line":188,"column":12},"end":{"line":188,"column":48},"skip":true},"53":{"start":{"line":192,"column":8},"end":{"line":192,"column":35},"skip":true},"54":{"start":{"line":193,"column":8},"end":{"line":193,"column":14},"skip":true}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":40,"type":"switch","locations":[{"start":{"line":42,"column":8},"end":{"line":47,"column":18}},{"start":{"line":49,"column":8},"end":{"line":52,"column":18}}]},"5":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":16},"end":{"line":44,"column":44}},{"start":{"line":44,"column":48},"end":{"line":44,"column":66}}]},"6":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":21},"end":{"line":50,"column":49}},{"start":{"line":50,"column":53},"end":{"line":50,"column":72}}]},"7":{"line":64,"type":"switch","locations":[{"start":{"line":69,"column":4},"end":{"line":70,"column":14}},{"start":{"line":75,"column":4},"end":{"line":76,"column":14}}]},"8":{"line":85,"type":"switch","locations":[{"start":{"line":90,"column":4},"end":{"line":105,"column":14}},{"start":{"line":111,"column":4},"end":{"line":193,"column":14},"skip":true}]},"9":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":42},"end":{"line":91,"column":73}},{"start":{"line":91,"column":77},"end":{"line":99,"column":9}}]},"10":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":18},"end":{"line":102,"column":32}},{"start":{"line":103,"column":12},"end":{"line":103,"column":53}},{"start":{"line":104,"column":12},"end":{"line":104,"column":61}}]},"11":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":45},"end":{"line":112,"column":79},"skip":true},{"start":{"line":112,"column":83},"end":{"line":121,"column":9},"skip":true}]},"12":{"line":123,"type":"binary-expr","locations":[{"start":{"line":123,"column":42},"end":{"line":123,"column":73},"skip":true},{"start":{"line":123,"column":77},"end":{"line":136,"column":9},"skip":true}]},"13":{"line":138,"type":"binary-expr","locations":[{"start":{"line":138,"column":48},"end":{"line":138,"column":85},"skip":true},{"start":{"line":139,"column":12},"end":{"line":145,"column":13},"skip":true}]},"14":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":42},"end":{"line":147,"column":73},"skip":true},{"start":{"line":147,"column":77},"end":{"line":156,"column":9},"skip":true}]},"15":{"line":158,"type":"binary-expr","locations":[{"start":{"line":158,"column":45},"end":{"line":158,"column":79},"skip":true},{"start":{"line":158,"column":83},"end":{"line":167,"column":9},"skip":true}]},"16":{"line":169,"type":"binary-expr","locations":[{"start":{"line":169,"column":43},"end":{"line":169,"column":75},"skip":true},{"start":{"line":169,"column":79},"end":{"line":178,"column":9},"skip":true}]},"17":{"line":180,"type":"binary-expr","locations":[{"start":{"line":180,"column":41},"end":{"line":180,"column":71},"skip":true},{"start":{"line":180,"column":75},"end":{"line":189,"column":9},"skip":true}]}},"code":["/* istanbul instrument in package npmtest_discord_js */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        switch (local.modeJs) {","        // re-init local from window.local","        case 'browser':","            local = local.global.utility2.objectSetDefault(","                local.global.utility2_rollup || local.global.local,","                local.global.utility2","            );","            break;","        // re-init local from example.js","        case 'node':","            local = (local.global.utility2_rollup || require('utility2'))","                .requireExampleJsFromReadme();","            break;","        }","        // export local","        local.global.local = local;","    }());","","","","    // run shared js-env code - function","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - function","    case 'browser':","        break;","","","","    // run node js-env code - function","    case 'node':","        break;","    }","","","","    // run shared js-env code - post-init","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - post-init","    case 'browser':","        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (","            options,","            onError","        ) {","        /*","         * this function will test browsers's null-case handling-behavior-behavior","         */","            onError(null, options);","        };","","        // run tests","        local.nop(local.modeTest &&","            document.querySelector('#testRunButton1') &&","            document.querySelector('#testRunButton1').click());","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApidoc's default handling-behavior-behavior","         */","            options = { modulePathList: module.paths };","            local.buildApidoc(options, onError);","        };","","        local.testCase_buildApp_default = local.testCase_buildApp_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApp's default handling-behavior-behavior","         */","            local.testCase_buildReadme_default(options, local.onErrorThrow);","            local.testCase_buildLib_default(options, local.onErrorThrow);","            local.testCase_buildTest_default(options, local.onErrorThrow);","            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);","            options = [];","            local.buildApp(options, onError);","        };","","        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||","            function (options, onError) {","            /*","             * this function will test buildCustomOrg's default handling-behavior","             */","                options = {};","                local.buildCustomOrg(options, onError);","            };","","        local.testCase_buildLib_default = local.testCase_buildLib_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildLib's default handling-behavior","         */","            options = {};","            local.buildLib(options, onError);","        };","","        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildReadme's default handling-behavior-behavior","         */","            options = {};","            local.buildReadme(options, onError);","        };","","        local.testCase_buildTest_default = local.testCase_buildTest_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildTest's default handling-behavior","         */","            options = {};","            local.buildTest(options, onError);","        };","","        local.testCase_webpage_default = local.testCase_webpage_default || function (","            options,","            onError","        ) {","        /*","         * this function will test webpage's default handling-behavior","         */","            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };","            local.browserTest(options, onError);","        };","","        // run test-server","        local.testRunServer(local);","        break;","    }","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"40":2,"43":1,"47":1,"50":1,"52":1,"55":2,"61":2,"62":2,"64":2,"70":1,"76":1,"82":2,"83":2,"85":2,"91":1,"98":1,"102":1,"105":1,"112":1,"119":1,"120":1,"123":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"138":1,"143":2,"144":2,"147":1,"154":2,"155":2,"158":1,"165":2,"166":2,"169":1,"176":2,"177":2,"180":1,"187":1,"188":1,"192":1,"193":1}},"/home/travis/build/npmtest/node-npmtest-discord.js/lib.npmtest_discord.js.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/lib.npmtest_discord.js.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":1,"15":1,"16":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1]},"f":{"1":2,"2":2,"3":2},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":53,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":52,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":41,"column":8},"end":{"line":41,"column":54}},"11":{"start":{"line":43,"column":8},"end":{"line":43,"column":55}},"12":{"start":{"line":45,"column":8},"end":{"line":51,"column":9}},"13":{"start":{"line":46,"column":12},"end":{"line":46,"column":61}},"14":{"start":{"line":48,"column":12},"end":{"line":48,"column":35}},"15":{"start":{"line":49,"column":12},"end":{"line":49,"column":49}},"16":{"start":{"line":50,"column":12},"end":{"line":50,"column":43}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":16},"end":{"line":41,"column":44}},{"start":{"line":41,"column":48},"end":{"line":41,"column":53}}]},"5":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]}},"code":["/* istanbul instrument in package npmtest_discord_js */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || local;","        // init lib","        local.local = local.npmtest_discord_js = local;","        // init exports","        if (local.modeJs === 'browser') {","            local.global.utility2_npmtest_discord_js = local;","        } else {","            module.exports = local;","            module.exports.__dirname = __dirname;","            module.exports.module = module;","        }","    }());","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"41":2,"43":2,"45":2,"46":1,"48":1,"49":1,"50":1}},"/home/travis/build/npmtest/node-npmtest-discord.js/example.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/example.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":2,"15":2,"16":2,"17":2,"18":2,"19":0,"20":2,"21":1,"22":1,"23":1,"24":1,"25":1,"26":0,"27":0,"28":1,"29":1,"30":2,"31":0,"32":0,"33":0,"34":1,"35":2,"36":2,"37":3,"38":3,"39":3,"40":3,"41":0,"42":3,"43":3,"44":3,"45":1,"46":3,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":0,"58":1,"59":6,"60":6,"61":1,"62":2,"63":0,"64":2,"65":1,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1],"6":[1,1],"7":[2,0],"8":[2,1,1,1,1,1],"9":[0,2,0],"10":[1,1],"11":[2,1,1],"12":[1,0],"13":[0,2],"14":[2,0,0,0,0,0,0],"15":[0,3],"16":[3,0],"17":[1,1],"18":[0,1],"19":[1,2,0,2],"20":[1,0],"21":[1,1],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":3,"8":3,"9":3,"10":1,"11":6,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":1},"end":{"line":26,"column":13}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":5},"end":{"line":33,"column":17}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":24},"end":{"line":37,"column":36}}},"4":{"name":"(anonymous_4)","line":69,"loc":{"start":{"line":69,"column":31},"end":{"line":69,"column":48}},"skip":true},"5":{"name":"(anonymous_5)","line":78,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":45}},"skip":true},"6":{"name":"(anonymous_6)","line":123,"loc":{"start":{"line":123,"column":33},"end":{"line":123,"column":48}},"skip":true},"7":{"name":"(anonymous_7)","line":125,"loc":{"start":{"line":125,"column":27},"end":{"line":125,"column":39}},"skip":true},"8":{"name":"(anonymous_8)","line":133,"loc":{"start":{"line":133,"column":59},"end":{"line":133,"column":74}},"skip":true},"9":{"name":"(anonymous_9)","line":143,"loc":{"start":{"line":143,"column":45},"end":{"line":143,"column":62}},"skip":true},"10":{"name":"(anonymous_10)","line":144,"loc":{"start":{"line":144,"column":73},"end":{"line":144,"column":92}},"skip":true},"11":{"name":"(anonymous_11)","line":272,"loc":{"start":{"line":272,"column":51},"end":{"line":272,"column":77}},"skip":true},"12":{"name":"(anonymous_12)","line":315,"loc":{"start":{"line":315,"column":32},"end":{"line":315,"column":61}},"skip":true}},"statementMap":{"1":{"start":{"line":26,"column":0},"end":{"line":326,"column":5}},"2":{"start":{"line":28,"column":4},"end":{"line":28,"column":14}},"3":{"start":{"line":33,"column":4},"end":{"line":60,"column":9}},"4":{"start":{"line":35,"column":8},"end":{"line":35,"column":19}},"5":{"start":{"line":37,"column":8},"end":{"line":49,"column":13}},"6":{"start":{"line":38,"column":12},"end":{"line":48,"column":13}},"7":{"start":{"line":39,"column":16},"end":{"line":42,"column":30}},"8":{"start":{"line":44,"column":16},"end":{"line":47,"column":27}},"9":{"start":{"line":51,"column":8},"end":{"line":53,"column":21}},"10":{"start":{"line":55,"column":8},"end":{"line":57,"column":45}},"11":{"start":{"line":59,"column":8},"end":{"line":59,"column":35}},"12":{"start":{"line":61,"column":4},"end":{"line":325,"column":5}},"13":{"start":{"line":69,"column":8},"end":{"line":121,"column":10},"skip":true},"14":{"start":{"line":70,"column":12},"end":{"line":88,"column":13},"skip":true},"15":{"start":{"line":76,"column":16},"end":{"line":87,"column":19},"skip":true},"16":{"start":{"line":79,"column":20},"end":{"line":86,"column":21},"skip":true},"17":{"start":{"line":82,"column":24},"end":{"line":82,"column":43},"skip":true},"18":{"start":{"line":83,"column":24},"end":{"line":83,"column":30},"skip":true},"19":{"start":{"line":85,"column":24},"end":{"line":85,"column":49},"skip":true},"20":{"start":{"line":89,"column":12},"end":{"line":107,"column":13},"skip":true},"21":{"start":{"line":92,"column":16},"end":{"line":102,"column":17},"skip":true},"22":{"start":{"line":93,"column":20},"end":{"line":93,"column":86},"skip":true},"23":{"start":{"line":94,"column":20},"end":{"line":95,"column":45},"skip":true},"24":{"start":{"line":96,"column":20},"end":{"line":96,"column":42},"skip":true},"25":{"start":{"line":97,"column":20},"end":{"line":97,"column":48},"skip":true},"26":{"start":{"line":100,"column":20},"end":{"line":100,"column":85},"skip":true},"27":{"start":{"line":101,"column":20},"end":{"line":101,"column":96},"skip":true},"28":{"start":{"line":103,"column":16},"end":{"line":103,"column":22},"skip":true},"29":{"start":{"line":106,"column":16},"end":{"line":106,"column":22},"skip":true},"30":{"start":{"line":108,"column":12},"end":{"line":120,"column":13},"skip":true},"31":{"start":{"line":114,"column":16},"end":{"line":119,"column":17},"skip":true},"32":{"start":{"line":116,"column":20},"end":{"line":116,"column":78},"skip":true},"33":{"start":{"line":118,"column":20},"end":{"line":118,"column":47},"skip":true},"34":{"start":{"line":123,"column":8},"end":{"line":141,"column":11},"skip":true},"35":{"start":{"line":124,"column":12},"end":{"line":124,"column":54},"skip":true},"36":{"start":{"line":125,"column":12},"end":{"line":140,"column":14},"skip":true},"37":{"start":{"line":126,"column":16},"end":{"line":126,"column":28},"skip":true},"38":{"start":{"line":127,"column":16},"end":{"line":127,"column":69},"skip":true},"39":{"start":{"line":128,"column":16},"end":{"line":128,"column":75},"skip":true},"40":{"start":{"line":129,"column":16},"end":{"line":131,"column":17},"skip":true},"41":{"start":{"line":130,"column":20},"end":{"line":130,"column":27},"skip":true},"42":{"start":{"line":133,"column":16},"end":{"line":137,"column":36},"skip":true},"43":{"start":{"line":134,"column":20},"end":{"line":136,"column":55},"skip":true},"44":{"start":{"line":139,"column":16},"end":{"line":139,"column":57},"skip":true},"45":{"start":{"line":143,"column":8},"end":{"line":147,"column":11},"skip":true},"46":{"start":{"line":144,"column":12},"end":{"line":146,"column":15},"skip":true},"47":{"start":{"line":145,"column":16},"end":{"line":145,"column":70},"skip":true},"48":{"start":{"line":149,"column":8},"end":{"line":149,"column":31},"skip":true},"49":{"start":{"line":150,"column":8},"end":{"line":150,"column":14},"skip":true},"50":{"start":{"line":158,"column":8},"end":{"line":158,"column":31},"skip":true},"51":{"start":{"line":160,"column":8},"end":{"line":160,"column":33},"skip":true},"52":{"start":{"line":161,"column":8},"end":{"line":161,"column":37},"skip":true},"53":{"start":{"line":162,"column":8},"end":{"line":162,"column":35},"skip":true},"54":{"start":{"line":164,"column":8},"end":{"line":164,"column":50},"skip":true},"55":{"start":{"line":166,"column":8},"end":{"line":256,"column":2},"skip":true},"56":{"start":{"line":258,"column":8},"end":{"line":286,"column":9},"skip":true},"57":{"start":{"line":259,"column":12},"end":{"line":269,"column":14},"skip":true},"58":{"start":{"line":271,"column":12},"end":{"line":285,"column":19},"skip":true},"59":{"start":{"line":274,"column":20},"end":{"line":274,"column":35},"skip":true},"60":{"start":{"line":275,"column":20},"end":{"line":284,"column":21},"skip":true},"61":{"start":{"line":277,"column":24},"end":{"line":277,"column":64},"skip":true},"62":{"start":{"line":279,"column":24},"end":{"line":279,"column":40},"skip":true},"63":{"start":{"line":281,"column":24},"end":{"line":281,"column":40},"skip":true},"64":{"start":{"line":283,"column":24},"end":{"line":283,"column":39},"skip":true},"65":{"start":{"line":288,"column":8},"end":{"line":290,"column":9},"skip":true},"66":{"start":{"line":289,"column":12},"end":{"line":289,"column":18},"skip":true},"67":{"start":{"line":291,"column":8},"end":{"line":293,"column":54},"skip":true},"68":{"start":{"line":296,"column":8},"end":{"line":301,"column":37},"skip":true},"69":{"start":{"line":303,"column":8},"end":{"line":303,"column":82},"skip":true},"70":{"start":{"line":306,"column":8},"end":{"line":308,"column":9},"skip":true},"71":{"start":{"line":307,"column":12},"end":{"line":307,"column":82},"skip":true},"72":{"start":{"line":310,"column":8},"end":{"line":312,"column":9},"skip":true},"73":{"start":{"line":311,"column":12},"end":{"line":311,"column":18},"skip":true},"74":{"start":{"line":313,"column":8},"end":{"line":313,"column":54},"skip":true},"75":{"start":{"line":314,"column":8},"end":{"line":314,"column":69},"skip":true},"76":{"start":{"line":315,"column":8},"end":{"line":323,"column":36},"skip":true},"77":{"start":{"line":316,"column":12},"end":{"line":316,"column":61},"skip":true},"78":{"start":{"line":317,"column":12},"end":{"line":320,"column":13},"skip":true},"79":{"start":{"line":318,"column":16},"end":{"line":318,"column":75},"skip":true},"80":{"start":{"line":319,"column":16},"end":{"line":319,"column":23},"skip":true},"81":{"start":{"line":321,"column":12},"end":{"line":321,"column":38},"skip":true},"82":{"start":{"line":322,"column":12},"end":{"line":322,"column":27},"skip":true},"83":{"start":{"line":324,"column":8},"end":{"line":324,"column":14},"skip":true}},"branchMap":{"1":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":23},"end":{"line":39,"column":62}},{"start":{"line":40,"column":20},"end":{"line":40,"column":70}},{"start":{"line":41,"column":20},"end":{"line":41,"column":71}},{"start":{"line":42,"column":20},"end":{"line":42,"column":29}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":23},"end":{"line":44,"column":37}},{"start":{"line":45,"column":20},"end":{"line":45,"column":61}},{"start":{"line":46,"column":20},"end":{"line":46,"column":70}},{"start":{"line":47,"column":20},"end":{"line":47,"column":26}}]},"3":{"line":51,"type":"cond-expr","locations":[{"start":{"line":52,"column":14},"end":{"line":52,"column":20}},{"start":{"line":53,"column":14},"end":{"line":53,"column":20}}]},"4":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":16},"end":{"line":55,"column":44}},{"start":{"line":55,"column":49},"end":{"line":57,"column":43}}]},"5":{"line":55,"type":"cond-expr","locations":[{"start":{"line":56,"column":14},"end":{"line":56,"column":54}},{"start":{"line":57,"column":14},"end":{"line":57,"column":43}}]},"6":{"line":61,"type":"switch","locations":[{"start":{"line":68,"column":4},"end":{"line":150,"column":14},"skip":true},{"start":{"line":156,"column":4},"end":{"line":324,"column":14},"skip":true}]},"7":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true},{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true}]},"8":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":16},"end":{"line":70,"column":22},"skip":true},{"start":{"line":70,"column":27},"end":{"line":70,"column":32},"skip":true},{"start":{"line":71,"column":20},"end":{"line":71,"column":39},"skip":true},{"start":{"line":72,"column":20},"end":{"line":72,"column":49},"skip":true},{"start":{"line":73,"column":20},"end":{"line":73,"column":58},"skip":true},{"start":{"line":74,"column":20},"end":{"line":74,"column":69},"skip":true}]},"9":{"line":79,"type":"switch","locations":[{"start":{"line":80,"column":20},"end":{"line":80,"column":33},"skip":true},{"start":{"line":81,"column":20},"end":{"line":83,"column":30},"skip":true},{"start":{"line":84,"column":20},"end":{"line":85,"column":49},"skip":true}]},"10":{"line":89,"type":"switch","locations":[{"start":{"line":90,"column":12},"end":{"line":103,"column":22},"skip":true},{"start":{"line":105,"column":12},"end":{"line":106,"column":22},"skip":true}]},"11":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":20},"end":{"line":89,"column":25},"skip":true},{"start":{"line":89,"column":29},"end":{"line":89,"column":48},"skip":true},{"start":{"line":89,"column":52},"end":{"line":89,"column":74},"skip":true}]},"12":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true},{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true}]},"13":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true},{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true}]},"14":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":16},"end":{"line":108,"column":61},"skip":true},{"start":{"line":108,"column":66},"end":{"line":108,"column":72},"skip":true},{"start":{"line":108,"column":77},"end":{"line":108,"column":82},"skip":true},{"start":{"line":109,"column":20},"end":{"line":109,"column":39},"skip":true},{"start":{"line":110,"column":20},"end":{"line":110,"column":49},"skip":true},{"start":{"line":111,"column":20},"end":{"line":111,"column":58},"skip":true},{"start":{"line":112,"column":20},"end":{"line":112,"column":68},"skip":true}]},"15":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true},{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true}]},"16":{"line":134,"type":"cond-expr","locations":[{"start":{"line":135,"column":26},"end":{"line":135,"column":29},"skip":true},{"start":{"line":136,"column":26},"end":{"line":136,"column":54},"skip":true}]},"17":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":27},"end":{"line":164,"column":43},"skip":true},{"start":{"line":164,"column":47},"end":{"line":164,"column":49},"skip":true}]},"18":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true},{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true}]},"19":{"line":275,"type":"switch","locations":[{"start":{"line":276,"column":20},"end":{"line":277,"column":64},"skip":true},{"start":{"line":278,"column":20},"end":{"line":279,"column":40},"skip":true},{"start":{"line":280,"column":20},"end":{"line":281,"column":40},"skip":true},{"start":{"line":282,"column":20},"end":{"line":283,"column":39},"skip":true}]},"20":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true},{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true}]},"21":{"line":288,"type":"binary-expr","locations":[{"start":{"line":288,"column":12},"end":{"line":288,"column":40},"skip":true},{"start":{"line":288,"column":44},"end":{"line":288,"column":67},"skip":true}]},"22":{"line":292,"type":"binary-expr","locations":[{"start":{"line":292,"column":12},"end":{"line":292,"column":50},"skip":true},{"start":{"line":293,"column":12},"end":{"line":293,"column":53},"skip":true}]},"23":{"line":297,"type":"binary-expr","locations":[{"start":{"line":297,"column":12},"end":{"line":297,"column":68},"skip":true},{"start":{"line":298,"column":12},"end":{"line":301,"column":36},"skip":true}]},"24":{"line":303,"type":"binary-expr","locations":[{"start":{"line":303,"column":43},"end":{"line":303,"column":75},"skip":true},{"start":{"line":303,"column":79},"end":{"line":303,"column":81},"skip":true}]},"25":{"line":306,"type":"if","locations":[{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true},{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true}]},"26":{"line":310,"type":"if","locations":[{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true},{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true}]},"27":{"line":313,"type":"binary-expr","locations":[{"start":{"line":313,"column":27},"end":{"line":313,"column":43},"skip":true},{"start":{"line":313,"column":47},"end":{"line":313,"column":53},"skip":true}]},"28":{"line":317,"type":"if","locations":[{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true},{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true}]}},"code":["/*","example.js","","quickstart example","","instruction","    1. save this script as example.js","    2. run the shell command:","        $ npm install npmtest-discord.js && PORT=8081 node example.js","    3. play with the browser-demo on http://127.0.0.1:8081","*/","","","","/* istanbul instrument in package npmtest_discord_js */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || (local.modeJs === 'browser'","            ? local.global.utility2_npmtest_discord_js","            : global.utility2_moduleExports);","        // export local","        local.global.local = local;","    }());","    switch (local.modeJs) {","","","","    // post-init","    // run browser js-env code - post-init","    /* istanbul ignore next */","    case 'browser':","        local.testRunBrowser = function (event) {","            if (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('onreset'))) {","                // reset output","                Array.from(","                    document.querySelectorAll('body > .resettable')","                ).forEach(function (element) {","                    switch (element.tagName) {","                    case 'INPUT':","                    case 'TEXTAREA':","                        element.value = '';","                        break;","                    default:","                        element.textContent = '';","                    }","                });","            }","            switch (event && event.currentTarget && event.currentTarget.id) {","            case 'testRunButton1':","                // show tests","                if (document.querySelector('#testReportDiv1').style.display === 'none') {","                    document.querySelector('#testReportDiv1').style.display = 'block';","                    document.querySelector('#testRunButton1').textContent =","                        'hide internal test';","                    local.modeTest = true;","                    local.testRunDefault(local);","                // hide tests","                } else {","                    document.querySelector('#testReportDiv1').style.display = 'none';","                    document.querySelector('#testRunButton1').textContent = 'run internal test';","                }","                break;","            // custom-case","            default:","                break;","            }","            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('oneval')))) {","                // try to eval input-code","                try {","                    /*jslint evil: true*/","                    eval(document.querySelector('#inputTextareaEval1').value);","                } catch (errorCaught) {","                    console.error(errorCaught);","                }","            }","        };","        // log stderr and stdout to #outputTextareaStdout1","        ['error', 'log'].forEach(function (key) {","            console[key + '_original'] = console[key];","            console[key] = function () {","                var element;","                console[key + '_original'].apply(console, arguments);","                element = document.querySelector('#outputTextareaStdout1');","                if (!element) {","                    return;","                }","                // append text to #outputTextareaStdout1","                element.value += Array.from(arguments).map(function (arg) {","                    return typeof arg === 'string'","                        ? arg","                        : JSON.stringify(arg, null, 4);","                }).join(' ') + '\\n';","                // scroll textarea to bottom","                element.scrollTop = element.scrollHeight;","            };","        });","        // init event-handling","        ['change', 'click', 'keyup'].forEach(function (event) {","            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {","                element.addEventListener(event, local.testRunBrowser);","            });","        });","        // run tests","        local.testRunBrowser();","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        // export local","        module.exports = local;","        // require modules","        local.fs = require('fs');","        local.http = require('http');","        local.url = require('url');","        // init assets","        local.assetsDict = local.assetsDict || {};","        /* jslint-ignore-begin */","        local.assetsDict['/assets.index.template.html'] = '\\","<!doctype html>\\n\\","<html lang=\"en\">\\n\\","<head>\\n\\","<meta charset=\"UTF-8\">\\n\\","<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\","<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\","<style>\\n\\","/*csslint\\n\\","    box-sizing: false,\\n\\","    universal-selector: false\\n\\","*/\\n\\","* {\\n\\","    box-sizing: border-box;\\n\\","}\\n\\","body {\\n\\","    background: #dde;\\n\\","    font-family: Arial, Helvetica, sans-serif;\\n\\","    margin: 2rem;\\n\\","}\\n\\","body > * {\\n\\","    margin-bottom: 1rem;\\n\\","}\\n\\",".utility2FooterDiv {\\n\\","    margin-top: 20px;\\n\\","    text-align: center;\\n\\","}\\n\\","</style>\\n\\","<style>\\n\\","/*csslint\\n\\","*/\\n\\","textarea {\\n\\","    font-family: monospace;\\n\\","    height: 10rem;\\n\\","    width: 100%;\\n\\","}\\n\\","textarea[readonly] {\\n\\","    background: #ddd;\\n\\","}\\n\\","</style>\\n\\","</head>\\n\\","<body>\\n\\","<!-- utility2-comment\\n\\","<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\","utility2-comment -->\\n\\","<h1>\\n\\","<!-- utility2-comment\\n\\","    <a\\n\\","        {{#if env.npm_package_homepage}}\\n\\","        href=\"{{env.npm_package_homepage}}\"\\n\\","        {{/if env.npm_package_homepage}}\\n\\","        target=\"_blank\"\\n\\","    >\\n\\","utility2-comment -->\\n\\","        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\","<!-- utility2-comment\\n\\","    </a>\\n\\","utility2-comment -->\\n\\","</h1>\\n\\","<h3>{{env.npm_package_description}}</h3>\\n\\","<!-- utility2-comment\\n\\","<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\","<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\","<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\","utility2-comment -->\\n\\","\\n\\","\\n\\","\\n\\","<label>stderr and stdout</label>\\n\\","<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\","<!-- utility2-comment\\n\\","{{#if isRollup}}\\n\\","<script src=\"assets.app.js\"></script>\\n\\","{{#unless isRollup}}\\n\\","utility2-comment -->\\n\\","<script src=\"assets.utility2.rollup.js\"></script>\\n\\","<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\","<script src=\"assets.npmtest_discord_js.rollup.js\"></script>\\n\\","<script src=\"assets.example.js\"></script>\\n\\","<script src=\"assets.test.js\"></script>\\n\\","<!-- utility2-comment\\n\\","{{/if isRollup}}\\n\\","utility2-comment -->\\n\\","<div class=\"utility2FooterDiv\">\\n\\","    [ this app was created with\\n\\","    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\","    ]\\n\\","</div>\\n\\","</body>\\n\\","</html>\\n\\","';","        /* jslint-ignore-end */","        if (local.templateRender) {","            local.assetsDict['/'] = local.templateRender(","                local.assetsDict['/assets.index.template.html'],","                {","                    env: local.objectSetDefault(local.env, {","                        npm_package_description: 'the greatest app in the world!',","                        npm_package_name: 'my-app',","                        npm_package_nameAlias: 'my_app',","                        npm_package_version: '0.0.1'","                    })","                }","            );","        } else {","            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']","                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {","                    // jslint-hack","                    String(match0);","                    switch (match1) {","                    case 'npm_package_description':","                        return 'the greatest app in the world!';","                    case 'npm_package_name':","                        return 'my-app';","                    case 'npm_package_nameAlias':","                        return 'my_app';","                    case 'npm_package_version':","                        return '0.0.1';","                    }","                });","        }","        // run the cli","        if (local.global.utility2_rollup || module !== require.main) {","            break;","        }","        local.assetsDict['/assets.example.js'] =","            local.assetsDict['/assets.example.js'] ||","            local.fs.readFileSync(__filename, 'utf8');","        // bug-workaround - long $npm_package_buildCustomOrg","        /* jslint-ignore-begin */","        local.assetsDict['/assets.npmtest_discord_js.rollup.js'] =","            local.assetsDict['/assets.npmtest_discord_js.rollup.js'] ||","            local.fs.readFileSync(","                local.npmtest_discord_js.__dirname + '/lib.npmtest_discord_js.js',","                'utf8'","            ).replace((/^#!/), '//');","        /* jslint-ignore-end */","        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';","        // if $npm_config_timeout_exit exists,","        // then exit this process after $npm_config_timeout_exit ms","        if (Number(process.env.npm_config_timeout_exit)) {","            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));","        }","        // start server","        if (local.global.utility2_serverHttp1) {","            break;","        }","        process.env.PORT = process.env.PORT || '8081';","        console.error('server starting on port ' + process.env.PORT);","        local.http.createServer(function (request, response) {","            request.urlParsed = local.url.parse(request.url);","            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {","                response.end(local.assetsDict[request.urlParsed.pathname]);","                return;","            }","            response.statusCode = 404;","            response.end();","        }).listen(process.env.PORT);","        break;","    }","}());",""],"l":{"26":2,"28":2,"33":2,"35":2,"37":2,"38":2,"39":2,"44":1,"51":2,"55":2,"59":2,"61":2,"69":1,"70":2,"76":2,"79":2,"82":2,"83":2,"85":1,"89":2,"92":1,"93":1,"94":1,"96":1,"97":1,"100":1,"101":1,"103":1,"106":1,"108":2,"114":1,"116":1,"118":1,"123":1,"124":2,"125":2,"126":3,"127":3,"128":3,"129":3,"130":1,"133":3,"134":3,"139":3,"143":1,"144":3,"145":1,"149":1,"150":1,"158":1,"160":1,"161":1,"162":1,"164":1,"166":1,"258":1,"259":1,"271":1,"274":6,"275":6,"277":1,"279":2,"281":1,"283":2,"288":1,"289":1,"291":1,"296":1,"303":1,"306":1,"307":1,"310":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1,"321":1,"322":1,"324":1}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/index.js","s":{"1":24,"2":0,"3":0},"b":{"1":[0,0]},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":45,"column":2}},"2":{"start":{"line":47,"column":0},"end":{"line":47,"column":67}},"3":{"start":{"line":47,"column":35},"end":{"line":47,"column":67}}},"branchMap":{"1":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":0},"end":{"line":47,"column":0}},{"start":{"line":47,"column":0},"end":{"line":47,"column":0}}]}},"code":["module.exports = {","  Client: require('./client/Client'),","  WebhookClient: require('./client/WebhookClient'),","  Shard: require('./sharding/Shard'),","  ShardClientUtil: require('./sharding/ShardClientUtil'),","  ShardingManager: require('./sharding/ShardingManager'),","","  Collection: require('./util/Collection'),","  splitMessage: require('./util/SplitMessage'),","  escapeMarkdown: require('./util/EscapeMarkdown'),","  fetchRecommendedShards: require('./util/FetchRecommendedShards'),","","  Channel: require('./structures/Channel'),","  ClientOAuth2Application: require('./structures/ClientOAuth2Application'),","  ClientUser: require('./structures/ClientUser'),","  DMChannel: require('./structures/DMChannel'),","  Emoji: require('./structures/Emoji'),","  EvaluatedPermissions: require('./structures/EvaluatedPermissions'),","  Game: require('./structures/Presence').Game,","  GroupDMChannel: require('./structures/GroupDMChannel'),","  Guild: require('./structures/Guild'),","  GuildChannel: require('./structures/GuildChannel'),","  GuildMember: require('./structures/GuildMember'),","  Invite: require('./structures/Invite'),","  Message: require('./structures/Message'),","  MessageAttachment: require('./structures/MessageAttachment'),","  MessageCollector: require('./structures/MessageCollector'),","  MessageEmbed: require('./structures/MessageEmbed'),","  MessageReaction: require('./structures/MessageReaction'),","  OAuth2Application: require('./structures/OAuth2Application'),","  PartialGuild: require('./structures/PartialGuild'),","  PartialGuildChannel: require('./structures/PartialGuildChannel'),","  PermissionOverwrites: require('./structures/PermissionOverwrites'),","  Presence: require('./structures/Presence').Presence,","  ReactionEmoji: require('./structures/ReactionEmoji'),","  RichEmbed: require('./structures/RichEmbed'),","  Role: require('./structures/Role'),","  TextChannel: require('./structures/TextChannel'),","  User: require('./structures/User'),","  VoiceChannel: require('./structures/VoiceChannel'),","  Webhook: require('./structures/Webhook'),","","  version: require('../package').version,","  Constants: require('./util/Constants'),","};","","if (typeof window !== 'undefined') window.Discord = module.exports; // eslint-disable-line no-undef",""],"l":{"1":24,"47":0}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/Client.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/Client.js","s":{"1":26,"2":26,"3":26,"4":26,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},"fnMap":{"1":{"name":"(anonymous_1)","line":23,"loc":{"start":{"line":23,"column":13},"end":{"line":23,"column":28}}},"2":{"name":"(anonymous_2)","line":159,"loc":{"start":{"line":159,"column":12},"end":{"line":159,"column":15}}},"3":{"name":"(anonymous_3)","line":168,"loc":{"start":{"line":168,"column":12},"end":{"line":168,"column":15}}},"4":{"name":"(anonymous_4)","line":177,"loc":{"start":{"line":177,"column":10},"end":{"line":177,"column":13}}},"5":{"name":"(anonymous_5)","line":186,"loc":{"start":{"line":186,"column":22},"end":{"line":186,"column":25}}},"6":{"name":"(anonymous_6)","line":196,"loc":{"start":{"line":196,"column":12},"end":{"line":196,"column":15}}},"7":{"name":"(anonymous_7)","line":209,"loc":{"start":{"line":209,"column":20},"end":{"line":209,"column":23}}},"8":{"name":"(anonymous_8)","line":218,"loc":{"start":{"line":218,"column":13},"end":{"line":218,"column":16}}},"9":{"name":"(anonymous_9)","line":239,"loc":{"start":{"line":239,"column":7},"end":{"line":239,"column":15}}},"10":{"name":"(anonymous_10)","line":247,"loc":{"start":{"line":247,"column":9},"end":{"line":247,"column":12}}},"11":{"name":"(anonymous_11)","line":261,"loc":{"start":{"line":261,"column":12},"end":{"line":261,"column":35}}},"12":{"name":"(anonymous_12)","line":275,"loc":{"start":{"line":275,"column":11},"end":{"line":275,"column":16}}},"13":{"name":"(anonymous_13)","line":285,"loc":{"start":{"line":285,"column":13},"end":{"line":285,"column":22}}},"14":{"name":"(anonymous_14)","line":296,"loc":{"start":{"line":296,"column":14},"end":{"line":296,"column":26}}},"15":{"name":"(anonymous_15)","line":308,"loc":{"start":{"line":308,"column":15},"end":{"line":308,"column":62}}},"16":{"name":"(anonymous_16)","line":341,"loc":{"start":{"line":341,"column":18},"end":{"line":341,"column":21}}},"17":{"name":"(anonymous_17)","line":356,"loc":{"start":{"line":356,"column":16},"end":{"line":356,"column":30}}},"18":{"name":"(anonymous_18)","line":374,"loc":{"start":{"line":374,"column":12},"end":{"line":374,"column":33}}},"19":{"name":"(anonymous_19)","line":387,"loc":{"start":{"line":387,"column":14},"end":{"line":387,"column":24}}},"20":{"name":"(anonymous_20)","line":399,"loc":{"start":{"line":399,"column":13},"end":{"line":399,"column":34}}},"21":{"name":"(anonymous_21)","line":409,"loc":{"start":{"line":409,"column":15},"end":{"line":409,"column":26}}},"22":{"name":"(anonymous_22)","line":414,"loc":{"start":{"line":414,"column":7},"end":{"line":414,"column":19}}},"23":{"name":"(anonymous_23)","line":420,"loc":{"start":{"line":420,"column":14},"end":{"line":420,"column":29}}},"24":{"name":"(anonymous_24)","line":428,"loc":{"start":{"line":428,"column":7},"end":{"line":428,"column":16}}},"25":{"name":"(anonymous_25)","line":432,"loc":{"start":{"line":432,"column":18},"end":{"line":432,"column":43}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":52}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":53}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":47}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":50}},"5":{"start":{"line":5,"column":0},"end":{"line":5,"column":57}},"6":{"start":{"line":6,"column":0},"end":{"line":6,"column":49}},"7":{"start":{"line":7,"column":0},"end":{"line":7,"column":59}},"8":{"start":{"line":8,"column":0},"end":{"line":8,"column":65}},"9":{"start":{"line":9,"column":0},"end":{"line":9,"column":65}},"10":{"start":{"line":10,"column":0},"end":{"line":10,"column":59}},"11":{"start":{"line":11,"column":0},"end":{"line":11,"column":49}},"12":{"start":{"line":12,"column":0},"end":{"line":12,"column":60}},"13":{"start":{"line":13,"column":0},"end":{"line":13,"column":63}},"14":{"start":{"line":24,"column":4},"end":{"line":24,"column":12}},"15":{"start":{"line":27,"column":4},"end":{"line":27,"column":102}},"16":{"start":{"line":27,"column":55},"end":{"line":27,"column":102}},"17":{"start":{"line":28,"column":4},"end":{"line":28,"column":114}},"18":{"start":{"line":28,"column":61},"end":{"line":28,"column":114}},"19":{"start":{"line":34,"column":4},"end":{"line":34,"column":67}},"20":{"start":{"line":35,"column":4},"end":{"line":35,"column":28}},"21":{"start":{"line":42,"column":4},"end":{"line":42,"column":38}},"22":{"start":{"line":49,"column":4},"end":{"line":49,"column":51}},"23":{"start":{"line":56,"column":4},"end":{"line":56,"column":43}},"24":{"start":{"line":63,"column":4},"end":{"line":63,"column":41}},"25":{"start":{"line":70,"column":4},"end":{"line":70,"column":49}},"26":{"start":{"line":77,"column":4},"end":{"line":77,"column":44}},"27":{"start":{"line":84,"column":4},"end":{"line":84,"column":69}},"28":{"start":{"line":90,"column":4},"end":{"line":90,"column":71}},"29":{"start":{"line":96,"column":4},"end":{"line":96,"column":34}},"30":{"start":{"line":102,"column":4},"end":{"line":102,"column":35}},"31":{"start":{"line":108,"column":4},"end":{"line":108,"column":37}},"32":{"start":{"line":115,"column":4},"end":{"line":115,"column":38}},"33":{"start":{"line":117,"column":4},"end":{"line":125,"column":5}},"34":{"start":{"line":122,"column":6},"end":{"line":122,"column":44}},"35":{"start":{"line":124,"column":6},"end":{"line":124,"column":24}},"36":{"start":{"line":131,"column":4},"end":{"line":131,"column":21}},"37":{"start":{"line":137,"column":4},"end":{"line":137,"column":24}},"38":{"start":{"line":143,"column":4},"end":{"line":143,"column":20}},"39":{"start":{"line":145,"column":4},"end":{"line":145,"column":28}},"40":{"start":{"line":146,"column":4},"end":{"line":146,"column":31}},"41":{"start":{"line":147,"column":4},"end":{"line":147,"column":32}},"42":{"start":{"line":149,"column":4},"end":{"line":151,"column":5}},"43":{"start":{"line":150,"column":6},"end":{"line":150,"column":96}},"44":{"start":{"line":160,"column":4},"end":{"line":160,"column":26}},"45":{"start":{"line":169,"column":4},"end":{"line":169,"column":59}},"46":{"start":{"line":178,"column":4},"end":{"line":178,"column":75}},"47":{"start":{"line":178,"column":42},"end":{"line":178,"column":50}},"48":{"start":{"line":187,"column":4},"end":{"line":187,"column":46}},"49":{"start":{"line":187,"column":22},"end":{"line":187,"column":46}},"50":{"start":{"line":188,"column":4},"end":{"line":188,"column":34}},"51":{"start":{"line":197,"column":4},"end":{"line":197,"column":36}},"52":{"start":{"line":198,"column":4},"end":{"line":200,"column":5}},"53":{"start":{"line":199,"column":6},"end":{"line":199,"column":77}},"54":{"start":{"line":199,"column":49},"end":{"line":199,"column":77}},"55":{"start":{"line":201,"column":4},"end":{"line":201,"column":18}},"56":{"start":{"line":210,"column":4},"end":{"line":210,"column":56}},"57":{"start":{"line":219,"column":4},"end":{"line":219,"column":41}},"58":{"start":{"line":240,"column":4},"end":{"line":240,"column":42}},"59":{"start":{"line":248,"column":4},"end":{"line":248,"column":52}},"60":{"start":{"line":248,"column":36},"end":{"line":248,"column":52}},"61":{"start":{"line":249,"column":4},"end":{"line":249,"column":54}},"62":{"start":{"line":249,"column":37},"end":{"line":249,"column":54}},"63":{"start":{"line":250,"column":4},"end":{"line":250,"column":27}},"64":{"start":{"line":251,"column":4},"end":{"line":251,"column":28}},"65":{"start":{"line":252,"column":4},"end":{"line":252,"column":34}},"66":{"start":{"line":262,"column":4},"end":{"line":262,"column":30}},"67":{"start":{"line":262,"column":23},"end":{"line":262,"column":30}},"68":{"start":{"line":263,"column":4},"end":{"line":266,"column":7}},"69":{"start":{"line":265,"column":76},"end":{"line":265,"column":80}},"70":{"start":{"line":276,"column":4},"end":{"line":276,"column":71}},"71":{"start":{"line":276,"column":28},"end":{"line":276,"column":71}},"72":{"start":{"line":277,"column":4},"end":{"line":277,"column":41}},"73":{"start":{"line":286,"column":4},"end":{"line":286,"column":57}},"74":{"start":{"line":287,"column":4},"end":{"line":287,"column":45}},"75":{"start":{"line":297,"column":4},"end":{"line":297,"column":51}},"76":{"start":{"line":309,"column":4},"end":{"line":309,"column":111}},"77":{"start":{"line":309,"column":57},"end":{"line":309,"column":111}},"78":{"start":{"line":310,"column":4},"end":{"line":313,"column":5}},"79":{"start":{"line":311,"column":6},"end":{"line":311,"column":75}},"80":{"start":{"line":312,"column":6},"end":{"line":312,"column":16}},"81":{"start":{"line":315,"column":4},"end":{"line":315,"column":39}},"82":{"start":{"line":316,"column":4},"end":{"line":316,"column":27}},"83":{"start":{"line":317,"column":4},"end":{"line":317,"column":21}},"84":{"start":{"line":318,"column":4},"end":{"line":318,"column":21}},"85":{"start":{"line":320,"column":4},"end":{"line":330,"column":5}},"86":{"start":{"line":321,"column":6},"end":{"line":321,"column":38}},"87":{"start":{"line":321,"column":29},"end":{"line":321,"column":38}},"88":{"start":{"line":322,"column":6},"end":{"line":322,"column":17}},"89":{"start":{"line":324,"column":6},"end":{"line":329,"column":7}},"90":{"start":{"line":325,"column":8},"end":{"line":328,"column":9}},"91":{"start":{"line":326,"column":10},"end":{"line":326,"column":46}},"92":{"start":{"line":327,"column":10},"end":{"line":327,"column":21}},"93":{"start":{"line":332,"column":4},"end":{"line":332,"column":119}},"94":{"start":{"line":333,"column":4},"end":{"line":333,"column":20}},"95":{"start":{"line":342,"column":4},"end":{"line":342,"column":73}},"96":{"start":{"line":342,"column":24},"end":{"line":342,"column":73}},"97":{"start":{"line":343,"column":4},"end":{"line":343,"column":48}},"98":{"start":{"line":357,"column":4},"end":{"line":361,"column":5}},"99":{"start":{"line":358,"column":6},"end":{"line":358,"column":100}},"100":{"start":{"line":358,"column":40},"end":{"line":358,"column":100}},"101":{"start":{"line":360,"column":6},"end":{"line":360,"column":22}},"102":{"start":{"line":362,"column":4},"end":{"line":364,"column":6}},"103":{"start":{"line":363,"column":6},"end":{"line":363,"column":112}},"104":{"start":{"line":375,"column":4},"end":{"line":378,"column":23}},"105":{"start":{"line":376,"column":6},"end":{"line":376,"column":11}},"106":{"start":{"line":377,"column":6},"end":{"line":377,"column":37}},"107":{"start":{"line":379,"column":4},"end":{"line":379,"column":32}},"108":{"start":{"line":380,"column":4},"end":{"line":380,"column":19}},"109":{"start":{"line":388,"column":4},"end":{"line":388,"column":26}},"110":{"start":{"line":389,"column":4},"end":{"line":389,"column":35}},"111":{"start":{"line":400,"column":4},"end":{"line":400,"column":53}},"112":{"start":{"line":401,"column":4},"end":{"line":401,"column":34}},"113":{"start":{"line":402,"column":4},"end":{"line":402,"column":20}},"114":{"start":{"line":410,"column":4},"end":{"line":410,"column":28}},"115":{"start":{"line":411,"column":4},"end":{"line":411,"column":37}},"116":{"start":{"line":415,"column":4},"end":{"line":415,"column":47}},"117":{"start":{"line":416,"column":4},"end":{"line":416,"column":53}},"118":{"start":{"line":416,"column":31},"end":{"line":416,"column":53}},"119":{"start":{"line":417,"column":4},"end":{"line":417,"column":36}},"120":{"start":{"line":421,"column":4},"end":{"line":424,"column":5}},"121":{"start":{"line":422,"column":6},"end":{"line":422,"column":46}},"122":{"start":{"line":423,"column":6},"end":{"line":423,"column":13}},"123":{"start":{"line":425,"column":4},"end":{"line":425,"column":51}},"124":{"start":{"line":429,"column":4},"end":{"line":429,"column":24}},"125":{"start":{"line":433,"column":4},"end":{"line":435,"column":5}},"126":{"start":{"line":434,"column":6},"end":{"line":434,"column":69}},"127":{"start":{"line":436,"column":4},"end":{"line":438,"column":5}},"128":{"start":{"line":437,"column":6},"end":{"line":437,"column":66}},"129":{"start":{"line":439,"column":4},"end":{"line":439,"column":98}},"130":{"start":{"line":439,"column":32},"end":{"line":439,"column":98}},"131":{"start":{"line":440,"column":4},"end":{"line":440,"column":92}},"132":{"start":{"line":440,"column":29},"end":{"line":440,"column":92}},"133":{"start":{"line":441,"column":4},"end":{"line":443,"column":5}},"134":{"start":{"line":442,"column":6},"end":{"line":442,"column":79}},"135":{"start":{"line":444,"column":4},"end":{"line":446,"column":5}},"136":{"start":{"line":445,"column":6},"end":{"line":445,"column":78}},"137":{"start":{"line":447,"column":4},"end":{"line":449,"column":5}},"138":{"start":{"line":448,"column":6},"end":{"line":448,"column":79}},"139":{"start":{"line":450,"column":4},"end":{"line":452,"column":5}},"140":{"start":{"line":451,"column":6},"end":{"line":451,"column":79}},"141":{"start":{"line":453,"column":4},"end":{"line":455,"column":5}},"142":{"start":{"line":454,"column":6},"end":{"line":454,"column":75}},"143":{"start":{"line":456,"column":4},"end":{"line":458,"column":5}},"144":{"start":{"line":457,"column":6},"end":{"line":457,"column":75}},"145":{"start":{"line":459,"column":4},"end":{"line":461,"column":5}},"146":{"start":{"line":460,"column":6},"end":{"line":460,"column":78}},"147":{"start":{"line":462,"column":4},"end":{"line":462,"column":119}},"148":{"start":{"line":462,"column":52},"end":{"line":462,"column":119}},"149":{"start":{"line":466,"column":0},"end":{"line":466,"column":24}}},"branchMap":{"1":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":4},"end":{"line":27,"column":4}},{"start":{"line":27,"column":4},"end":{"line":27,"column":4}}]},"2":{"line":27,"type":"binary-expr","locations":[{"start":{"line":27,"column":8},"end":{"line":27,"column":24}},{"start":{"line":27,"column":28},"end":{"line":27,"column":53}}]},"3":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":4},"end":{"line":28,"column":4}},{"start":{"line":28,"column":4},"end":{"line":28,"column":4}}]},"4":{"line":28,"type":"binary-expr","locations":[{"start":{"line":28,"column":8},"end":{"line":28,"column":27}},{"start":{"line":28,"column":31},"end":{"line":28,"column":59}}]},"5":{"line":84,"type":"cond-expr","locations":[{"start":{"line":84,"column":33},"end":{"line":84,"column":61}},{"start":{"line":84,"column":64},"end":{"line":84,"column":68}}]},"6":{"line":90,"type":"cond-expr","locations":[{"start":{"line":90,"column":32},"end":{"line":90,"column":63}},{"start":{"line":90,"column":66},"end":{"line":90,"column":70}}]},"7":{"line":117,"type":"if","locations":[{"start":{"line":117,"column":4},"end":{"line":117,"column":4}},{"start":{"line":117,"column":4},"end":{"line":117,"column":4}}]},"8":{"line":117,"type":"binary-expr","locations":[{"start":{"line":117,"column":8},"end":{"line":117,"column":19}},{"start":{"line":117,"column":23},"end":{"line":117,"column":52}}]},"9":{"line":149,"type":"if","locations":[{"start":{"line":149,"column":4},"end":{"line":149,"column":4}},{"start":{"line":149,"column":4},"end":{"line":149,"column":4}}]},"10":{"line":169,"type":"cond-expr","locations":[{"start":{"line":169,"column":26},"end":{"line":169,"column":51}},{"start":{"line":169,"column":54},"end":{"line":169,"column":58}}]},"11":{"line":187,"type":"if","locations":[{"start":{"line":187,"column":4},"end":{"line":187,"column":4}},{"start":{"line":187,"column":4},"end":{"line":187,"column":4}}]},"12":{"line":210,"type":"cond-expr","locations":[{"start":{"line":210,"column":26},"end":{"line":210,"column":48}},{"start":{"line":210,"column":51},"end":{"line":210,"column":55}}]},"13":{"line":262,"type":"if","locations":[{"start":{"line":262,"column":4},"end":{"line":262,"column":4}},{"start":{"line":262,"column":4},"end":{"line":262,"column":4}}]},"14":{"line":265,"type":"cond-expr","locations":[{"start":{"line":265,"column":40},"end":{"line":265,"column":57}},{"start":{"line":265,"column":60},"end":{"line":265,"column":81}}]},"15":{"line":276,"type":"if","locations":[{"start":{"line":276,"column":4},"end":{"line":276,"column":4}},{"start":{"line":276,"column":4},"end":{"line":276,"column":4}}]},"16":{"line":309,"type":"if","locations":[{"start":{"line":309,"column":4},"end":{"line":309,"column":4}},{"start":{"line":309,"column":4},"end":{"line":309,"column":4}}]},"17":{"line":309,"type":"binary-expr","locations":[{"start":{"line":309,"column":8},"end":{"line":309,"column":36}},{"start":{"line":309,"column":40},"end":{"line":309,"column":55}}]},"18":{"line":310,"type":"if","locations":[{"start":{"line":310,"column":4},"end":{"line":310,"column":4}},{"start":{"line":310,"column":4},"end":{"line":310,"column":4}}]},"19":{"line":321,"type":"if","locations":[{"start":{"line":321,"column":6},"end":{"line":321,"column":6}},{"start":{"line":321,"column":6},"end":{"line":321,"column":6}}]},"20":{"line":325,"type":"if","locations":[{"start":{"line":325,"column":8},"end":{"line":325,"column":8}},{"start":{"line":325,"column":8},"end":{"line":325,"column":8}}]},"21":{"line":325,"type":"binary-expr","locations":[{"start":{"line":325,"column":19},"end":{"line":325,"column":42}},{"start":{"line":325,"column":46},"end":{"line":325,"column":70}}]},"22":{"line":342,"type":"if","locations":[{"start":{"line":342,"column":4},"end":{"line":342,"column":4}},{"start":{"line":342,"column":4},"end":{"line":342,"column":4}}]},"23":{"line":357,"type":"if","locations":[{"start":{"line":357,"column":4},"end":{"line":357,"column":4}},{"start":{"line":357,"column":4},"end":{"line":357,"column":4}}]},"24":{"line":358,"type":"if","locations":[{"start":{"line":358,"column":6},"end":{"line":358,"column":6}},{"start":{"line":358,"column":6},"end":{"line":358,"column":6}}]},"25":{"line":416,"type":"if","locations":[{"start":{"line":416,"column":4},"end":{"line":416,"column":4}},{"start":{"line":416,"column":4},"end":{"line":416,"column":4}}]},"26":{"line":421,"type":"if","locations":[{"start":{"line":421,"column":4},"end":{"line":421,"column":4}},{"start":{"line":421,"column":4},"end":{"line":421,"column":4}}]},"27":{"line":433,"type":"if","locations":[{"start":{"line":433,"column":4},"end":{"line":433,"column":4}},{"start":{"line":433,"column":4},"end":{"line":433,"column":4}}]},"28":{"line":433,"type":"binary-expr","locations":[{"start":{"line":433,"column":8},"end":{"line":433,"column":46}},{"start":{"line":433,"column":50},"end":{"line":433,"column":75}}]},"29":{"line":436,"type":"if","locations":[{"start":{"line":436,"column":4},"end":{"line":436,"column":4}},{"start":{"line":436,"column":4},"end":{"line":436,"column":4}}]},"30":{"line":436,"type":"binary-expr","locations":[{"start":{"line":436,"column":8},"end":{"line":436,"column":43}},{"start":{"line":436,"column":47},"end":{"line":436,"column":69}}]},"31":{"line":439,"type":"if","locations":[{"start":{"line":439,"column":4},"end":{"line":439,"column":4}},{"start":{"line":439,"column":4},"end":{"line":439,"column":4}}]},"32":{"line":440,"type":"if","locations":[{"start":{"line":440,"column":4},"end":{"line":440,"column":4}},{"start":{"line":440,"column":4},"end":{"line":440,"column":4}}]},"33":{"line":441,"type":"if","locations":[{"start":{"line":441,"column":4},"end":{"line":441,"column":4}},{"start":{"line":441,"column":4},"end":{"line":441,"column":4}}]},"34":{"line":441,"type":"binary-expr","locations":[{"start":{"line":441,"column":8},"end":{"line":441,"column":29}},{"start":{"line":441,"column":33},"end":{"line":441,"column":70}}]},"35":{"line":444,"type":"if","locations":[{"start":{"line":444,"column":4},"end":{"line":444,"column":4}},{"start":{"line":444,"column":4},"end":{"line":444,"column":4}}]},"36":{"line":444,"type":"binary-expr","locations":[{"start":{"line":444,"column":8},"end":{"line":444,"column":55}},{"start":{"line":444,"column":59},"end":{"line":444,"column":93}}]},"37":{"line":447,"type":"if","locations":[{"start":{"line":447,"column":4},"end":{"line":447,"column":4}},{"start":{"line":447,"column":4},"end":{"line":447,"column":4}}]},"38":{"line":447,"type":"binary-expr","locations":[{"start":{"line":447,"column":8},"end":{"line":447,"column":56}},{"start":{"line":447,"column":60},"end":{"line":447,"column":95}}]},"39":{"line":450,"type":"if","locations":[{"start":{"line":450,"column":4},"end":{"line":450,"column":4}},{"start":{"line":450,"column":4},"end":{"line":450,"column":4}}]},"40":{"line":450,"type":"binary-expr","locations":[{"start":{"line":450,"column":8},"end":{"line":450,"column":56}},{"start":{"line":450,"column":60},"end":{"line":450,"column":95}}]},"41":{"line":453,"type":"if","locations":[{"start":{"line":453,"column":4},"end":{"line":453,"column":4}},{"start":{"line":453,"column":4},"end":{"line":453,"column":4}}]},"42":{"line":456,"type":"if","locations":[{"start":{"line":456,"column":4},"end":{"line":456,"column":4}},{"start":{"line":456,"column":4},"end":{"line":456,"column":4}}]},"43":{"line":459,"type":"if","locations":[{"start":{"line":459,"column":4},"end":{"line":459,"column":4}},{"start":{"line":459,"column":4},"end":{"line":459,"column":4}}]},"44":{"line":459,"type":"binary-expr","locations":[{"start":{"line":459,"column":8},"end":{"line":459,"column":55}},{"start":{"line":459,"column":59},"end":{"line":459,"column":93}}]},"45":{"line":462,"type":"if","locations":[{"start":{"line":462,"column":4},"end":{"line":462,"column":4}},{"start":{"line":462,"column":4},"end":{"line":462,"column":4}}]}},"code":["const EventEmitter = require('events').EventEmitter;","const mergeDefault = require('../util/MergeDefault');","const Constants = require('../util/Constants');","const RESTManager = require('./rest/RESTManager');","const ClientDataManager = require('./ClientDataManager');","const ClientManager = require('./ClientManager');","const ClientDataResolver = require('./ClientDataResolver');","const ClientVoiceManager = require('./voice/ClientVoiceManager');","const WebSocketManager = require('./websocket/WebSocketManager');","const ActionsManager = require('./actions/ActionsManager');","const Collection = require('../util/Collection');","const Presence = require('../structures/Presence').Presence;","const ShardClientUtil = require('../sharding/ShardClientUtil');","","/**"," * The starting point for making a Discord Bot."," * @extends {EventEmitter}"," */","class Client extends EventEmitter {","  /**","   * @param {ClientOptions} [options] Options for the client","   */","  constructor(options = {}) {","    super();","","    // Obtain shard details from environment","    if (!options.shardId && 'SHARD_ID' in process.env) options.shardId = Number(process.env.SHARD_ID);","    if (!options.shardCount && 'SHARD_COUNT' in process.env) options.shardCount = Number(process.env.SHARD_COUNT);","","    /**","     * The options the client was instantiated with","     * @type {ClientOptions}","     */","    this.options = mergeDefault(Constants.DefaultOptions, options);","    this._validateOptions();","","    /**","     * The REST manager of the client","     * @type {RESTManager}","     * @private","     */","    this.rest = new RESTManager(this);","","    /**","     * The data manager of the Client","     * @type {ClientDataManager}","     * @private","     */","    this.dataManager = new ClientDataManager(this);","","    /**","     * The manager of the Client","     * @type {ClientManager}","     * @private","     */","    this.manager = new ClientManager(this);","","    /**","     * The WebSocket Manager of the Client","     * @type {WebSocketManager}","     * @private","     */","    this.ws = new WebSocketManager(this);","","    /**","     * The Data Resolver of the Client","     * @type {ClientDataResolver}","     * @private","     */","    this.resolver = new ClientDataResolver(this);","","    /**","     * The Action Manager of the Client","     * @type {ActionsManager}","     * @private","     */","    this.actions = new ActionsManager(this);","","    /**","     * The Voice Manager of the Client (`null` in browsers)","     * @type {?ClientVoiceManager}","     * @private","     */","    this.voice = !this.browser ? new ClientVoiceManager(this) : null;","","    /**","     * The shard helpers for the client (only if the process was spawned as a child, such as from a ShardingManager)","     * @type {?ShardClientUtil}","     */","    this.shard = process.send ? ShardClientUtil.singleton(this) : null;","","    /**","     * A collection of the Client's stored users","     * @type {Collection<string, User>}","     */","    this.users = new Collection();","","    /**","     * A collection of the Client's stored guilds","     * @type {Collection<string, Guild>}","     */","    this.guilds = new Collection();","","    /**","     * A collection of the Client's stored channels","     * @type {Collection<string, Channel>}","     */","    this.channels = new Collection();","","    /**","     * A collection of presences for friends of the logged in user.","     * <warn>This is only filled when using a user account.</warn>","     * @type {Collection<string, Presence>}","     */","    this.presences = new Collection();","","    if (!this.token && 'CLIENT_TOKEN' in process.env) {","      /**","       * The authorization token for the logged in user/bot.","       * @type {?string}","       */","      this.token = process.env.CLIENT_TOKEN;","    } else {","      this.token = null;","    }","","    /**","     * The ClientUser representing the logged in Client","     * @type {?ClientUser}","     */","    this.user = null;","","    /**","     * The date at which the Client was regarded as being in the `READY` state.","     * @type {?Date}","     */","    this.readyAt = null;","","    /**","     * The previous heartbeat pings of the websocket (most recent first, limited to three elements)","     * @type {number[]}","     */","    this.pings = [];","","    this._pingTimestamp = 0;","    this._timeouts = new Set();","    this._intervals = new Set();","","    if (this.options.messageSweepInterval > 0) {","      this.setInterval(this.sweepMessages.bind(this), this.options.messageSweepInterval * 1000);","    }","  }","","  /**","   * The status for the logged in Client.","   * @type {?number}","   * @readonly","   */","  get status() {","    return this.ws.status;","  }","","  /**","   * The uptime for the logged in Client.","   * @type {?number}","   * @readonly","   */","  get uptime() {","    return this.readyAt ? Date.now() - this.readyAt : null;","  }","","  /**","   * The average heartbeat ping of the websocket","   * @type {number}","   * @readonly","   */","  get ping() {","    return this.pings.reduce((prev, p) => prev + p, 0) / this.pings.length;","  }","","  /**","   * Returns a collection, mapping guild ID to voice connections.","   * @type {Collection<string, VoiceConnection>}","   * @readonly","   */","  get voiceConnections() {","    if (this.browser) return new Collection();","    return this.voice.connections;","  }","","  /**","   * The emojis that the client can use. Mapped by emoji ID.","   * @type {Collection<string, Emoji>}","   * @readonly","   */","  get emojis() {","    const emojis = new Collection();","    for (const guild of this.guilds.values()) {","      for (const emoji of guild.emojis.values()) emojis.set(emoji.id, emoji);","    }","    return emojis;","  }","","  /**","   * The timestamp that the client was last ready at","   * @type {?number}","   * @readonly","   */","  get readyTimestamp() {","    return this.readyAt ? this.readyAt.getTime() : null;","  }","","  /**","   * Whether the client is in a browser environment","   * @type {boolean}","   * @readonly","   */","  get browser() {","    return typeof window !== 'undefined';","  }","","  /**","   * Logs the client in. If successful, resolves with the account's token. <warn>If you're making a bot, it's","   * much better to use a bot account rather than a user account.","   * Bot accounts have higher rate limits and have access to some features user accounts don't have. User bots","   * that are making a lot of API requests can even be banned.</warn>","   * @param  {string} token The token used for the account.","   * @returns {Promise<string>}","   * @example","   * // log the client in using a token","   * const token = 'my token';","   * client.login(token);","   * @example","   * // log the client in using email and password","   * const email = 'user@email.com';","   * const password = 'supersecret123';","   * client.login(email, password);","   */","  login(token) {","    return this.rest.methods.login(token);","  }","","  /**","   * Destroys the client and logs out.","   * @returns {Promise}","   */","  destroy() {","    for (const t of this._timeouts) clearTimeout(t);","    for (const i of this._intervals) clearInterval(i);","    this._timeouts.clear();","    this._intervals.clear();","    return this.manager.destroy();","  }","","  /**","   * This shouldn't really be necessary to most developers as it is automatically invoked every 30 seconds, however","   * if you wish to force a sync of guild data, you can use this.","   * <warn>This is only available when using a user account.</warn>","   * @param {Guild[]|Collection<string, Guild>} [guilds=this.guilds] An array or collection of guilds to sync","   */","  syncGuilds(guilds = this.guilds) {","    if (this.user.bot) return;","    this.ws.send({","      op: 12,","      d: guilds instanceof Collection ? guilds.keyArray() : guilds.map(g => g.id),","    });","  }","","  /**","   * Caches a user, or obtains it from the cache if it's already cached.","   * <warn>This is only available when using a bot account.</warn>","   * @param {string} id The ID of the user to obtain","   * @returns {Promise<User>}","   */","  fetchUser(id) {","    if (this.users.has(id)) return Promise.resolve(this.users.get(id));","    return this.rest.methods.getUser(id);","  }","","  /**","   * Fetches an invite object from an invite code.","   * @param {InviteResolvable} invite An invite code or URL","   * @returns {Promise<Invite>}","   */","  fetchInvite(invite) {","    const code = this.resolver.resolveInviteCode(invite);","    return this.rest.methods.getInvite(code);","  }","","  /**","   * Fetch a webhook by ID.","   * @param {string} id ID of the webhook","   * @param {string} [token] Token for the webhook","   * @returns {Promise<Webhook>}","   */","  fetchWebhook(id, token) {","    return this.rest.methods.getWebhook(id, token);","  }","","  /**","   * Sweeps all channels' messages and removes the ones older than the max message lifetime.","   * If the message has been edited, the time of the edit is used rather than the time of the original message.","   * @param {number} [lifetime=this.options.messageCacheLifetime] Messages that are older than this (in seconds)","   * will be removed from the caches. The default is based on the client's `messageCacheLifetime` option.","   * @returns {number} Amount of messages that were removed from the caches,","   * or -1 if the message cache lifetime is unlimited","   */","  sweepMessages(lifetime = this.options.messageCacheLifetime) {","    if (typeof lifetime !== 'number' || isNaN(lifetime)) throw new TypeError('The lifetime must be a number.');","    if (lifetime <= 0) {","      this.emit('debug', 'Didn\\'t sweep messages - lifetime is unlimited');","      return -1;","    }","","    const lifetimeMs = lifetime * 1000;","    const now = Date.now();","    let channels = 0;","    let messages = 0;","","    for (const channel of this.channels.values()) {","      if (!channel.messages) continue;","      channels++;","","      for (const message of channel.messages.values()) {","        if (now - (message.editedTimestamp || message.createdTimestamp) > lifetimeMs) {","          channel.messages.delete(message.id);","          messages++;","        }","      }","    }","","    this.emit('debug', `Swept ${messages} messages older than ${lifetime} seconds in ${channels} text-based channels`);","    return messages;","  }","","  /**","   * Gets the bot's OAuth2 application.","   * <warn>This is only available when using a bot account.</warn>","   * @returns {Promise<ClientOAuth2Application>}","   */","  fetchApplication() {","    if (!this.user.bot) throw new Error(Constants.Errors.NO_BOT_ACCOUNT);","    return this.rest.methods.getMyApplication();","  }","","  /**","   * Generate an invite link for your bot","   * @param {PermissionResolvable[]|number} [permissions] An array of permissions to request","   * @returns {Promise<string>} The invite link","   * @example","   * client.generateInvite(['SEND_MESSAGES', 'MANAGE_GUILD', 'MENTION_EVERYONE'])","   *   .then(link => {","   *     console.log(`Generated bot invite link: ${link}`);","   *   });","   */","  generateInvite(permissions) {","    if (permissions) {","      if (permissions instanceof Array) permissions = this.resolver.resolvePermissions(permissions);","    } else {","      permissions = 0;","    }","    return this.fetchApplication().then(application =>","      `https://discordapp.com/oauth2/authorize?client_id=${application.id}&permissions=${permissions}&scope=bot`","    );","  }","","  /**","   * Sets a timeout that will be automatically cancelled if the client is destroyed.","   * @param {Function} fn Function to execute","   * @param {number} delay Time to wait before executing (in milliseconds)","   * @param {...*} args Arguments for the function","   * @returns {Timeout}","   */","  setTimeout(fn, delay, ...args) {","    const timeout = setTimeout(() => {","      fn();","      this._timeouts.delete(timeout);","    }, delay, ...args);","    this._timeouts.add(timeout);","    return timeout;","  }","","  /**","   * Clears a timeout","   * @param {Timeout} timeout Timeout to cancel","   */","  clearTimeout(timeout) {","    clearTimeout(timeout);","    this._timeouts.delete(timeout);","  }","","  /**","   * Sets an interval that will be automatically cancelled if the client is destroyed.","   * @param {Function} fn Function to execute","   * @param {number} delay Time to wait before executing (in milliseconds)","   * @param {...*} args Arguments for the function","   * @returns {Timeout}","   */","  setInterval(fn, delay, ...args) {","    const interval = setInterval(fn, delay, ...args);","    this._intervals.add(interval);","    return interval;","  }","","  /**","   * Clears an interval","   * @param {Timeout} interval Interval to cancel","   */","  clearInterval(interval) {","    clearInterval(interval);","    this._intervals.delete(interval);","  }","","  _pong(startTime) {","    this.pings.unshift(Date.now() - startTime);","    if (this.pings.length > 3) this.pings.length = 3;","    this.ws.lastHeartbeatAck = true;","  }","","  _setPresence(id, presence) {","    if (this.presences.get(id)) {","      this.presences.get(id).update(presence);","      return;","    }","    this.presences.set(id, new Presence(presence));","  }","","  _eval(script) {","    return eval(script);","  }","","  _validateOptions(options = this.options) {","    if (typeof options.shardCount !== 'number' || isNaN(options.shardCount)) {","      throw new TypeError('The shardCount option must be a number.');","    }","    if (typeof options.shardId !== 'number' || isNaN(options.shardId)) {","      throw new TypeError('The shardId option must be a number.');","    }","    if (options.shardCount < 0) throw new RangeError('The shardCount option must be at least 0.');","    if (options.shardId < 0) throw new RangeError('The shardId option must be at least 0.');","    if (options.shardId !== 0 && options.shardId >= options.shardCount) {","      throw new RangeError('The shardId option must be less than shardCount.');","    }","    if (typeof options.messageCacheMaxSize !== 'number' || isNaN(options.messageCacheMaxSize)) {","      throw new TypeError('The messageCacheMaxSize option must be a number.');","    }","    if (typeof options.messageCacheLifetime !== 'number' || isNaN(options.messageCacheLifetime)) {","      throw new TypeError('The messageCacheLifetime option must be a number.');","    }","    if (typeof options.messageSweepInterval !== 'number' || isNaN(options.messageSweepInterval)) {","      throw new TypeError('The messageSweepInterval option must be a number.');","    }","    if (typeof options.fetchAllMembers !== 'boolean') {","      throw new TypeError('The fetchAllMembers option must be a boolean.');","    }","    if (typeof options.disableEveryone !== 'boolean') {","      throw new TypeError('The disableEveryone option must be a boolean.');","    }","    if (typeof options.restWsBridgeTimeout !== 'number' || isNaN(options.restWsBridgeTimeout)) {","      throw new TypeError('The restWsBridgeTimeout option must be a number.');","    }","    if (!(options.disabledEvents instanceof Array)) throw new TypeError('The disabledEvents option must be an Array.');","  }","}","","module.exports = Client;","","/**"," * Emitted for general warnings"," * @event Client#warn"," * @param {string} info The warning"," */","","/**"," * Emitted for general debugging information"," * @event Client#debug"," * @param {string} info The debug information"," */",""],"l":{"1":26,"2":26,"3":26,"4":26,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"24":0,"27":0,"28":0,"34":0,"35":0,"42":0,"49":0,"56":0,"63":0,"70":0,"77":0,"84":0,"90":0,"96":0,"102":0,"108":0,"115":0,"117":0,"122":0,"124":0,"131":0,"137":0,"143":0,"145":0,"146":0,"147":0,"149":0,"150":0,"160":0,"169":0,"178":0,"187":0,"188":0,"197":0,"198":0,"199":0,"201":0,"210":0,"219":0,"240":0,"248":0,"249":0,"250":0,"251":0,"252":0,"262":0,"263":0,"265":0,"276":0,"277":0,"286":0,"287":0,"297":0,"309":0,"310":0,"311":0,"312":0,"315":0,"316":0,"317":0,"318":0,"320":0,"321":0,"322":0,"324":0,"325":0,"326":0,"327":0,"332":0,"333":0,"342":0,"343":0,"357":0,"358":0,"360":0,"362":0,"363":0,"375":0,"376":0,"377":0,"379":0,"380":0,"388":0,"389":0,"400":0,"401":0,"402":0,"410":0,"411":0,"415":0,"416":0,"417":0,"421":0,"422":0,"423":0,"425":0,"429":0,"433":0,"434":0,"436":0,"437":0,"439":0,"440":0,"441":0,"442":0,"444":0,"445":0,"447":0,"448":0,"450":0,"451":0,"453":0,"454":0,"456":0,"457":0,"459":0,"460":0,"462":0,"466":0}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/util/MergeDefault.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/util/MergeDefault.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"merge","line":1,"loc":{"start":{"line":1,"column":17},"end":{"line":1,"column":44}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":12,"column":2}},"2":{"start":{"line":2,"column":2},"end":{"line":2,"column":25}},"3":{"start":{"line":2,"column":14},"end":{"line":2,"column":25}},"4":{"start":{"line":3,"column":2},"end":{"line":9,"column":3}},"5":{"start":{"line":4,"column":4},"end":{"line":8,"column":5}},"6":{"start":{"line":5,"column":6},"end":{"line":5,"column":28}},"7":{"start":{"line":6,"column":11},"end":{"line":8,"column":5}},"8":{"start":{"line":7,"column":6},"end":{"line":7,"column":47}},"9":{"start":{"line":11,"column":2},"end":{"line":11,"column":15}}},"branchMap":{"1":{"line":2,"type":"if","locations":[{"start":{"line":2,"column":2},"end":{"line":2,"column":2}},{"start":{"line":2,"column":2},"end":{"line":2,"column":2}}]},"2":{"line":4,"type":"if","locations":[{"start":{"line":4,"column":4},"end":{"line":4,"column":4}},{"start":{"line":4,"column":4},"end":{"line":4,"column":4}}]},"3":{"line":6,"type":"if","locations":[{"start":{"line":6,"column":11},"end":{"line":6,"column":11}},{"start":{"line":6,"column":11},"end":{"line":6,"column":11}}]}},"code":["module.exports = function merge(def, given) {","  if (!given) return def;","  for (const key in def) {","    if (!{}.hasOwnProperty.call(given, key)) {","      given[key] = def[key];","    } else if (given[key] === Object(given[key])) {","      given[key] = merge(def[key], given[key]);","    }","  }","","  return given;","};",""],"l":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"11":0}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/util/Constants.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/util/Constants.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":27,"63":1,"64":1},"b":{"1":[1,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":48}},"2":{"start":{"line":31,"column":0},"end":{"line":63,"column":2}},"3":{"start":{"line":65,"column":0},"end":{"line":76,"column":2}},"4":{"start":{"line":78,"column":0},"end":{"line":78,"column":54}},"5":{"start":{"line":79,"column":0},"end":{"line":79,"column":53}},"6":{"start":{"line":80,"column":0},"end":{"line":80,"column":61}},"7":{"start":{"line":81,"column":0},"end":{"line":156,"column":2}},"8":{"start":{"line":87,"column":18},"end":{"line":87,"column":39}},"9":{"start":{"line":88,"column":22},"end":{"line":88,"column":48}},"10":{"start":{"line":89,"column":21},"end":{"line":89,"column":46}},"11":{"start":{"line":93,"column":20},"end":{"line":93,"column":44}},"12":{"start":{"line":94,"column":28},"end":{"line":94,"column":64}},"13":{"start":{"line":95,"column":27},"end":{"line":95,"column":62}},"14":{"start":{"line":97,"column":4},"end":{"line":97,"column":38}},"15":{"start":{"line":97,"column":24},"end":{"line":97,"column":38}},"16":{"start":{"line":98,"column":4},"end":{"line":98,"column":111}},"17":{"start":{"line":101,"column":24},"end":{"line":101,"column":59}},"18":{"start":{"line":103,"column":4},"end":{"line":103,"column":115}},"19":{"start":{"line":104,"column":29},"end":{"line":104,"column":70}},"20":{"start":{"line":105,"column":20},"end":{"line":105,"column":53}},"21":{"start":{"line":109,"column":22},"end":{"line":109,"column":54}},"22":{"start":{"line":110,"column":32},"end":{"line":110,"column":79}},"23":{"start":{"line":111,"column":34},"end":{"line":111,"column":84}},"24":{"start":{"line":112,"column":27},"end":{"line":112,"column":62}},"25":{"start":{"line":113,"column":27},"end":{"line":113,"column":62}},"26":{"start":{"line":114,"column":29},"end":{"line":114,"column":66}},"27":{"start":{"line":115,"column":27},"end":{"line":115,"column":62}},"28":{"start":{"line":116,"column":34},"end":{"line":116,"column":78}},"29":{"start":{"line":117,"column":26},"end":{"line":117,"column":60}},"30":{"start":{"line":118,"column":34},"end":{"line":118,"column":76}},"31":{"start":{"line":119,"column":29},"end":{"line":119,"column":66}},"32":{"start":{"line":120,"column":38},"end":{"line":120,"column":86}},"33":{"start":{"line":121,"column":50},"end":{"line":121,"column":111}},"34":{"start":{"line":122,"column":36},"end":{"line":122,"column":83}},"35":{"start":{"line":123,"column":30},"end":{"line":123,"column":68}},"36":{"start":{"line":124,"column":28},"end":{"line":124,"column":64}},"37":{"start":{"line":128,"column":26},"end":{"line":128,"column":62}},"38":{"start":{"line":129,"column":34},"end":{"line":129,"column":76}},"39":{"start":{"line":130,"column":33},"end":{"line":130,"column":74}},"40":{"start":{"line":131,"column":32},"end":{"line":131,"column":72}},"41":{"start":{"line":132,"column":37},"end":{"line":132,"column":82}},"42":{"start":{"line":133,"column":44},"end":{"line":133,"column":98}},"43":{"start":{"line":134,"column":34},"end":{"line":134,"column":76}},"44":{"start":{"line":137,"column":46},"end":{"line":137,"column":107}},"45":{"start":{"line":140,"column":10},"end":{"line":141,"column":45}},"46":{"start":{"line":143,"column":10},"end":{"line":143,"column":72}},"47":{"start":{"line":145,"column":10},"end":{"line":145,"column":74}},"48":{"start":{"line":148,"column":33},"end":{"line":148,"column":90}},"49":{"start":{"line":152,"column":18},"end":{"line":152,"column":59}},"50":{"start":{"line":155,"column":22},"end":{"line":155,"column":62}},"51":{"start":{"line":158,"column":0},"end":{"line":165,"column":2}},"52":{"start":{"line":167,"column":0},"end":{"line":172,"column":2}},"53":{"start":{"line":174,"column":0},"end":{"line":187,"column":2}},"54":{"start":{"line":189,"column":0},"end":{"line":196,"column":2}},"55":{"start":{"line":198,"column":0},"end":{"line":241,"column":2}},"56":{"start":{"line":280,"column":0},"end":{"line":315,"column":2}},"57":{"start":{"line":317,"column":0},"end":{"line":325,"column":2}},"58":{"start":{"line":327,"column":0},"end":{"line":333,"column":2}},"59":{"start":{"line":335,"column":0},"end":{"line":366,"column":2}},"60":{"start":{"line":368,"column":0},"end":{"line":368,"column":25}},"61":{"start":{"line":369,"column":0},"end":{"line":369,"column":76}},"62":{"start":{"line":369,"column":35},"end":{"line":369,"column":76}},"63":{"start":{"line":370,"column":0},"end":{"line":370,"column":43}},"64":{"start":{"line":371,"column":0},"end":{"line":371,"column":40}}},"branchMap":{"1":{"line":56,"type":"cond-expr","locations":[{"start":{"line":56,"column":21},"end":{"line":56,"column":37}},{"start":{"line":56,"column":40},"end":{"line":56,"column":52}}]},"2":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":4},"end":{"line":97,"column":4}},{"start":{"line":97,"column":4},"end":{"line":97,"column":4}}]},"3":{"line":98,"type":"cond-expr","locations":[{"start":{"line":98,"column":85},"end":{"line":98,"column":90}},{"start":{"line":98,"column":93},"end":{"line":98,"column":98}}]},"4":{"line":103,"type":"cond-expr","locations":[{"start":{"line":103,"column":86},"end":{"line":103,"column":108}},{"start":{"line":103,"column":111},"end":{"line":103,"column":113}}]},"5":{"line":141,"type":"cond-expr","locations":[{"start":{"line":141,"column":21},"end":{"line":141,"column":38}},{"start":{"line":141,"column":41},"end":{"line":141,"column":43}}]},"6":{"line":148,"type":"cond-expr","locations":[{"start":{"line":148,"column":72},"end":{"line":148,"column":83}},{"start":{"line":148,"column":86},"end":{"line":148,"column":88}}]}},"code":["exports.Package = require('../../package.json');","","/**"," * Options for a Client."," * @typedef {Object} ClientOptions"," * @property {string} [apiRequestMethod='sequential'] 'sequential' or 'burst'. Sequential executes all requests in"," * the order they are triggered, whereas burst runs multiple at a time, and doesn't guarantee a particular order."," * @property {number} [shardId=0] The ID of this shard"," * @property {number} [shardCount=0] The number of shards"," * @property {number} [messageCacheMaxSize=200] Maximum number of messages to cache per channel"," * (-1 or Infinity for unlimited - don't do this without message sweeping, otherwise memory usage will climb"," * indefinitely)"," * @property {number} [messageCacheLifetime=0] How long until a message should be uncached by the message sweeping"," * (in seconds, 0 for forever)"," * @property {number} [messageSweepInterval=0] How frequently to remove messages from the cache that are older than"," * the message cache lifetime (in seconds, 0 for never)"," * @property {boolean} [fetchAllMembers=false] Whether to cache all guild members and users upon startup, as well as"," * upon joining a guild"," * @property {boolean} [disableEveryone=false] Default value for MessageOptions.disableEveryone"," * @property {boolean} [sync=false] Whether to periodically sync guilds (for userbots)"," * @property {number} [restWsBridgeTimeout=5000] Maximum time permitted between REST responses and their"," * corresponding websocket events"," * @property {number} [restTimeOffset=500] The extra time in millseconds to wait before continuing to make REST"," * requests (higher values will reduce rate-limiting errors on bad connections)"," * @property {WSEventType[]} [disabledEvents] An array of disabled websocket events. Events in this array will not be"," * processed, potentially resulting in performance improvements for larger bots. Only disable events you are"," * 100% certain you don't need, as many are important, but not obviously so. The safest one to disable with the"," * most impact is typically `TYPING_START`."," * @property {WebsocketOptions} [ws] Options for the websocket"," */","exports.DefaultOptions = {","  apiRequestMethod: 'sequential',","  shardId: 0,","  shardCount: 0,","  messageCacheMaxSize: 200,","  messageCacheLifetime: 0,","  messageSweepInterval: 0,","  fetchAllMembers: false,","  disableEveryone: false,","  sync: false,","  restWsBridgeTimeout: 5000,","  disabledEvents: [],","  restTimeOffset: 500,","","  /**","   * Websocket options. These are left as snake_case to match the API.","   * @typedef {Object} WebsocketOptions","   * @property {number} [large_threshold=250] Number of members in a guild to be considered large","   * @property {boolean} [compress=true] Whether to compress data sent on the connection.","   * Defaults to `false` for browsers.","   */","  ws: {","    large_threshold: 250,","    compress: typeof window === 'undefined',","    properties: {","      $os: process ? process.platform : 'discord.js',","      $browser: 'discord.js',","      $device: 'discord.js',","      $referrer: '',","      $referring_domain: '',","    },","  },","};","","exports.Errors = {","  NO_TOKEN: 'Request to use token, but token was unavailable to the client.',","  NO_BOT_ACCOUNT: 'Only bot accounts are able to make use of this feature.',","  NO_USER_ACCOUNT: 'Only user accounts are able to make use of this feature.',","  BAD_WS_MESSAGE: 'A bad message was received from the websocket; either bad compression, or not JSON.',","  TOOK_TOO_LONG: 'Something took too long to do.',","  NOT_A_PERMISSION: 'Invalid permission string or number.',","  INVALID_RATE_LIMIT_METHOD: 'Unknown rate limiting method.',","  BAD_LOGIN: 'Incorrect login details were provided.',","  INVALID_SHARD: 'Invalid shard settings were provided.',","  INVALID_TOKEN: 'An invalid token was provided.',","};","","const PROTOCOL_VERSION = exports.PROTOCOL_VERSION = 6;","const HOST = exports.HOST = `https://discordapp.com`;","const API = exports.API = `${HOST}/api/v${PROTOCOL_VERSION}`;","const Endpoints = exports.Endpoints = {","  // general","  login: `${API}/auth/login`,","  logout: `${API}/auth/logout`,","  gateway: `${API}/gateway`,","  botGateway: `${API}/gateway/bot`,","  invite: (id) => `${API}/invite/${id}`,","  inviteLink: (id) => `https://discord.gg/${id}`,","  assets: (asset) => `${HOST}/assets/${asset}`,","  CDN: 'https://cdn.discordapp.com',","","  // users","  user: (userID) => `${API}/users/${userID}`,","  userChannels: (userID) => `${Endpoints.user(userID)}/channels`,","  userProfile: (userID) => `${Endpoints.user(userID)}/profile`,","  avatar: (userID, avatar) => {","    if (userID === '1') return avatar;","    return `${Endpoints.CDN}/avatars/${userID}/${avatar}.${avatar.startsWith('a_') ? 'gif' : 'jpg'}?size=1024`;","  },","  me: `${API}/users/@me`,","  meGuild: (guildID) => `${Endpoints.me}/guilds/${guildID}`,","  meMentions: (limit, roles, everyone, guildID) =>","    `users/@me/mentions?limit=${limit}&roles=${roles}&everyone=${everyone}${guildID ? `&guild_id=${guildID}` : ''}`,","  relationships: (userID) => `${Endpoints.user(userID)}/relationships`,","  note: (userID) => `${Endpoints.me}/notes/${userID}`,","","  // guilds","  guilds: `${API}/guilds`,","  guild: (guildID) => `${Endpoints.guilds}/${guildID}`,","  guildIcon: (guildID, hash) => `${Endpoints.CDN}/icons/${guildID}/${hash}.jpg`,","  guildSplash: (guildID, hash) => `${Endpoints.CDN}/splashes/${guildID}/${hash}.jpg`,","  guildPrune: (guildID) => `${Endpoints.guild(guildID)}/prune`,","  guildEmbed: (guildID) => `${Endpoints.guild(guildID)}/embed`,","  guildInvites: (guildID) => `${Endpoints.guild(guildID)}/invites`,","  guildRoles: (guildID) => `${Endpoints.guild(guildID)}/roles`,","  guildRole: (guildID, roleID) => `${Endpoints.guildRoles(guildID)}/${roleID}`,","  guildBans: (guildID) => `${Endpoints.guild(guildID)}/bans`,","  guildIntegrations: (guildID) => `${Endpoints.guild(guildID)}/integrations`,","  guildMembers: (guildID) => `${Endpoints.guild(guildID)}/members`,","  guildMember: (guildID, memberID) => `${Endpoints.guildMembers(guildID)}/${memberID}`,","  guildMemberRole: (guildID, memberID, roleID) => `${Endpoints.guildMember(guildID, memberID)}/roles/${roleID}`,","  guildMemberNickname: (guildID) => `${Endpoints.guildMember(guildID, '@me')}/nick`,","  guildChannels: (guildID) => `${Endpoints.guild(guildID)}/channels`,","  guildEmojis: (guildID) => `${Endpoints.guild(guildID)}/emojis`,","","  // channels","  channels: `${API}/channels`,","  channel: (channelID) => `${Endpoints.channels}/${channelID}`,","  channelMessages: (channelID) => `${Endpoints.channel(channelID)}/messages`,","  channelInvites: (channelID) => `${Endpoints.channel(channelID)}/invites`,","  channelTyping: (channelID) => `${Endpoints.channel(channelID)}/typing`,","  channelPermissions: (channelID) => `${Endpoints.channel(channelID)}/permissions`,","  channelMessage: (channelID, messageID) => `${Endpoints.channelMessages(channelID)}/${messageID}`,","  channelWebhooks: (channelID) => `${Endpoints.channel(channelID)}/webhooks`,","","  // message reactions","  messageReactions: (channelID, messageID) => `${Endpoints.channelMessage(channelID, messageID)}/reactions`,","  messageReaction:","    (channel, msg, emoji, limit) =>","          `${Endpoints.messageReactions(channel, msg)}/${emoji}` +","          `${limit ? `?limit=${limit}` : ''}`,","  selfMessageReaction: (channel, msg, emoji, limit) =>","          `${Endpoints.messageReaction(channel, msg, emoji, limit)}/@me`,","  userMessageReaction: (channel, msg, emoji, limit, id) =>","          `${Endpoints.messageReaction(channel, msg, emoji, limit)}/${id}`,","","  // webhooks","  webhook: (webhookID, token) => `${API}/webhooks/${webhookID}${token ? `/${token}` : ''}`,","","  // oauth","  myApplication: `${API}/oauth2/applications/@me`,","  getApp: (id) => `${API}/oauth2/authorize?client_id=${id}`,","","  // emoji","  emoji: (emojiID) => `${Endpoints.CDN}/emojis/${emojiID}.png`,","};","","exports.Status = {","  READY: 0,","  CONNECTING: 1,","  RECONNECTING: 2,","  IDLE: 3,","  NEARLY: 4,","  DISCONNECTED: 5,","};","","exports.ChannelTypes = {","  text: 0,","  DM: 1,","  voice: 2,","  groupDM: 3,","};","","exports.OPCodes = {","  DISPATCH: 0,","  HEARTBEAT: 1,","  IDENTIFY: 2,","  STATUS_UPDATE: 3,","  VOICE_STATE_UPDATE: 4,","  VOICE_GUILD_PING: 5,","  RESUME: 6,","  RECONNECT: 7,","  REQUEST_GUILD_MEMBERS: 8,","  INVALID_SESSION: 9,","  HELLO: 10,","  HEARTBEAT_ACK: 11,","};","","exports.VoiceOPCodes = {","  IDENTIFY: 0,","  SELECT_PROTOCOL: 1,","  READY: 2,","  HEARTBEAT: 3,","  SESSION_DESCRIPTION: 4,","  SPEAKING: 5,","};","","exports.Events = {","  READY: 'ready',","  GUILD_CREATE: 'guildCreate',","  GUILD_DELETE: 'guildDelete',","  GUILD_UPDATE: 'guildUpdate',","  GUILD_UNAVAILABLE: 'guildUnavailable',","  GUILD_AVAILABLE: 'guildAvailable',","  GUILD_MEMBER_ADD: 'guildMemberAdd',","  GUILD_MEMBER_REMOVE: 'guildMemberRemove',","  GUILD_MEMBER_UPDATE: 'guildMemberUpdate',","  GUILD_MEMBER_AVAILABLE: 'guildMemberAvailable',","  GUILD_MEMBER_SPEAKING: 'guildMemberSpeaking',","  GUILD_MEMBERS_CHUNK: 'guildMembersChunk',","  GUILD_ROLE_CREATE: 'roleCreate',","  GUILD_ROLE_DELETE: 'roleDelete',","  GUILD_ROLE_UPDATE: 'roleUpdate',","  GUILD_EMOJI_CREATE: 'emojiCreate',","  GUILD_EMOJI_DELETE: 'emojiDelete',","  GUILD_EMOJI_UPDATE: 'emojiUpdate',","  GUILD_BAN_ADD: 'guildBanAdd',","  GUILD_BAN_REMOVE: 'guildBanRemove',","  CHANNEL_CREATE: 'channelCreate',","  CHANNEL_DELETE: 'channelDelete',","  CHANNEL_UPDATE: 'channelUpdate',","  CHANNEL_PINS_UPDATE: 'channelPinsUpdate',","  MESSAGE_CREATE: 'message',","  MESSAGE_DELETE: 'messageDelete',","  MESSAGE_UPDATE: 'messageUpdate',","  MESSAGE_BULK_DELETE: 'messageDeleteBulk',","  MESSAGE_REACTION_ADD: 'messageReactionAdd',","  MESSAGE_REACTION_REMOVE: 'messageReactionRemove',","  MESSAGE_REACTION_REMOVE_ALL: 'messageReactionRemoveAll',","  USER_UPDATE: 'userUpdate',","  USER_NOTE_UPDATE: 'userNoteUpdate',","  PRESENCE_UPDATE: 'presenceUpdate',","  VOICE_STATE_UPDATE: 'voiceStateUpdate',","  TYPING_START: 'typingStart',","  TYPING_STOP: 'typingStop',","  DISCONNECT: 'disconnect',","  RECONNECTING: 'reconnecting',","  ERROR: 'error',","  WARN: 'warn',","  DEBUG: 'debug',","};","","/**"," * The type of a websocket message event, e.g. `MESSAGE_CREATE`. Here are the available events:"," * - READY"," * - GUILD_SYNC"," * - GUILD_CREATE"," * - GUILD_DELETE"," * - GUILD_UPDATE"," * - GUILD_MEMBER_ADD"," * - GUILD_MEMBER_REMOVE"," * - GUILD_MEMBER_UPDATE"," * - GUILD_MEMBERS_CHUNK"," * - GUILD_ROLE_CREATE"," * - GUILD_ROLE_DELETE"," * - GUILD_ROLE_UPDATE"," * - GUILD_BAN_ADD"," * - GUILD_BAN_REMOVE"," * - CHANNEL_CREATE"," * - CHANNEL_DELETE"," * - CHANNEL_UPDATE"," * - CHANNEL_PINS_UPDATE"," * - MESSAGE_CREATE"," * - MESSAGE_DELETE"," * - MESSAGE_UPDATE"," * - MESSAGE_DELETE_BULK"," * - MESSAGE_REACTION_ADD"," * - MESSAGE_REACTION_REMOVE"," * - MESSAGE_REACTION_REMOVE_ALL"," * - USER_UPDATE"," * - USER_NOTE_UPDATE"," * - PRESENCE_UPDATE"," * - VOICE_STATE_UPDATE"," * - TYPING_START"," * - VOICE_SERVER_UPDATE"," * - RELATIONSHIP_ADD"," * - RELATIONSHIP_REMOVE"," * @typedef {string} WSEventType"," */","exports.WSEvents = {","  READY: 'READY',","  GUILD_SYNC: 'GUILD_SYNC',","  GUILD_CREATE: 'GUILD_CREATE',","  GUILD_DELETE: 'GUILD_DELETE',","  GUILD_UPDATE: 'GUILD_UPDATE',","  GUILD_MEMBER_ADD: 'GUILD_MEMBER_ADD',","  GUILD_MEMBER_REMOVE: 'GUILD_MEMBER_REMOVE',","  GUILD_MEMBER_UPDATE: 'GUILD_MEMBER_UPDATE',","  GUILD_MEMBERS_CHUNK: 'GUILD_MEMBERS_CHUNK',","  GUILD_ROLE_CREATE: 'GUILD_ROLE_CREATE',","  GUILD_ROLE_DELETE: 'GUILD_ROLE_DELETE',","  GUILD_ROLE_UPDATE: 'GUILD_ROLE_UPDATE',","  GUILD_BAN_ADD: 'GUILD_BAN_ADD',","  GUILD_BAN_REMOVE: 'GUILD_BAN_REMOVE',","  GUILD_EMOJIS_UPDATE: 'GUILD_EMOJIS_UPDATE',","  CHANNEL_CREATE: 'CHANNEL_CREATE',","  CHANNEL_DELETE: 'CHANNEL_DELETE',","  CHANNEL_UPDATE: 'CHANNEL_UPDATE',","  CHANNEL_PINS_UPDATE: 'CHANNEL_PINS_UPDATE',","  MESSAGE_CREATE: 'MESSAGE_CREATE',","  MESSAGE_DELETE: 'MESSAGE_DELETE',","  MESSAGE_UPDATE: 'MESSAGE_UPDATE',","  MESSAGE_DELETE_BULK: 'MESSAGE_DELETE_BULK',","  MESSAGE_REACTION_ADD: 'MESSAGE_REACTION_ADD',","  MESSAGE_REACTION_REMOVE: 'MESSAGE_REACTION_REMOVE',","  MESSAGE_REACTION_REMOVE_ALL: 'MESSAGE_REACTION_REMOVE_ALL',","  USER_UPDATE: 'USER_UPDATE',","  USER_NOTE_UPDATE: 'USER_NOTE_UPDATE',","  PRESENCE_UPDATE: 'PRESENCE_UPDATE',","  VOICE_STATE_UPDATE: 'VOICE_STATE_UPDATE',","  TYPING_START: 'TYPING_START',","  VOICE_SERVER_UPDATE: 'VOICE_SERVER_UPDATE',","  RELATIONSHIP_ADD: 'RELATIONSHIP_ADD',","  RELATIONSHIP_REMOVE: 'RELATIONSHIP_REMOVE',","};","","exports.MessageTypes = {","  0: 'DEFAULT',","  1: 'RECIPIENT_ADD',","  2: 'RECIPIENT_REMOVE',","  3: 'CALL',","  4: 'CHANNEL_NAME_CHANGE',","  5: 'CHANNEL_ICON_CHANGE',","  6: 'PINS_ADD',","};","","exports.DefaultAvatars = {","  BLURPLE: '6debd47ed13483642cf09e832ed0bc1b',","  GREY: '322c936a8c8be1b803cd94861bdfa868',","  GREEN: 'dd4dbc0016779df1378e7812eabaa04d',","  ORANGE: '0e291f67c9274a1abdddeb3fd919cbaa',","  RED: '1cbd08c76f8af6dddce02c5138971129',","};","","const PermissionFlags = exports.PermissionFlags = {","  CREATE_INSTANT_INVITE: 1 << 0,","  KICK_MEMBERS: 1 << 1,","  BAN_MEMBERS: 1 << 2,","  ADMINISTRATOR: 1 << 3,","  MANAGE_CHANNELS: 1 << 4,","  MANAGE_GUILD: 1 << 5,","  ADD_REACTIONS: 1 << 6,","","  READ_MESSAGES: 1 << 10,","  SEND_MESSAGES: 1 << 11,","  SEND_TTS_MESSAGES: 1 << 12,","  MANAGE_MESSAGES: 1 << 13,","  EMBED_LINKS: 1 << 14,","  ATTACH_FILES: 1 << 15,","  READ_MESSAGE_HISTORY: 1 << 16,","  MENTION_EVERYONE: 1 << 17,","  EXTERNAL_EMOJIS: 1 << 18,","","  CONNECT: 1 << 20,","  SPEAK: 1 << 21,","  MUTE_MEMBERS: 1 << 22,","  DEAFEN_MEMBERS: 1 << 23,","  MOVE_MEMBERS: 1 << 24,","  USE_VAD: 1 << 25,","","  CHANGE_NICKNAME: 1 << 26,","  MANAGE_NICKNAMES: 1 << 27,","  MANAGE_ROLES_OR_PERMISSIONS: 1 << 28,","  MANAGE_WEBHOOKS: 1 << 29,","  MANAGE_EMOJIS: 1 << 30,","};","","let _ALL_PERMISSIONS = 0;","for (const key in PermissionFlags) _ALL_PERMISSIONS |= PermissionFlags[key];","exports.ALL_PERMISSIONS = _ALL_PERMISSIONS;","exports.DEFAULT_PERMISSIONS = 104324097;",""],"l":{"1":1,"31":1,"65":1,"78":1,"79":1,"80":1,"81":1,"87":0,"88":0,"89":0,"93":0,"94":0,"95":0,"97":0,"98":0,"101":0,"103":0,"104":0,"105":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"137":0,"140":0,"143":0,"145":0,"148":0,"152":0,"155":0,"158":1,"167":1,"174":1,"189":1,"198":1,"280":1,"317":1,"327":1,"335":1,"368":1,"369":27,"370":1,"371":1}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/rest/RESTManager.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/rest/RESTManager.js","s":{"1":28,"2":28,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0},"b":{"1":[0,0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":9,"loc":{"start":{"line":9,"column":13},"end":{"line":9,"column":22}}},"2":{"name":"(anonymous_2)","line":18,"loc":{"start":{"line":18,"column":6},"end":{"line":18,"column":28}}},"3":{"name":"(anonymous_3)","line":28,"loc":{"start":{"line":28,"column":19},"end":{"line":28,"column":22}}},"4":{"name":"(anonymous_4)","line":39,"loc":{"start":{"line":39,"column":13},"end":{"line":39,"column":45}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":55}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":45}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":73}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":63}},"5":{"start":{"line":5,"column":0},"end":{"line":5,"column":43}},"6":{"start":{"line":6,"column":0},"end":{"line":6,"column":50}},"7":{"start":{"line":10,"column":4},"end":{"line":10,"column":25}},"8":{"start":{"line":11,"column":4},"end":{"line":11,"column":23}},"9":{"start":{"line":12,"column":4},"end":{"line":12,"column":55}},"10":{"start":{"line":13,"column":4},"end":{"line":13,"column":41}},"11":{"start":{"line":14,"column":4},"end":{"line":14,"column":35}},"12":{"start":{"line":15,"column":4},"end":{"line":15,"column":37}},"13":{"start":{"line":19,"column":4},"end":{"line":25,"column":7}},"14":{"start":{"line":20,"column":6},"end":{"line":24,"column":9}},"15":{"start":{"line":29,"column":4},"end":{"line":36,"column":5}},"16":{"start":{"line":31,"column":8},"end":{"line":31,"column":40}},"17":{"start":{"line":33,"column":8},"end":{"line":33,"column":35}},"18":{"start":{"line":35,"column":8},"end":{"line":35,"column":68}},"19":{"start":{"line":40,"column":4},"end":{"line":40,"column":75}},"20":{"start":{"line":42,"column":4},"end":{"line":45,"column":5}},"21":{"start":{"line":43,"column":6},"end":{"line":43,"column":58}},"22":{"start":{"line":44,"column":6},"end":{"line":44,"column":87}},"23":{"start":{"line":47,"column":4},"end":{"line":47,"column":66}},"24":{"start":{"line":51,"column":0},"end":{"line":51,"column":29}}},"branchMap":{"1":{"line":29,"type":"switch","locations":[{"start":{"line":30,"column":6},"end":{"line":31,"column":40}},{"start":{"line":32,"column":6},"end":{"line":33,"column":35}},{"start":{"line":34,"column":6},"end":{"line":35,"column":68}}]},"2":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":4},"end":{"line":42,"column":4}},{"start":{"line":42,"column":4},"end":{"line":42,"column":4}}]}},"code":["const UserAgentManager = require('./UserAgentManager');","const RESTMethods = require('./RESTMethods');","const SequentialRequestHandler = require('./RequestHandlers/Sequential');","const BurstRequestHandler = require('./RequestHandlers/Burst');","const APIRequest = require('./APIRequest');","const Constants = require('../../util/Constants');","","class RESTManager {","  constructor(client) {","    this.client = client;","    this.handlers = {};","    this.userAgentManager = new UserAgentManager(this);","    this.methods = new RESTMethods(this);","    this.rateLimitedEndpoints = {};","    this.globallyRateLimited = false;","  }","","  push(handler, apiRequest) {","    return new Promise((resolve, reject) => {","      handler.push({","        request: apiRequest,","        resolve,","        reject,","      });","    });","  }","","  getRequestHandler() {","    switch (this.client.options.apiRequestMethod) {","      case 'sequential':","        return SequentialRequestHandler;","      case 'burst':","        return BurstRequestHandler;","      default:","        throw new Error(Constants.Errors.INVALID_RATE_LIMIT_METHOD);","    }","  }","","  makeRequest(method, url, auth, data, file) {","    const apiRequest = new APIRequest(this, method, url, auth, data, file);","","    if (!this.handlers[apiRequest.route]) {","      const RequestHandlerType = this.getRequestHandler();","      this.handlers[apiRequest.route] = new RequestHandlerType(this, apiRequest.route);","    }","","    return this.push(this.handlers[apiRequest.route], apiRequest);","  }","}","","module.exports = RESTManager;",""],"l":{"1":28,"2":28,"3":0,"4":0,"5":0,"6":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"19":0,"20":0,"29":0,"31":0,"33":0,"35":0,"40":0,"42":0,"43":0,"44":0,"47":0,"51":0}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/rest/UserAgentManager.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/rest/UserAgentManager.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":4,"loc":{"start":{"line":4,"column":13},"end":{"line":4,"column":27}}},"2":{"name":"(anonymous_2)","line":12,"loc":{"start":{"line":12,"column":5},"end":{"line":12,"column":12}}},"3":{"name":"(anonymous_3)","line":17,"loc":{"start":{"line":17,"column":15},"end":{"line":17,"column":18}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":50}},"2":{"start":{"line":5,"column":4},"end":{"line":5,"column":35}},"3":{"start":{"line":6,"column":4},"end":{"line":9,"column":6}},"4":{"start":{"line":13,"column":4},"end":{"line":13,"column":80}},"5":{"start":{"line":14,"column":4},"end":{"line":14,"column":72}},"6":{"start":{"line":18,"column":4},"end":{"line":18,"column":77}},"7":{"start":{"line":22,"column":0},"end":{"line":22,"column":34}}},"branchMap":{"1":{"line":13,"type":"binary-expr","locations":[{"start":{"line":13,"column":26},"end":{"line":13,"column":34}},{"start":{"line":13,"column":38},"end":{"line":13,"column":79}}]},"2":{"line":14,"type":"binary-expr","locations":[{"start":{"line":14,"column":30},"end":{"line":14,"column":42}},{"start":{"line":14,"column":46},"end":{"line":14,"column":71}}]}},"code":["const Constants = require('../../util/Constants');","","class UserAgentManager {","  constructor(restManager) {","    this.restManager = restManager;","    this._userAgent = {","      url: 'https://github.com/hydrabolt/discord.js',","      version: Constants.Package.version,","    };","  }","","  set(info) {","    this._userAgent.url = info.url || 'https://github.com/hydrabolt/discord.js';","    this._userAgent.version = info.version || Constants.Package.version;","  }","","  get userAgent() {","    return `DiscordBot (${this._userAgent.url}, ${this._userAgent.version})`;","  }","}","","module.exports = UserAgentManager;",""],"l":{"1":1,"5":0,"6":0,"13":0,"14":0,"18":0,"22":1}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/rest/RESTMethods.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/rest/RESTMethods.js","s":{"1":28,"2":28,"3":28,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"328":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0,0],"86":[0,0],"87":[0,0],"88":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":27}}},"2":{"name":"(anonymous_2)","line":22,"loc":{"start":{"line":22,"column":7},"end":{"line":22,"column":35}}},"3":{"name":"(anonymous_3)","line":30,"loc":{"start":{"line":30,"column":8},"end":{"line":30,"column":11}}},"4":{"name":"(anonymous_4)","line":34,"loc":{"start":{"line":34,"column":12},"end":{"line":34,"column":15}}},"5":{"name":"(anonymous_5)","line":41,"loc":{"start":{"line":41,"column":15},"end":{"line":41,"column":18}}},"6":{"name":"(anonymous_6)","line":45,"loc":{"start":{"line":45,"column":13},"end":{"line":45,"column":103}}},"7":{"name":"sendChunk","line":65,"loc":{"start":{"line":65,"column":11},"end":{"line":65,"column":43}}},"8":{"name":"(anonymous_8)","line":88,"loc":{"start":{"line":88,"column":15},"end":{"line":88,"column":56}}},"9":{"name":"(anonymous_9)","line":99,"loc":{"start":{"line":99,"column":15},"end":{"line":99,"column":25}}},"10":{"name":"(anonymous_10)","line":109,"loc":{"start":{"line":109,"column":20},"end":{"line":109,"column":40}}},"11":{"name":"(anonymous_11)","line":120,"loc":{"start":{"line":120,"column":15},"end":{"line":120,"column":61}}},"12":{"name":"(anonymous_12)","line":129,"loc":{"start":{"line":129,"column":10},"end":{"line":129,"column":22}}},"13":{"name":"(anonymous_13)","line":137,"loc":{"start":{"line":137,"column":15},"end":{"line":137,"column":27}}},"14":{"name":"(anonymous_14)","line":143,"loc":{"start":{"line":143,"column":15},"end":{"line":143,"column":25}}},"15":{"name":"(anonymous_15)","line":152,"loc":{"start":{"line":152,"column":15},"end":{"line":152,"column":32}}},"16":{"name":"(anonymous_16)","line":164,"loc":{"start":{"line":164,"column":12},"end":{"line":164,"column":20}}},"17":{"name":"(anonymous_17)","line":171,"loc":{"start":{"line":171,"column":13},"end":{"line":171,"column":23}}},"18":{"name":"(anonymous_18)","line":199,"loc":{"start":{"line":199,"column":13},"end":{"line":199,"column":21}}},"19":{"name":"(anonymous_19)","line":205,"loc":{"start":{"line":205,"column":9},"end":{"line":205,"column":18}}},"20":{"name":"(anonymous_20)","line":211,"loc":{"start":{"line":211,"column":19},"end":{"line":211,"column":37}}},"21":{"name":"(anonymous_21)","line":226,"loc":{"start":{"line":226,"column":13},"end":{"line":226,"column":28}}},"22":{"name":"(anonymous_22)","line":241,"loc":{"start":{"line":241,"column":17},"end":{"line":241,"column":33}}},"23":{"name":"(anonymous_23)","line":250,"loc":{"start":{"line":250,"column":17},"end":{"line":250,"column":25}}},"24":{"name":"(anonymous_24)","line":259,"loc":{"start":{"line":259,"column":17},"end":{"line":259,"column":24}}},"25":{"name":"(anonymous_25)","line":268,"loc":{"start":{"line":268,"column":21},"end":{"line":268,"column":40}}},"26":{"name":"(anonymous_26)","line":274,"loc":{"start":{"line":274,"column":28},"end":{"line":274,"column":40}}},"27":{"name":"(anonymous_27)","line":280,"loc":{"start":{"line":280,"column":20},"end":{"line":280,"column":44}}},"28":{"name":"(anonymous_28)","line":292,"loc":{"start":{"line":292,"column":19},"end":{"line":292,"column":40}}},"29":{"name":"(anonymous_29)","line":298,"loc":{"start":{"line":298,"column":16},"end":{"line":298,"column":30}}},"30":{"name":"(anonymous_30)","line":304,"loc":{"start":{"line":304,"column":19},"end":{"line":304,"column":34}}},"31":{"name":"(anonymous_31)","line":322,"loc":{"start":{"line":322,"column":15},"end":{"line":322,"column":30}}},"32":{"name":"(anonymous_32)","line":330,"loc":{"start":{"line":330,"column":18},"end":{"line":330,"column":33}}},"33":{"name":"(anonymous_33)","line":342,"loc":{"start":{"line":342,"column":12},"end":{"line":342,"column":24}}},"34":{"name":"(anonymous_34)","line":346,"loc":{"start":{"line":346,"column":16},"end":{"line":346,"column":48}}},"35":{"name":"(anonymous_35)","line":364,"loc":{"start":{"line":364,"column":18},"end":{"line":364,"column":34}}},"36":{"name":"(anonymous_36)","line":391,"loc":{"start":{"line":391,"column":14},"end":{"line":391,"column":22}}},"37":{"name":"(anonymous_37)","line":402,"loc":{"start":{"line":402,"column":17},"end":{"line":402,"column":31}}},"38":{"name":"(anonymous_38)","line":434,"loc":{"start":{"line":434,"column":12},"end":{"line":434,"column":22}}},"39":{"name":"(anonymous_39)","line":439,"loc":{"start":{"line":439,"column":14},"end":{"line":439,"column":24}}},"40":{"name":"(anonymous_40)","line":444,"loc":{"start":{"line":444,"column":26},"end":{"line":444,"column":36}}},"41":{"name":"(anonymous_41)","line":448,"loc":{"start":{"line":448,"column":21},"end":{"line":448,"column":40}}},"42":{"name":"(anonymous_42)","line":457,"loc":{"start":{"line":457,"column":14},"end":{"line":457,"column":23}}},"43":{"name":"(anonymous_43)","line":461,"loc":{"start":{"line":461,"column":11},"end":{"line":461,"column":18}}},"44":{"name":"(anonymous_44)","line":467,"loc":{"start":{"line":467,"column":17},"end":{"line":467,"column":25}}},"45":{"name":"(anonymous_45)","line":478,"loc":{"start":{"line":478,"column":19},"end":{"line":478,"column":38}}},"46":{"name":"(anonymous_46)","line":483,"loc":{"start":{"line":483,"column":13},"end":{"line":483,"column":34}}},"47":{"name":"(anonymous_47)","line":488,"loc":{"start":{"line":488,"column":13},"end":{"line":488,"column":21}}},"48":{"name":"(anonymous_48)","line":493,"loc":{"start":{"line":493,"column":12},"end":{"line":493,"column":24}}},"49":{"name":"(anonymous_49)","line":499,"loc":{"start":{"line":499,"column":18},"end":{"line":499,"column":26}}},"50":{"name":"(anonymous_50)","line":507,"loc":{"start":{"line":507,"column":20},"end":{"line":507,"column":30}}},"51":{"name":"(anonymous_51)","line":515,"loc":{"start":{"line":515,"column":15},"end":{"line":515,"column":39}}},"52":{"name":"(anonymous_52)","line":520,"loc":{"start":{"line":520,"column":13},"end":{"line":520,"column":37}}},"53":{"name":"(anonymous_53)","line":531,"loc":{"start":{"line":531,"column":15},"end":{"line":531,"column":25}}},"54":{"name":"(anonymous_54)","line":535,"loc":{"start":{"line":535,"column":20},"end":{"line":535,"column":102}}},"55":{"name":"(anonymous_55)","line":552,"loc":{"start":{"line":552,"column":25},"end":{"line":552,"column":41}}},"56":{"name":"(anonymous_56)","line":558,"loc":{"start":{"line":558,"column":18},"end":{"line":558,"column":25}}},"57":{"name":"(anonymous_57)","line":564,"loc":{"start":{"line":564,"column":17},"end":{"line":564,"column":27}}},"58":{"name":"(anonymous_58)","line":572,"loc":{"start":{"line":572,"column":11},"end":{"line":572,"column":18}}},"59":{"name":"(anonymous_59)","line":579,"loc":{"start":{"line":579,"column":14},"end":{"line":579,"column":21}}},"60":{"name":"(anonymous_60)","line":584,"loc":{"start":{"line":584,"column":11},"end":{"line":584,"column":18}}},"61":{"name":"(anonymous_61)","line":589,"loc":{"start":{"line":589,"column":13},"end":{"line":589,"column":20}}},"62":{"name":"(anonymous_62)","line":594,"loc":{"start":{"line":594,"column":18},"end":{"line":594,"column":35}}},"63":{"name":"(anonymous_63)","line":603,"loc":{"start":{"line":603,"column":20},"end":{"line":603,"column":37}}},"64":{"name":"(anonymous_64)","line":616,"loc":{"start":{"line":616,"column":23},"end":{"line":616,"column":46}}},"65":{"name":"(anonymous_65)","line":631,"loc":{"start":{"line":631,"column":24},"end":{"line":631,"column":34}}},"66":{"name":"(anonymous_66)","line":636,"loc":{"start":{"line":636,"column":25},"end":{"line":636,"column":55}}},"67":{"name":"(anonymous_67)","line":642,"loc":{"start":{"line":642,"column":18},"end":{"line":642,"column":21}}},"68":{"name":"(anonymous_68)","line":648,"loc":{"start":{"line":648,"column":9},"end":{"line":648,"column":22}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":50}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":52}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":52}},"5":{"start":{"line":5,"column":0},"end":{"line":5,"column":60}},"6":{"start":{"line":7,"column":0},"end":{"line":7,"column":46}},"7":{"start":{"line":8,"column":0},"end":{"line":8,"column":60}},"8":{"start":{"line":9,"column":0},"end":{"line":9,"column":52}},"9":{"start":{"line":10,"column":0},"end":{"line":10,"column":46}},"10":{"start":{"line":11,"column":0},"end":{"line":11,"column":50}},"11":{"start":{"line":12,"column":0},"end":{"line":12,"column":52}},"12":{"start":{"line":13,"column":0},"end":{"line":13,"column":60}},"13":{"start":{"line":14,"column":0},"end":{"line":14,"column":84}},"14":{"start":{"line":18,"column":4},"end":{"line":18,"column":28}},"15":{"start":{"line":19,"column":4},"end":{"line":19,"column":37}},"16":{"start":{"line":23,"column":4},"end":{"line":27,"column":7}},"17":{"start":{"line":24,"column":6},"end":{"line":24,"column":85}},"18":{"start":{"line":24,"column":37},"end":{"line":24,"column":85}},"19":{"start":{"line":25,"column":6},"end":{"line":25,"column":44}},"20":{"start":{"line":26,"column":6},"end":{"line":26,"column":69}},"21":{"start":{"line":31,"column":4},"end":{"line":31,"column":79}},"22":{"start":{"line":35,"column":4},"end":{"line":38,"column":7}},"23":{"start":{"line":36,"column":6},"end":{"line":36,"column":77}},"24":{"start":{"line":37,"column":6},"end":{"line":37,"column":36}},"25":{"start":{"line":42,"column":4},"end":{"line":42,"column":78}},"26":{"start":{"line":46,"column":4},"end":{"line":85,"column":7}},"27":{"start":{"line":47,"column":6},"end":{"line":47,"column":96}},"28":{"start":{"line":47,"column":42},"end":{"line":47,"column":96}},"29":{"start":{"line":49,"column":6},"end":{"line":60,"column":7}},"30":{"start":{"line":50,"column":8},"end":{"line":53,"column":9}},"31":{"start":{"line":51,"column":10},"end":{"line":51,"column":86}},"32":{"start":{"line":52,"column":10},"end":{"line":52,"column":95}},"33":{"start":{"line":55,"column":8},"end":{"line":57,"column":9}},"34":{"start":{"line":56,"column":10},"end":{"line":56,"column":70}},"35":{"start":{"line":59,"column":8},"end":{"line":59,"column":91}},"36":{"start":{"line":59,"column":19},"end":{"line":59,"column":91}},"37":{"start":{"line":62,"column":6},"end":{"line":78,"column":8}},"38":{"start":{"line":63,"column":8},"end":{"line":77,"column":9}},"39":{"start":{"line":64,"column":10},"end":{"line":64,"column":30}},"40":{"start":{"line":65,"column":10},"end":{"line":72,"column":25}},"41":{"start":{"line":66,"column":12},"end":{"line":66,"column":77}},"42":{"start":{"line":67,"column":12},"end":{"line":71,"column":15}},"43":{"start":{"line":68,"column":14},"end":{"line":68,"column":37}},"44":{"start":{"line":69,"column":14},"end":{"line":69,"column":65}},"45":{"start":{"line":69,"column":40},"end":{"line":69,"column":65}},"46":{"start":{"line":70,"column":14},"end":{"line":70,"column":46}},"47":{"start":{"line":74,"column":10},"end":{"line":76,"column":105}},"48":{"start":{"line":76,"column":32},"end":{"line":76,"column":95}},"49":{"start":{"line":80,"column":6},"end":{"line":84,"column":7}},"50":{"start":{"line":81,"column":8},"end":{"line":81,"column":50}},"51":{"start":{"line":83,"column":8},"end":{"line":83,"column":22}},"52":{"start":{"line":89,"column":4},"end":{"line":89,"column":58}},"53":{"start":{"line":90,"column":4},"end":{"line":93,"column":5}},"54":{"start":{"line":91,"column":6},"end":{"line":91,"column":82}},"55":{"start":{"line":92,"column":6},"end":{"line":92,"column":91}},"56":{"start":{"line":94,"column":4},"end":{"line":96,"column":76}},"57":{"start":{"line":96,"column":20},"end":{"line":96,"column":74}},"58":{"start":{"line":100,"column":4},"end":{"line":106,"column":8}},"59":{"start":{"line":102,"column":8},"end":{"line":105,"column":18}},"60":{"start":{"line":110,"column":4},"end":{"line":117,"column":6}},"61":{"start":{"line":113,"column":6},"end":{"line":116,"column":17}},"62":{"start":{"line":121,"column":4},"end":{"line":121,"column":74}},"63":{"start":{"line":121,"column":42},"end":{"line":121,"column":74}},"64":{"start":{"line":122,"column":4},"end":{"line":126,"column":76}},"65":{"start":{"line":126,"column":20},"end":{"line":126,"column":74}},"66":{"start":{"line":130,"column":4},"end":{"line":130,"column":52}},"67":{"start":{"line":131,"column":4},"end":{"line":131,"column":53}},"68":{"start":{"line":131,"column":19},"end":{"line":131,"column":53}},"69":{"start":{"line":132,"column":4},"end":{"line":134,"column":76}},"70":{"start":{"line":134,"column":20},"end":{"line":134,"column":74}},"71":{"start":{"line":138,"column":4},"end":{"line":140,"column":6}},"72":{"start":{"line":139,"column":6},"end":{"line":139,"column":64}},"73":{"start":{"line":144,"column":4},"end":{"line":144,"column":105}},"74":{"start":{"line":144,"column":67},"end":{"line":144,"column":105}},"75":{"start":{"line":145,"column":4},"end":{"line":145,"column":76}},"76":{"start":{"line":145,"column":18},"end":{"line":145,"column":76}},"77":{"start":{"line":146,"column":4},"end":{"line":149,"column":7}},"78":{"start":{"line":147,"column":6},"end":{"line":147,"column":27}},"79":{"start":{"line":148,"column":6},"end":{"line":148,"column":68}},"80":{"start":{"line":153,"column":4},"end":{"line":153,"column":20}},"81":{"start":{"line":154,"column":4},"end":{"line":154,"column":52}},"82":{"start":{"line":155,"column":4},"end":{"line":155,"column":46}},"83":{"start":{"line":156,"column":4},"end":{"line":156,"column":55}},"84":{"start":{"line":157,"column":4},"end":{"line":157,"column":52}},"85":{"start":{"line":158,"column":4},"end":{"line":158,"column":59}},"86":{"start":{"line":159,"column":4},"end":{"line":161,"column":6}},"87":{"start":{"line":160,"column":6},"end":{"line":160,"column":63}},"88":{"start":{"line":165,"column":4},"end":{"line":165,"column":113}},"89":{"start":{"line":165,"column":47},"end":{"line":165,"column":113}},"90":{"start":{"line":166,"column":4},"end":{"line":168,"column":6}},"91":{"start":{"line":167,"column":6},"end":{"line":167,"column":68}},"92":{"start":{"line":172,"column":4},"end":{"line":172,"column":76}},"93":{"start":{"line":173,"column":4},"end":{"line":173,"column":52}},"94":{"start":{"line":174,"column":4},"end":{"line":195,"column":7}},"95":{"start":{"line":175,"column":6},"end":{"line":194,"column":17}},"96":{"start":{"line":176,"column":8},"end":{"line":179,"column":9}},"97":{"start":{"line":177,"column":10},"end":{"line":177,"column":51}},"98":{"start":{"line":178,"column":10},"end":{"line":178,"column":17}},"99":{"start":{"line":181,"column":8},"end":{"line":187,"column":10}},"100":{"start":{"line":182,"column":10},"end":{"line":186,"column":11}},"101":{"start":{"line":183,"column":12},"end":{"line":183,"column":67}},"102":{"start":{"line":184,"column":12},"end":{"line":184,"column":46}},"103":{"start":{"line":185,"column":12},"end":{"line":185,"column":27}},"104":{"start":{"line":188,"column":8},"end":{"line":188,"column":51}},"105":{"start":{"line":190,"column":8},"end":{"line":193,"column":18}},"106":{"start":{"line":191,"column":10},"end":{"line":191,"column":65}},"107":{"start":{"line":192,"column":10},"end":{"line":192,"column":68}},"108":{"start":{"line":200,"column":4},"end":{"line":202,"column":6}},"109":{"start":{"line":201,"column":6},"end":{"line":201,"column":68}},"110":{"start":{"line":206,"column":4},"end":{"line":208,"column":6}},"111":{"start":{"line":207,"column":6},"end":{"line":207,"column":51}},"112":{"start":{"line":212,"column":4},"end":{"line":212,"column":34}},"113":{"start":{"line":213,"column":4},"end":{"line":213,"column":20}},"114":{"start":{"line":214,"column":4},"end":{"line":214,"column":52}},"115":{"start":{"line":215,"column":4},"end":{"line":215,"column":82}},"116":{"start":{"line":216,"column":4},"end":{"line":220,"column":5}},"117":{"start":{"line":217,"column":6},"end":{"line":217,"column":45}},"118":{"start":{"line":218,"column":6},"end":{"line":218,"column":31}},"119":{"start":{"line":219,"column":6},"end":{"line":219,"column":68}},"120":{"start":{"line":219,"column":30},"end":{"line":219,"column":68}},"121":{"start":{"line":221,"column":4},"end":{"line":223,"column":6}},"122":{"start":{"line":222,"column":6},"end":{"line":222,"column":60}},"123":{"start":{"line":227,"column":4},"end":{"line":227,"column":20}},"124":{"start":{"line":228,"column":4},"end":{"line":228,"column":43}},"125":{"start":{"line":228,"column":20},"end":{"line":228,"column":43}},"126":{"start":{"line":229,"column":4},"end":{"line":229,"column":49}},"127":{"start":{"line":229,"column":22},"end":{"line":229,"column":49}},"128":{"start":{"line":230,"column":4},"end":{"line":230,"column":91}},"129":{"start":{"line":230,"column":33},"end":{"line":230,"column":91}},"130":{"start":{"line":231,"column":4},"end":{"line":231,"column":105}},"131":{"start":{"line":231,"column":26},"end":{"line":231,"column":105}},"132":{"start":{"line":232,"column":4},"end":{"line":232,"column":70}},"133":{"start":{"line":232,"column":26},"end":{"line":232,"column":70}},"134":{"start":{"line":233,"column":4},"end":{"line":233,"column":79}},"135":{"start":{"line":233,"column":20},"end":{"line":233,"column":79}},"136":{"start":{"line":234,"column":4},"end":{"line":234,"column":86}},"137":{"start":{"line":234,"column":21},"end":{"line":234,"column":86}},"138":{"start":{"line":235,"column":4},"end":{"line":235,"column":85}},"139":{"start":{"line":235,"column":22},"end":{"line":235,"column":85}},"140":{"start":{"line":236,"column":4},"end":{"line":238,"column":6}},"141":{"start":{"line":237,"column":6},"end":{"line":237,"column":61}},"142":{"start":{"line":242,"column":4},"end":{"line":247,"column":6}},"143":{"start":{"line":243,"column":6},"end":{"line":246,"column":15}},"144":{"start":{"line":251,"column":4},"end":{"line":256,"column":6}},"145":{"start":{"line":252,"column":6},"end":{"line":255,"column":13}},"146":{"start":{"line":260,"column":4},"end":{"line":265,"column":6}},"147":{"start":{"line":261,"column":6},"end":{"line":264,"column":13}},"148":{"start":{"line":269,"column":4},"end":{"line":271,"column":6}},"149":{"start":{"line":275,"column":4},"end":{"line":277,"column":28}},"150":{"start":{"line":277,"column":17},"end":{"line":277,"column":26}},"151":{"start":{"line":281,"column":4},"end":{"line":281,"column":22}},"152":{"start":{"line":282,"column":4},"end":{"line":282,"column":61}},"153":{"start":{"line":282,"column":23},"end":{"line":282,"column":61}},"154":{"start":{"line":283,"column":4},"end":{"line":285,"column":66}},"155":{"start":{"line":283,"column":24},"end":{"line":283,"column":64}},"156":{"start":{"line":284,"column":9},"end":{"line":285,"column":66}},"157":{"start":{"line":284,"column":29},"end":{"line":284,"column":69}},"158":{"start":{"line":285,"column":9},"end":{"line":285,"column":66}},"159":{"start":{"line":285,"column":28},"end":{"line":285,"column":66}},"160":{"start":{"line":287,"column":4},"end":{"line":287,"column":67}},"161":{"start":{"line":288,"column":4},"end":{"line":288,"column":62}},"162":{"start":{"line":288,"column":27},"end":{"line":288,"column":62}},"163":{"start":{"line":289,"column":4},"end":{"line":289,"column":56}},"164":{"start":{"line":293,"column":4},"end":{"line":293,"column":48}},"165":{"start":{"line":294,"column":4},"end":{"line":294,"column":41}},"166":{"start":{"line":294,"column":13},"end":{"line":294,"column":41}},"167":{"start":{"line":295,"column":4},"end":{"line":295,"column":105}},"168":{"start":{"line":299,"column":4},"end":{"line":301,"column":6}},"169":{"start":{"line":300,"column":6},"end":{"line":300,"column":67}},"170":{"start":{"line":305,"column":4},"end":{"line":305,"column":93}},"171":{"start":{"line":305,"column":22},"end":{"line":305,"column":93}},"172":{"start":{"line":306,"column":4},"end":{"line":306,"column":95}},"173":{"start":{"line":306,"column":20},"end":{"line":306,"column":95}},"174":{"start":{"line":306,"column":56},"end":{"line":306,"column":93}},"175":{"start":{"line":308,"column":4},"end":{"line":308,"column":79}},"176":{"start":{"line":310,"column":4},"end":{"line":315,"column":5}},"177":{"start":{"line":311,"column":6},"end":{"line":311,"column":37}},"178":{"start":{"line":312,"column":6},"end":{"line":314,"column":7}},"179":{"start":{"line":313,"column":8},"end":{"line":313,"column":76}},"180":{"start":{"line":317,"column":4},"end":{"line":319,"column":6}},"181":{"start":{"line":318,"column":6},"end":{"line":318,"column":53}},"182":{"start":{"line":323,"column":4},"end":{"line":327,"column":9}},"183":{"start":{"line":325,"column":8},"end":{"line":325,"column":74}},"184":{"start":{"line":325,"column":46},"end":{"line":325,"column":74}},"185":{"start":{"line":326,"column":8},"end":{"line":326,"column":22}},"186":{"start":{"line":331,"column":4},"end":{"line":339,"column":7}},"187":{"start":{"line":336,"column":6},"end":{"line":336,"column":51}},"188":{"start":{"line":337,"column":6},"end":{"line":337,"column":53}},"189":{"start":{"line":337,"column":22},"end":{"line":337,"column":53}},"190":{"start":{"line":338,"column":6},"end":{"line":338,"column":20}},"191":{"start":{"line":343,"column":4},"end":{"line":343,"column":99}},"192":{"start":{"line":347,"column":4},"end":{"line":347,"column":58}},"193":{"start":{"line":348,"column":4},"end":{"line":348,"column":87}},"194":{"start":{"line":348,"column":13},"end":{"line":348,"column":87}},"195":{"start":{"line":349,"column":4},"end":{"line":361,"column":7}},"196":{"start":{"line":354,"column":6},"end":{"line":354,"column":55}},"197":{"start":{"line":354,"column":41},"end":{"line":354,"column":55}},"198":{"start":{"line":355,"column":6},"end":{"line":355,"column":56}},"199":{"start":{"line":356,"column":6},"end":{"line":359,"column":7}},"200":{"start":{"line":357,"column":8},"end":{"line":357,"column":70}},"201":{"start":{"line":358,"column":8},"end":{"line":358,"column":30}},"202":{"start":{"line":360,"column":6},"end":{"line":360,"column":16}},"203":{"start":{"line":365,"column":4},"end":{"line":388,"column":7}},"204":{"start":{"line":366,"column":6},"end":{"line":366,"column":60}},"205":{"start":{"line":367,"column":6},"end":{"line":367,"column":74}},"206":{"start":{"line":367,"column":15},"end":{"line":367,"column":74}},"207":{"start":{"line":369,"column":6},"end":{"line":375,"column":8}},"208":{"start":{"line":370,"column":8},"end":{"line":374,"column":9}},"209":{"start":{"line":371,"column":10},"end":{"line":371,"column":82}},"210":{"start":{"line":372,"column":10},"end":{"line":372,"column":44}},"211":{"start":{"line":373,"column":10},"end":{"line":373,"column":25}},"212":{"start":{"line":376,"column":6},"end":{"line":376,"column":66}},"213":{"start":{"line":378,"column":6},"end":{"line":381,"column":16}},"214":{"start":{"line":379,"column":8},"end":{"line":379,"column":80}},"215":{"start":{"line":380,"column":8},"end":{"line":380,"column":76}},"216":{"start":{"line":383,"column":6},"end":{"line":387,"column":9}},"217":{"start":{"line":384,"column":8},"end":{"line":384,"column":80}},"218":{"start":{"line":385,"column":8},"end":{"line":385,"column":42}},"219":{"start":{"line":386,"column":8},"end":{"line":386,"column":20}},"220":{"start":{"line":392,"column":4},"end":{"line":399,"column":7}},"221":{"start":{"line":393,"column":6},"end":{"line":393,"column":43}},"222":{"start":{"line":394,"column":6},"end":{"line":397,"column":7}},"223":{"start":{"line":395,"column":8},"end":{"line":395,"column":67}},"224":{"start":{"line":396,"column":8},"end":{"line":396,"column":39}},"225":{"start":{"line":398,"column":6},"end":{"line":398,"column":25}},"226":{"start":{"line":403,"column":4},"end":{"line":403,"column":20}},"227":{"start":{"line":404,"column":4},"end":{"line":404,"column":40}},"228":{"start":{"line":405,"column":4},"end":{"line":405,"column":91}},"229":{"start":{"line":406,"column":4},"end":{"line":406,"column":43}},"230":{"start":{"line":407,"column":4},"end":{"line":409,"column":5}},"231":{"start":{"line":408,"column":6},"end":{"line":408,"column":61}},"232":{"start":{"line":410,"column":4},"end":{"line":410,"column":79}},"233":{"start":{"line":411,"column":4},"end":{"line":411,"column":103}},"234":{"start":{"line":413,"column":4},"end":{"line":422,"column":5}},"235":{"start":{"line":414,"column":6},"end":{"line":414,"column":20}},"236":{"start":{"line":415,"column":6},"end":{"line":418,"column":7}},"237":{"start":{"line":416,"column":8},"end":{"line":416,"column":77}},"238":{"start":{"line":416,"column":38},"end":{"line":416,"column":77}},"239":{"start":{"line":417,"column":8},"end":{"line":417,"column":22}},"240":{"start":{"line":419,"column":6},"end":{"line":419,"column":31}},"241":{"start":{"line":421,"column":6},"end":{"line":421,"column":42}},"242":{"start":{"line":424,"column":4},"end":{"line":431,"column":6}},"243":{"start":{"line":427,"column":6},"end":{"line":430,"column":16}},"244":{"start":{"line":435,"column":4},"end":{"line":436,"column":27}},"245":{"start":{"line":436,"column":18},"end":{"line":436,"column":25}},"246":{"start":{"line":440,"column":4},"end":{"line":441,"column":27}},"247":{"start":{"line":441,"column":18},"end":{"line":441,"column":25}},"248":{"start":{"line":445,"column":4},"end":{"line":445,"column":97}},"249":{"start":{"line":449,"column":4},"end":{"line":449,"column":23}},"250":{"start":{"line":450,"column":4},"end":{"line":450,"column":42}},"251":{"start":{"line":451,"column":4},"end":{"line":451,"column":37}},"252":{"start":{"line":452,"column":4},"end":{"line":452,"column":39}},"253":{"start":{"line":453,"column":4},"end":{"line":454,"column":55}},"254":{"start":{"line":454,"column":22},"end":{"line":454,"column":53}},"255":{"start":{"line":458,"column":4},"end":{"line":458,"column":106}},"256":{"start":{"line":458,"column":98},"end":{"line":458,"column":104}},"257":{"start":{"line":462,"column":4},"end":{"line":464,"column":6}},"258":{"start":{"line":463,"column":6},"end":{"line":463,"column":37}},"259":{"start":{"line":468,"column":4},"end":{"line":475,"column":7}},"260":{"start":{"line":469,"column":6},"end":{"line":469,"column":39}},"261":{"start":{"line":470,"column":6},"end":{"line":473,"column":7}},"262":{"start":{"line":471,"column":8},"end":{"line":471,"column":59}},"263":{"start":{"line":472,"column":8},"end":{"line":472,"column":41}},"264":{"start":{"line":474,"column":6},"end":{"line":474,"column":21}},"265":{"start":{"line":479,"column":4},"end":{"line":480,"column":33}},"266":{"start":{"line":480,"column":20},"end":{"line":480,"column":31}},"267":{"start":{"line":484,"column":4},"end":{"line":485,"column":79}},"268":{"start":{"line":485,"column":20},"end":{"line":485,"column":77}},"269":{"start":{"line":489,"column":4},"end":{"line":490,"column":70}},"270":{"start":{"line":490,"column":18},"end":{"line":490,"column":68}},"271":{"start":{"line":494,"column":4},"end":{"line":496,"column":6}},"272":{"start":{"line":495,"column":6},"end":{"line":495,"column":36}},"273":{"start":{"line":500,"column":4},"end":{"line":504,"column":7}},"274":{"start":{"line":501,"column":6},"end":{"line":501,"column":37}},"275":{"start":{"line":502,"column":6},"end":{"line":502,"column":82}},"276":{"start":{"line":502,"column":31},"end":{"line":502,"column":82}},"277":{"start":{"line":503,"column":6},"end":{"line":503,"column":19}},"278":{"start":{"line":508,"column":4},"end":{"line":512,"column":7}},"279":{"start":{"line":509,"column":6},"end":{"line":509,"column":37}},"280":{"start":{"line":510,"column":6},"end":{"line":510,"column":82}},"281":{"start":{"line":510,"column":31},"end":{"line":510,"column":82}},"282":{"start":{"line":511,"column":6},"end":{"line":511,"column":19}},"283":{"start":{"line":516,"column":4},"end":{"line":517,"column":52}},"284":{"start":{"line":517,"column":20},"end":{"line":517,"column":50}},"285":{"start":{"line":521,"column":4},"end":{"line":528,"column":7}},"286":{"start":{"line":525,"column":6},"end":{"line":525,"column":31}},"287":{"start":{"line":526,"column":6},"end":{"line":526,"column":35}},"288":{"start":{"line":527,"column":6},"end":{"line":527,"column":21}},"289":{"start":{"line":532,"column":4},"end":{"line":532,"column":106}},"290":{"start":{"line":536,"column":4},"end":{"line":536,"column":94}},"291":{"start":{"line":536,"column":40},"end":{"line":536,"column":94}},"292":{"start":{"line":537,"column":4},"end":{"line":541,"column":5}},"293":{"start":{"line":538,"column":6},"end":{"line":540,"column":7}},"294":{"start":{"line":539,"column":8},"end":{"line":539,"column":68}},"295":{"start":{"line":542,"column":4},"end":{"line":549,"column":7}},"296":{"start":{"line":553,"column":4},"end":{"line":555,"column":6}},"297":{"start":{"line":559,"column":4},"end":{"line":561,"column":6}},"298":{"start":{"line":560,"column":6},"end":{"line":560,"column":33}},"299":{"start":{"line":565,"column":4},"end":{"line":565,"column":91}},"300":{"start":{"line":565,"column":23},"end":{"line":565,"column":91}},"301":{"start":{"line":566,"column":4},"end":{"line":569,"column":106}},"302":{"start":{"line":569,"column":18},"end":{"line":569,"column":104}},"303":{"start":{"line":569,"column":36},"end":{"line":569,"column":103}},"304":{"start":{"line":573,"column":4},"end":{"line":576,"column":24}},"305":{"start":{"line":576,"column":18},"end":{"line":576,"column":22}},"306":{"start":{"line":580,"column":4},"end":{"line":581,"column":24}},"307":{"start":{"line":581,"column":18},"end":{"line":581,"column":22}},"308":{"start":{"line":585,"column":4},"end":{"line":586,"column":24}},"309":{"start":{"line":586,"column":18},"end":{"line":586,"column":22}},"310":{"start":{"line":590,"column":4},"end":{"line":591,"column":24}},"311":{"start":{"line":591,"column":18},"end":{"line":591,"column":22}},"312":{"start":{"line":595,"column":4},"end":{"line":600,"column":6}},"313":{"start":{"line":596,"column":6},"end":{"line":599,"column":14}},"314":{"start":{"line":604,"column":4},"end":{"line":613,"column":6}},"315":{"start":{"line":607,"column":6},"end":{"line":612,"column":17}},"316":{"start":{"line":617,"column":4},"end":{"line":617,"column":98}},"317":{"start":{"line":618,"column":4},"end":{"line":620,"column":5}},"318":{"start":{"line":619,"column":6},"end":{"line":619,"column":111}},"319":{"start":{"line":621,"column":4},"end":{"line":628,"column":6}},"320":{"start":{"line":622,"column":6},"end":{"line":627,"column":17}},"321":{"start":{"line":632,"column":4},"end":{"line":633,"column":27}},"322":{"start":{"line":633,"column":18},"end":{"line":633,"column":25}},"323":{"start":{"line":637,"column":4},"end":{"line":639,"column":6}},"324":{"start":{"line":643,"column":4},"end":{"line":645,"column":6}},"325":{"start":{"line":644,"column":6},"end":{"line":644,"column":51}},"326":{"start":{"line":649,"column":4},"end":{"line":649,"column":108}},"327":{"start":{"line":649,"column":102},"end":{"line":649,"column":106}},"328":{"start":{"line":653,"column":0},"end":{"line":653,"column":29}}},"branchMap":{"1":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":6},"end":{"line":24,"column":6}},{"start":{"line":24,"column":6},"end":{"line":24,"column":6}}]},"2":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":6},"end":{"line":47,"column":6}},{"start":{"line":47,"column":6},"end":{"line":47,"column":6}}]},"3":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":6},"end":{"line":49,"column":6}},{"start":{"line":49,"column":6},"end":{"line":49,"column":6}}]},"4":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":8},"end":{"line":50,"column":8}},{"start":{"line":50,"column":8},"end":{"line":50,"column":8}}]},"5":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":12},"end":{"line":50,"column":39}},{"start":{"line":50,"column":44},"end":{"line":50,"column":69}},{"start":{"line":50,"column":73},"end":{"line":50,"column":86}}]},"6":{"line":52,"type":"cond-expr","locations":[{"start":{"line":52,"column":57},"end":{"line":52,"column":67}},{"start":{"line":52,"column":70},"end":{"line":52,"column":72}}]},"7":{"line":52,"type":"binary-expr","locations":[{"start":{"line":52,"column":57},"end":{"line":52,"column":61}},{"start":{"line":52,"column":65},"end":{"line":52,"column":67}}]},"8":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":8},"end":{"line":55,"column":8}},{"start":{"line":55,"column":8},"end":{"line":55,"column":8}}]},"9":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":12},"end":{"line":55,"column":27}},{"start":{"line":55,"column":32},"end":{"line":55,"column":70}},{"start":{"line":55,"column":74},"end":{"line":55,"column":109}}]},"10":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":8},"end":{"line":59,"column":8}},{"start":{"line":59,"column":8},"end":{"line":59,"column":8}}]},"11":{"line":59,"type":"cond-expr","locations":[{"start":{"line":59,"column":79},"end":{"line":59,"column":84}},{"start":{"line":59,"column":87},"end":{"line":59,"column":89}}]},"12":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":8},"end":{"line":63,"column":8}},{"start":{"line":63,"column":8},"end":{"line":63,"column":8}}]},"13":{"line":66,"type":"cond-expr","locations":[{"start":{"line":66,"column":52},"end":{"line":66,"column":66}},{"start":{"line":66,"column":69},"end":{"line":66,"column":76}}]},"14":{"line":67,"type":"cond-expr","locations":[{"start":{"line":67,"column":68},"end":{"line":67,"column":72}},{"start":{"line":67,"column":75},"end":{"line":67,"column":79}}]},"15":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":14},"end":{"line":69,"column":14}},{"start":{"line":69,"column":14},"end":{"line":69,"column":14}}]},"16":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":6},"end":{"line":80,"column":6}},{"start":{"line":80,"column":6},"end":{"line":80,"column":6}}]},"17":{"line":80,"type":"binary-expr","locations":[{"start":{"line":80,"column":10},"end":{"line":80,"column":33}},{"start":{"line":80,"column":37},"end":{"line":80,"column":67}}]},"18":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":4},"end":{"line":90,"column":4}},{"start":{"line":90,"column":4},"end":{"line":90,"column":4}}]},"19":{"line":90,"type":"binary-expr","locations":[{"start":{"line":90,"column":8},"end":{"line":90,"column":35}},{"start":{"line":90,"column":40},"end":{"line":90,"column":65}},{"start":{"line":90,"column":69},"end":{"line":90,"column":82}}]},"20":{"line":92,"type":"cond-expr","locations":[{"start":{"line":92,"column":53},"end":{"line":92,"column":63}},{"start":{"line":92,"column":66},"end":{"line":92,"column":68}}]},"21":{"line":92,"type":"binary-expr","locations":[{"start":{"line":92,"column":53},"end":{"line":92,"column":57}},{"start":{"line":92,"column":61},"end":{"line":92,"column":63}}]},"22":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":4},"end":{"line":121,"column":4}},{"start":{"line":121,"column":4},"end":{"line":121,"column":4}}]},"23":{"line":131,"type":"if","locations":[{"start":{"line":131,"column":4},"end":{"line":131,"column":4}},{"start":{"line":131,"column":4},"end":{"line":131,"column":4}}]},"24":{"line":139,"type":"binary-expr","locations":[{"start":{"line":139,"column":6},"end":{"line":139,"column":23}},{"start":{"line":139,"column":27},"end":{"line":139,"column":64}}]},"25":{"line":144,"type":"if","locations":[{"start":{"line":144,"column":4},"end":{"line":144,"column":4}},{"start":{"line":144,"column":4},"end":{"line":144,"column":4}}]},"26":{"line":144,"type":"binary-expr","locations":[{"start":{"line":144,"column":8},"end":{"line":144,"column":31}},{"start":{"line":144,"column":35},"end":{"line":144,"column":65}}]},"27":{"line":145,"type":"if","locations":[{"start":{"line":145,"column":4},"end":{"line":145,"column":4}},{"start":{"line":145,"column":4},"end":{"line":145,"column":4}}]},"28":{"line":154,"type":"binary-expr","locations":[{"start":{"line":154,"column":17},"end":{"line":154,"column":27}},{"start":{"line":154,"column":31},"end":{"line":154,"column":43}}]},"29":{"line":155,"type":"binary-expr","locations":[{"start":{"line":155,"column":17},"end":{"line":155,"column":28}},{"start":{"line":155,"column":32},"end":{"line":155,"column":45}}]},"30":{"line":156,"type":"binary-expr","locations":[{"start":{"line":156,"column":20},"end":{"line":156,"column":34}},{"start":{"line":156,"column":38},"end":{"line":156,"column":54}}]},"31":{"line":157,"type":"binary-expr","locations":[{"start":{"line":157,"column":19},"end":{"line":157,"column":32}},{"start":{"line":157,"column":36},"end":{"line":157,"column":51}}]},"32":{"line":158,"type":"binary-expr","locations":[{"start":{"line":158,"column":22},"end":{"line":158,"column":37}},{"start":{"line":158,"column":41},"end":{"line":158,"column":58}}]},"33":{"line":165,"type":"if","locations":[{"start":{"line":165,"column":4},"end":{"line":165,"column":4}},{"start":{"line":165,"column":4},"end":{"line":165,"column":4}}]},"34":{"line":172,"type":"binary-expr","locations":[{"start":{"line":172,"column":19},"end":{"line":172,"column":67}},{"start":{"line":172,"column":71},"end":{"line":172,"column":75}}]},"35":{"line":173,"type":"binary-expr","locations":[{"start":{"line":173,"column":21},"end":{"line":173,"column":35}},{"start":{"line":173,"column":39},"end":{"line":173,"column":51}}]},"36":{"line":176,"type":"if","locations":[{"start":{"line":176,"column":8},"end":{"line":176,"column":8}},{"start":{"line":176,"column":8},"end":{"line":176,"column":8}}]},"37":{"line":182,"type":"if","locations":[{"start":{"line":182,"column":10},"end":{"line":182,"column":10}},{"start":{"line":182,"column":10},"end":{"line":182,"column":10}}]},"38":{"line":214,"type":"binary-expr","locations":[{"start":{"line":214,"column":20},"end":{"line":214,"column":34}},{"start":{"line":214,"column":38},"end":{"line":214,"column":51}}]},"39":{"line":215,"type":"binary-expr","locations":[{"start":{"line":215,"column":18},"end":{"line":215,"column":66}},{"start":{"line":215,"column":70},"end":{"line":215,"column":81}}]},"40":{"line":216,"type":"if","locations":[{"start":{"line":216,"column":4},"end":{"line":216,"column":4}},{"start":{"line":216,"column":4},"end":{"line":216,"column":4}}]},"41":{"line":217,"type":"binary-expr","locations":[{"start":{"line":217,"column":19},"end":{"line":217,"column":30}},{"start":{"line":217,"column":34},"end":{"line":217,"column":44}}]},"42":{"line":219,"type":"if","locations":[{"start":{"line":219,"column":6},"end":{"line":219,"column":6}},{"start":{"line":219,"column":6},"end":{"line":219,"column":6}}]},"43":{"line":228,"type":"if","locations":[{"start":{"line":228,"column":4},"end":{"line":228,"column":4}},{"start":{"line":228,"column":4},"end":{"line":228,"column":4}}]},"44":{"line":229,"type":"if","locations":[{"start":{"line":229,"column":4},"end":{"line":229,"column":4}},{"start":{"line":229,"column":4},"end":{"line":229,"column":4}}]},"45":{"line":230,"type":"if","locations":[{"start":{"line":230,"column":4},"end":{"line":230,"column":4}},{"start":{"line":230,"column":4},"end":{"line":230,"column":4}}]},"46":{"line":231,"type":"if","locations":[{"start":{"line":231,"column":4},"end":{"line":231,"column":4}},{"start":{"line":231,"column":4},"end":{"line":231,"column":4}}]},"47":{"line":232,"type":"if","locations":[{"start":{"line":232,"column":4},"end":{"line":232,"column":4}},{"start":{"line":232,"column":4},"end":{"line":232,"column":4}}]},"48":{"line":233,"type":"if","locations":[{"start":{"line":233,"column":4},"end":{"line":233,"column":4}},{"start":{"line":233,"column":4},"end":{"line":233,"column":4}}]},"49":{"line":234,"type":"if","locations":[{"start":{"line":234,"column":4},"end":{"line":234,"column":4}},{"start":{"line":234,"column":4},"end":{"line":234,"column":4}}]},"50":{"line":235,"type":"if","locations":[{"start":{"line":235,"column":4},"end":{"line":235,"column":4}},{"start":{"line":235,"column":4},"end":{"line":235,"column":4}}]},"51":{"line":282,"type":"if","locations":[{"start":{"line":282,"column":4},"end":{"line":282,"column":4}},{"start":{"line":282,"column":4},"end":{"line":282,"column":4}}]},"52":{"line":283,"type":"if","locations":[{"start":{"line":283,"column":4},"end":{"line":283,"column":4}},{"start":{"line":283,"column":4},"end":{"line":283,"column":4}}]},"53":{"line":284,"type":"if","locations":[{"start":{"line":284,"column":9},"end":{"line":284,"column":9}},{"start":{"line":284,"column":9},"end":{"line":284,"column":9}}]},"54":{"line":285,"type":"if","locations":[{"start":{"line":285,"column":9},"end":{"line":285,"column":9}},{"start":{"line":285,"column":9},"end":{"line":285,"column":9}}]},"55":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":4},"end":{"line":288,"column":4}},{"start":{"line":288,"column":4},"end":{"line":288,"column":4}}]},"56":{"line":294,"type":"if","locations":[{"start":{"line":294,"column":4},"end":{"line":294,"column":4}},{"start":{"line":294,"column":4},"end":{"line":294,"column":4}}]},"57":{"line":305,"type":"if","locations":[{"start":{"line":305,"column":4},"end":{"line":305,"column":4}},{"start":{"line":305,"column":4},"end":{"line":305,"column":4}}]},"58":{"line":306,"type":"if","locations":[{"start":{"line":306,"column":4},"end":{"line":306,"column":4}},{"start":{"line":306,"column":4},"end":{"line":306,"column":4}}]},"59":{"line":306,"type":"cond-expr","locations":[{"start":{"line":306,"column":79},"end":{"line":306,"column":86}},{"start":{"line":306,"column":89},"end":{"line":306,"column":93}}]},"60":{"line":310,"type":"if","locations":[{"start":{"line":310,"column":4},"end":{"line":310,"column":4}},{"start":{"line":310,"column":4},"end":{"line":310,"column":4}}]},"61":{"line":312,"type":"if","locations":[{"start":{"line":312,"column":6},"end":{"line":312,"column":6}},{"start":{"line":312,"column":6},"end":{"line":312,"column":6}}]},"62":{"line":312,"type":"binary-expr","locations":[{"start":{"line":312,"column":10},"end":{"line":312,"column":27}},{"start":{"line":312,"column":31},"end":{"line":312,"column":49}}]},"63":{"line":325,"type":"if","locations":[{"start":{"line":325,"column":8},"end":{"line":325,"column":8}},{"start":{"line":325,"column":8},"end":{"line":325,"column":8}}]},"64":{"line":337,"type":"if","locations":[{"start":{"line":337,"column":6},"end":{"line":337,"column":6}},{"start":{"line":337,"column":6},"end":{"line":337,"column":6}}]},"65":{"line":348,"type":"if","locations":[{"start":{"line":348,"column":4},"end":{"line":348,"column":4}},{"start":{"line":348,"column":4},"end":{"line":348,"column":4}}]},"66":{"line":354,"type":"if","locations":[{"start":{"line":354,"column":6},"end":{"line":354,"column":6}},{"start":{"line":354,"column":6},"end":{"line":354,"column":6}}]},"67":{"line":356,"type":"if","locations":[{"start":{"line":356,"column":6},"end":{"line":356,"column":6}},{"start":{"line":356,"column":6},"end":{"line":356,"column":6}}]},"68":{"line":358,"type":"binary-expr","locations":[{"start":{"line":358,"column":15},"end":{"line":358,"column":21}},{"start":{"line":358,"column":25},"end":{"line":358,"column":29}}]},"69":{"line":367,"type":"if","locations":[{"start":{"line":367,"column":6},"end":{"line":367,"column":6}},{"start":{"line":367,"column":6},"end":{"line":367,"column":6}}]},"70":{"line":370,"type":"if","locations":[{"start":{"line":370,"column":8},"end":{"line":370,"column":8}},{"start":{"line":370,"column":8},"end":{"line":370,"column":8}}]},"71":{"line":370,"type":"binary-expr","locations":[{"start":{"line":370,"column":12},"end":{"line":370,"column":34}},{"start":{"line":370,"column":38},"end":{"line":370,"column":53}}]},"72":{"line":404,"type":"binary-expr","locations":[{"start":{"line":404,"column":16},"end":{"line":404,"column":26}},{"start":{"line":404,"column":30},"end":{"line":404,"column":39}}]},"73":{"line":405,"type":"cond-expr","locations":[{"start":{"line":405,"column":60},"end":{"line":405,"column":74}},{"start":{"line":405,"column":77},"end":{"line":405,"column":90}}]},"74":{"line":406,"type":"binary-expr","locations":[{"start":{"line":406,"column":17},"end":{"line":406,"column":28}},{"start":{"line":406,"column":32},"end":{"line":406,"column":42}}]},"75":{"line":407,"type":"if","locations":[{"start":{"line":407,"column":4},"end":{"line":407,"column":4}},{"start":{"line":407,"column":4},"end":{"line":407,"column":4}}]},"76":{"line":407,"type":"binary-expr","locations":[{"start":{"line":407,"column":8},"end":{"line":407,"column":38}},{"start":{"line":407,"column":42},"end":{"line":407,"column":68}}]},"77":{"line":410,"type":"cond-expr","locations":[{"start":{"line":410,"column":54},"end":{"line":410,"column":65}},{"start":{"line":410,"column":68},"end":{"line":410,"column":78}}]},"78":{"line":411,"type":"cond-expr","locations":[{"start":{"line":411,"column":66},"end":{"line":411,"column":83}},{"start":{"line":411,"column":86},"end":{"line":411,"column":102}}]},"79":{"line":413,"type":"if","locations":[{"start":{"line":413,"column":4},"end":{"line":413,"column":4}},{"start":{"line":413,"column":4},"end":{"line":413,"column":4}}]},"80":{"line":416,"type":"if","locations":[{"start":{"line":416,"column":8},"end":{"line":416,"column":8}},{"start":{"line":416,"column":8},"end":{"line":416,"column":8}}]},"81":{"line":479,"type":"cond-expr","locations":[{"start":{"line":479,"column":39},"end":{"line":479,"column":44}},{"start":{"line":479,"column":47},"end":{"line":479,"column":53}}]},"82":{"line":536,"type":"if","locations":[{"start":{"line":536,"column":4},"end":{"line":536,"column":4}},{"start":{"line":536,"column":4},"end":{"line":536,"column":4}}]},"83":{"line":537,"type":"if","locations":[{"start":{"line":537,"column":4},"end":{"line":537,"column":4}},{"start":{"line":537,"column":4},"end":{"line":537,"column":4}}]},"84":{"line":538,"type":"if","locations":[{"start":{"line":538,"column":6},"end":{"line":538,"column":6}},{"start":{"line":538,"column":6},"end":{"line":538,"column":6}}]},"85":{"line":538,"type":"binary-expr","locations":[{"start":{"line":538,"column":10},"end":{"line":538,"column":25}},{"start":{"line":538,"column":30},"end":{"line":538,"column":68}},{"start":{"line":538,"column":72},"end":{"line":538,"column":107}}]},"86":{"line":565,"type":"if","locations":[{"start":{"line":565,"column":4},"end":{"line":565,"column":4}},{"start":{"line":565,"column":4},"end":{"line":565,"column":4}}]},"87":{"line":565,"type":"cond-expr","locations":[{"start":{"line":565,"column":58},"end":{"line":565,"column":74}},{"start":{"line":565,"column":77},"end":{"line":565,"column":90}}]},"88":{"line":618,"type":"if","locations":[{"start":{"line":618,"column":4},"end":{"line":618,"column":4}},{"start":{"line":618,"column":4},"end":{"line":618,"column":4}}]}},"code":["const Constants = require('../../util/Constants');","const Collection = require('../../util/Collection');","const splitMessage = require('../../util/SplitMessage');","const parseEmoji = require('../../util/ParseEmoji');","const escapeMarkdown = require('../../util/EscapeMarkdown');","","const User = require('../../structures/User');","const GuildMember = require('../../structures/GuildMember');","const Message = require('../../structures/Message');","const Role = require('../../structures/Role');","const Invite = require('../../structures/Invite');","const Webhook = require('../../structures/Webhook');","const UserProfile = require('../../structures/UserProfile');","const ClientOAuth2Application = require('../../structures/ClientOAuth2Application');","","class RESTMethods {","  constructor(restManager) {","    this.rest = restManager;","    this.client = restManager.client;","  }","","  login(token = this.client.token) {","    return new Promise((resolve, reject) => {","      if (typeof token !== 'string') throw new Error(Constants.Errors.INVALID_TOKEN);","      token = token.replace(/^Bot\\s*/i, '');","      this.client.manager.connectToWebSocket(token, resolve, reject);","    });","  }","","  logout() {","    return this.rest.makeRequest('post', Constants.Endpoints.logout, true, {});","  }","","  getGateway() {","    return this.rest.makeRequest('get', Constants.Endpoints.gateway, true).then(res => {","      this.client.ws.gateway = `${res.url}/?v=${Constants.PROTOCOL_VERSION}`;","      return this.client.ws.gateway;","    });","  }","","  getBotGateway() {","    return this.rest.makeRequest('get', Constants.Endpoints.botGateway, true);","  }","","  sendMessage(channel, content, { tts, nonce, embed, disableEveryone, split, code } = {}, file = null) {","    return new Promise((resolve, reject) => {","      if (typeof content !== 'undefined') content = this.client.resolver.resolveString(content);","","      if (content) {","        if (typeof code !== 'undefined' && (typeof code !== 'boolean' || code === true)) {","          content = escapeMarkdown(this.client.resolver.resolveString(content), true);","          content = `\\`\\`\\`${typeof code !== 'boolean' ? code || '' : ''}\\n${content}\\n\\`\\`\\``;","        }","","        if (disableEveryone || (typeof disableEveryone === 'undefined' && this.client.options.disableEveryone)) {","          content = content.replace(/@(everyone|here)/g, '@\\u200b$1');","        }","","        if (split) content = splitMessage(content, typeof split === 'object' ? split : {});","      }","","      const send = chan => {","        if (content instanceof Array) {","          const messages = [];","          (function sendChunk(list, index) {","            const options = index === list.length ? { tts, embed } : { tts };","            chan.send(list[index], options, index === list.length ? file : null).then((message) => {","              messages.push(message);","              if (index >= list.length) return resolve(messages);","              return sendChunk(list, ++index);","            });","          }(content, 0));","        } else {","          this.rest.makeRequest('post', Constants.Endpoints.channelMessages(chan.id), true, {","            content, tts, nonce, embed,","          }, file).then(data => resolve(this.client.actions.MessageCreate.handle(data).message), reject);","        }","      };","","      if (channel instanceof User || channel instanceof GuildMember) {","        this.createDM(channel).then(send, reject);","      } else {","        send(channel);","      }","    });","  }","","  updateMessage(message, content, { embed, code } = {}) {","    content = this.client.resolver.resolveString(content);","    if (typeof code !== 'undefined' && (typeof code !== 'boolean' || code === true)) {","      content = escapeMarkdown(this.client.resolver.resolveString(content), true);","      content = `\\`\\`\\`${typeof code !== 'boolean' ? code || '' : ''}\\n${content}\\n\\`\\`\\``;","    }","    return this.rest.makeRequest('patch', Constants.Endpoints.channelMessage(message.channel.id, message.id), true, {","      content, embed,","    }).then(data => this.client.actions.MessageUpdate.handle(data).updated);","  }","","  deleteMessage(message) {","    return this.rest.makeRequest('del', Constants.Endpoints.channelMessage(message.channel.id, message.id), true)","      .then(() =>","        this.client.actions.MessageDelete.handle({","          id: message.id,","          channel_id: message.channel.id,","        }).message","      );","  }","","  bulkDeleteMessages(channel, messages) {","    return this.rest.makeRequest('post', `${Constants.Endpoints.channelMessages(channel.id)}/bulk_delete`, true, {","      messages,","    }).then(() =>","      this.client.actions.MessageDeleteBulk.handle({","        channel_id: channel.id,","        ids: messages,","      }).messages","    );","  }","","  createChannel(guild, channelName, channelType, overwrites) {","    if (overwrites instanceof Collection) overwrites = overwrites.array();","    return this.rest.makeRequest('post', Constants.Endpoints.guildChannels(guild.id), true, {","      name: channelName,","      type: channelType,","      permission_overwrites: overwrites,","    }).then(data => this.client.actions.ChannelCreate.handle(data).channel);","  }","","  createDM(recipient) {","    const dmChannel = this.getExistingDM(recipient);","    if (dmChannel) return Promise.resolve(dmChannel);","    return this.rest.makeRequest('post', Constants.Endpoints.userChannels(this.client.user.id), true, {","      recipient_id: recipient.id,","    }).then(data => this.client.actions.ChannelCreate.handle(data).channel);","  }","","  getExistingDM(recipient) {","    return this.client.channels.find(channel =>","      channel.recipient && channel.recipient.id === recipient.id","    );","  }","","  deleteChannel(channel) {","    if (channel instanceof User || channel instanceof GuildMember) channel = this.getExistingDM(channel);","    if (!channel) return Promise.reject(new Error('No channel to delete.'));","    return this.rest.makeRequest('del', Constants.Endpoints.channel(channel.id), true).then(data => {","      data.id = channel.id;","      return this.client.actions.ChannelDelete.handle(data).channel;","    });","  }","","  updateChannel(channel, _data) {","    const data = {};","    data.name = (_data.name || channel.name).trim();","    data.topic = _data.topic || channel.topic;","    data.position = _data.position || channel.position;","    data.bitrate = _data.bitrate || channel.bitrate;","    data.user_limit = _data.userLimit || channel.userLimit;","    return this.rest.makeRequest('patch', Constants.Endpoints.channel(channel.id), true, data).then(newData =>","      this.client.actions.ChannelUpdate.handle(newData).updated","    );","  }","","  leaveGuild(guild) {","    if (guild.ownerID === this.client.user.id) return Promise.reject(new Error('Guild is owned by the client.'));","    return this.rest.makeRequest('del', Constants.Endpoints.meGuild(guild.id), true).then(() =>","      this.client.actions.GuildDelete.handle({ id: guild.id }).guild","    );","  }","","  createGuild(options) {","    options.icon = this.client.resolver.resolveBase64(options.icon) || null;","    options.region = options.region || 'us-central';","    return new Promise((resolve, reject) => {","      this.rest.makeRequest('post', Constants.Endpoints.guilds, true, options).then(data => {","        if (this.client.guilds.has(data.id)) {","          resolve(this.client.guilds.get(data.id));","          return;","        }","","        const handleGuild = guild => {","          if (guild.id === data.id) {","            this.client.removeListener('guildCreate', handleGuild);","            this.client.clearTimeout(timeout);","            resolve(guild);","          }","        };","        this.client.on('guildCreate', handleGuild);","","        const timeout = this.client.setTimeout(() => {","          this.client.removeListener('guildCreate', handleGuild);","          reject(new Error('Took too long to receive guild data.'));","        }, 10000);","      }, reject);","    });","  }","","  // untested but probably will work","  deleteGuild(guild) {","    return this.rest.makeRequest('del', Constants.Endpoints.guild(guild.id), true).then(() =>","      this.client.actions.GuildDelete.handle({ id: guild.id }).guild","    );","  }","","  getUser(userID) {","    return this.rest.makeRequest('get', Constants.Endpoints.user(userID), true).then(data =>","      this.client.actions.UserGet.handle(data).user","    );","  }","","  updateCurrentUser(_data, password) {","    const user = this.client.user;","    const data = {};","    data.username = _data.username || user.username;","    data.avatar = this.client.resolver.resolveBase64(_data.avatar) || user.avatar;","    if (!user.bot) {","      data.email = _data.email || user.email;","      data.password = password;","      if (_data.new_password) data.new_password = _data.newPassword;","    }","    return this.rest.makeRequest('patch', Constants.Endpoints.me, true, data).then(newData =>","      this.client.actions.UserUpdate.handle(newData).updated","    );","  }","","  updateGuild(guild, _data) {","    const data = {};","    if (_data.name) data.name = _data.name;","    if (_data.region) data.region = _data.region;","    if (_data.verificationLevel) data.verification_level = Number(_data.verificationLevel);","    if (_data.afkChannel) data.afk_channel_id = this.client.resolver.resolveChannel(_data.afkChannel).id;","    if (_data.afkTimeout) data.afk_timeout = Number(_data.afkTimeout);","    if (_data.icon) data.icon = this.client.resolver.resolveBase64(_data.icon);","    if (_data.owner) data.owner_id = this.client.resolver.resolveUser(_data.owner).id;","    if (_data.splash) data.splash = this.client.resolver.resolveBase64(_data.splash);","    return this.rest.makeRequest('patch', Constants.Endpoints.guild(guild.id), true, data).then(newData =>","      this.client.actions.GuildUpdate.handle(newData).updated","    );","  }","","  kickGuildMember(guild, member) {","    return this.rest.makeRequest('del', Constants.Endpoints.guildMember(guild.id, member.id), true).then(() =>","      this.client.actions.GuildMemberRemove.handle({","        guild_id: guild.id,","        user: member.user,","      }).member","    );","  }","","  createGuildRole(guild) {","    return this.rest.makeRequest('post', Constants.Endpoints.guildRoles(guild.id), true).then(role =>","      this.client.actions.GuildRoleCreate.handle({","        guild_id: guild.id,","        role,","      }).role","    );","  }","","  deleteGuildRole(role) {","    return this.rest.makeRequest('del', Constants.Endpoints.guildRole(role.guild.id, role.id), true).then(() =>","      this.client.actions.GuildRoleDelete.handle({","        guild_id: role.guild.id,","        role_id: role.id,","      }).role","    );","  }","","  setChannelOverwrite(channel, payload) {","    return this.rest.makeRequest(","      'put', `${Constants.Endpoints.channelPermissions(channel.id)}/${payload.id}`, true, payload","    );","  }","","  deletePermissionOverwrites(overwrite) {","    return this.rest.makeRequest(","      'del', `${Constants.Endpoints.channelPermissions(overwrite.channel.id)}/${overwrite.id}`, true","    ).then(() => overwrite);","  }","","  getChannelMessages(channel, payload = {}) {","    const params = [];","    if (payload.limit) params.push(`limit=${payload.limit}`);","    if (payload.around) params.push(`around=${payload.around}`);","    else if (payload.before) params.push(`before=${payload.before}`);","    else if (payload.after) params.push(`after=${payload.after}`);","","    let endpoint = Constants.Endpoints.channelMessages(channel.id);","    if (params.length > 0) endpoint += `?${params.join('&')}`;","    return this.rest.makeRequest('get', endpoint, true);","  }","","  getChannelMessage(channel, messageID) {","    const msg = channel.messages.get(messageID);","    if (msg) return Promise.resolve(msg);","    return this.rest.makeRequest('get', Constants.Endpoints.channelMessage(channel.id, messageID), true);","  }","","  getGuildMember(guild, user) {","    return this.rest.makeRequest('get', Constants.Endpoints.guildMember(guild.id, user.id), true).then(data =>","      this.client.actions.GuildMemberGet.handle(guild, data).member","    );","  }","","  updateGuildMember(member, data) {","    if (data.channel) data.channel_id = this.client.resolver.resolveChannel(data.channel).id;","    if (data.roles) data.roles = data.roles.map(role => role instanceof Role ? role.id : role);","","    let endpoint = Constants.Endpoints.guildMember(member.guild.id, member.id);","    // fix your endpoints, discord ;-;","    if (member.id === this.client.user.id) {","      const keys = Object.keys(data);","      if (keys.length === 1 && keys[0] === 'nick') {","        endpoint = Constants.Endpoints.guildMemberNickname(member.guild.id);","      }","    }","","    return this.rest.makeRequest('patch', endpoint, true, data).then(newData =>","      member.guild._updateMember(member, newData).mem","    );","  }","","  addMemberRole(member, role) {","    return this.rest.makeRequest('put', Constants.Endpoints.guildMemberRole(member.guild.id, member.id, role.id), true)","      .then(() => {","        if (!member._roles.includes(role.id)) member._roles.push(role.id);","        return member;","      });","  }","","  removeMemberRole(member, role) {","    return this.rest.makeRequest(","      'delete',","      Constants.Endpoints.guildMemberRole(member.guild.id, member.id, role.id),","      true","    ).then(() => {","      const index = member._roles.indexOf(role.id);","      if (index >= 0) member._roles.splice(index, 1);","      return member;","    });","  }","","  sendTyping(channelID) {","    return this.rest.makeRequest('post', `${Constants.Endpoints.channel(channelID)}/typing`, true);","  }","","  banGuildMember(guild, member, deleteDays = 0) {","    const id = this.client.resolver.resolveUserID(member);","    if (!id) return Promise.reject(new Error('Couldn\\'t resolve the user ID to ban.'));","    return this.rest.makeRequest(","      'put', `${Constants.Endpoints.guildBans(guild.id)}/${id}?delete-message-days=${deleteDays}`, true, {","        'delete-message-days': deleteDays,","      }","    ).then(() => {","      if (member instanceof GuildMember) return member;","      const user = this.client.resolver.resolveUser(id);","      if (user) {","        member = this.client.resolver.resolveGuildMember(guild, user);","        return member || user;","      }","      return id;","    });","  }","","  unbanGuildMember(guild, member) {","    return new Promise((resolve, reject) => {","      const id = this.client.resolver.resolveUserID(member);","      if (!id) throw new Error('Couldn\\'t resolve the user ID to unban.');","","      const listener = (eGuild, eUser) => {","        if (eGuild.id === guild.id && eUser.id === id) {","          this.client.removeListener(Constants.Events.GUILD_BAN_REMOVE, listener);","          this.client.clearTimeout(timeout);","          resolve(eUser);","        }","      };","      this.client.on(Constants.Events.GUILD_BAN_REMOVE, listener);","","      const timeout = this.client.setTimeout(() => {","        this.client.removeListener(Constants.Events.GUILD_BAN_REMOVE, listener);","        reject(new Error('Took too long to receive the ban remove event.'));","      }, 10000);","","      this.rest.makeRequest('del', `${Constants.Endpoints.guildBans(guild.id)}/${id}`, true).catch(err => {","        this.client.removeListener(Constants.Events.GUILD_BAN_REMOVE, listener);","        this.client.clearTimeout(timeout);","        reject(err);","      });","    });","  }","","  getGuildBans(guild) {","    return this.rest.makeRequest('get', Constants.Endpoints.guildBans(guild.id), true).then(banItems => {","      const bannedUsers = new Collection();","      for (const banItem of banItems) {","        const user = this.client.dataManager.newUser(banItem.user);","        bannedUsers.set(user.id, user);","      }","      return bannedUsers;","    });","  }","","  updateGuildRole(role, _data) {","    const data = {};","    data.name = _data.name || role.name;","    data.position = typeof _data.position !== 'undefined' ? _data.position : role.position;","    data.color = _data.color || role.color;","    if (typeof data.color === 'string' && data.color.startsWith('#')) {","      data.color = parseInt(data.color.replace('#', ''), 16);","    }","    data.hoist = typeof _data.hoist !== 'undefined' ? _data.hoist : role.hoist;","    data.mentionable = typeof _data.mentionable !== 'undefined' ? _data.mentionable : role.mentionable;","","    if (_data.permissions) {","      let perms = 0;","      for (let perm of _data.permissions) {","        if (typeof perm === 'string') perm = Constants.PermissionFlags[perm];","        perms |= perm;","      }","      data.permissions = perms;","    } else {","      data.permissions = role.permissions;","    }","","    return this.rest.makeRequest(","      'patch', Constants.Endpoints.guildRole(role.guild.id, role.id), true, data","    ).then(_role =>","      this.client.actions.GuildRoleUpdate.handle({","        role: _role,","        guild_id: role.guild.id,","      }).updated","    );","  }","","  pinMessage(message) {","    return this.rest.makeRequest('put', `${Constants.Endpoints.channel(message.channel.id)}/pins/${message.id}`, true)","      .then(() => message);","  }","","  unpinMessage(message) {","    return this.rest.makeRequest('del', `${Constants.Endpoints.channel(message.channel.id)}/pins/${message.id}`, true)","      .then(() => message);","  }","","  getChannelPinnedMessages(channel) {","    return this.rest.makeRequest('get', `${Constants.Endpoints.channel(channel.id)}/pins`, true);","  }","","  createChannelInvite(channel, options) {","    const payload = {};","    payload.temporary = options.temporary;","    payload.max_age = options.maxAge;","    payload.max_uses = options.maxUses;","    return this.rest.makeRequest('post', `${Constants.Endpoints.channelInvites(channel.id)}`, true, payload)","      .then(invite => new Invite(this.client, invite));","  }","","  deleteInvite(invite) {","    return this.rest.makeRequest('del', Constants.Endpoints.invite(invite.code), true).then(() => invite);","  }","","  getInvite(code) {","    return this.rest.makeRequest('get', Constants.Endpoints.invite(code), true).then(invite =>","      new Invite(this.client, invite)","    );","  }","","  getGuildInvites(guild) {","    return this.rest.makeRequest('get', Constants.Endpoints.guildInvites(guild.id), true).then(inviteItems => {","      const invites = new Collection();","      for (const inviteItem of inviteItems) {","        const invite = new Invite(this.client, inviteItem);","        invites.set(invite.code, invite);","      }","      return invites;","    });","  }","","  pruneGuildMembers(guild, days, dry) {","    return this.rest.makeRequest(dry ? 'get' : 'post', `${Constants.Endpoints.guildPrune(guild.id)}?days=${days}`, true)","      .then(data => data.pruned);","  }","","  createEmoji(guild, image, name) {","    return this.rest.makeRequest('post', `${Constants.Endpoints.guildEmojis(guild.id)}`, true, { name, image })","      .then(data => this.client.actions.EmojiCreate.handle(data, guild).emoji);","  }","","  deleteEmoji(emoji) {","    return this.rest.makeRequest('delete', `${Constants.Endpoints.guildEmojis(emoji.guild.id)}/${emoji.id}`, true)","      .then(() => this.client.actions.EmojiDelete.handle(emoji).data);","  }","","  getWebhook(id, token) {","    return this.rest.makeRequest('get', Constants.Endpoints.webhook(id, token), !token).then(data =>","      new Webhook(this.client, data)","    );","  }","","  getGuildWebhooks(guild) {","    return this.rest.makeRequest('get', Constants.Endpoints.guildWebhooks(guild.id), true).then(data => {","      const hooks = new Collection();","      for (const hook of data) hooks.set(hook.id, new Webhook(this.client, hook));","      return hooks;","    });","  }","","  getChannelWebhooks(channel) {","    return this.rest.makeRequest('get', Constants.Endpoints.channelWebhooks(channel.id), true).then(data => {","      const hooks = new Collection();","      for (const hook of data) hooks.set(hook.id, new Webhook(this.client, hook));","      return hooks;","    });","  }","","  createWebhook(channel, name, avatar) {","    return this.rest.makeRequest('post', Constants.Endpoints.channelWebhooks(channel.id), true, { name, avatar })","      .then(data => new Webhook(this.client, data));","  }","","  editWebhook(webhook, name, avatar) {","    return this.rest.makeRequest('patch', Constants.Endpoints.webhook(webhook.id, webhook.token), false, {","      name,","      avatar,","    }).then(data => {","      webhook.name = data.name;","      webhook.avatar = data.avatar;","      return webhook;","    });","  }","","  deleteWebhook(webhook) {","    return this.rest.makeRequest('delete', Constants.Endpoints.webhook(webhook.id, webhook.token), false);","  }","","  sendWebhookMessage(webhook, content, { avatarURL, tts, disableEveryone, embeds } = {}, file = null) {","    if (typeof content !== 'undefined') content = this.client.resolver.resolveString(content);","    if (content) {","      if (disableEveryone || (typeof disableEveryone === 'undefined' && this.client.options.disableEveryone)) {","        content = content.replace(/@(everyone|here)/g, '@\\u200b$1');","      }","    }","    return this.rest.makeRequest('post', `${Constants.Endpoints.webhook(webhook.id, webhook.token)}?wait=true`, false, {","      username: webhook.name,","      avatar_url: avatarURL,","      content,","      tts,","      file,","      embeds,","    });","  }","","  sendSlackWebhookMessage(webhook, body) {","    return this.rest.makeRequest(","      'post', `${Constants.Endpoints.webhook(webhook.id, webhook.token)}/slack?wait=true`, false, body","    );","  }","","  fetchUserProfile(user) {","    return this.rest.makeRequest('get', Constants.Endpoints.userProfile(user.id), true).then(data =>","      new UserProfile(user, data)","    );","  }","","  fetchMeMentions(options) {","    if (options.guild) options.guild = options.guild.id ? options.guild.id : options.guild;","    return this.rest.makeRequest(","      'get',","      Constants.Endpoints.meMentions(options.limit, options.roles, options.everyone, options.guild)","    ).then(res => res.body.map(m => new Message(this.client.channels.get(m.channel_id), m, this.client)));","  }","","  addFriend(user) {","    return this.rest.makeRequest('post', Constants.Endpoints.relationships('@me'), true, {","      username: user.username,","      discriminator: user.discriminator,","    }).then(() => user);","  }","","  removeFriend(user) {","    return this.rest.makeRequest('delete', `${Constants.Endpoints.relationships('@me')}/${user.id}`, true)","      .then(() => user);","  }","","  blockUser(user) {","    return this.rest.makeRequest('put', `${Constants.Endpoints.relationships('@me')}/${user.id}`, true, { type: 2 })","      .then(() => user);","  }","","  unblockUser(user) {","    return this.rest.makeRequest('delete', `${Constants.Endpoints.relationships('@me')}/${user.id}`, true)","      .then(() => user);","  }","","  setRolePositions(guildID, roles) {","    return this.rest.makeRequest('patch', Constants.Endpoints.guildRoles(guildID), true, roles).then(() =>","      this.client.actions.GuildRolesPositionUpdate.handle({","        guild_id: guildID,","        roles,","      }).guild","    );","  }","","  addMessageReaction(message, emoji) {","    return this.rest.makeRequest(","      'put', Constants.Endpoints.selfMessageReaction(message.channel.id, message.id, emoji), true","    ).then(() =>","      this.client.actions.MessageReactionAdd.handle({","        user_id: this.client.user.id,","        message_id: message.id,","        emoji: parseEmoji(emoji),","        channel_id: message.channel.id,","      }).reaction","    );","  }","","  removeMessageReaction(message, emoji, user) {","    let endpoint = Constants.Endpoints.selfMessageReaction(message.channel.id, message.id, emoji);","    if (user.id !== this.client.user.id) {","      endpoint = Constants.Endpoints.userMessageReaction(message.channel.id, message.id, emoji, null, user.id);","    }","    return this.rest.makeRequest('delete', endpoint, true).then(() =>","      this.client.actions.MessageReactionRemove.handle({","        user_id: user.id,","        message_id: message.id,","        emoji: parseEmoji(emoji),","        channel_id: message.channel.id,","      }).reaction","    );","  }","","  removeMessageReactions(message) {","    return this.rest.makeRequest('delete', Constants.Endpoints.messageReactions(message.channel.id, message.id), true)","      .then(() => message);","  }","","  getMessageReactionUsers(message, emoji, limit = 100) {","    return this.rest.makeRequest(","      'get', Constants.Endpoints.messageReaction(message.channel.id, message.id, emoji, limit), true","    );","  }","","  getMyApplication() {","    return this.rest.makeRequest('get', Constants.Endpoints.myApplication, true).then(app =>","      new ClientOAuth2Application(this.client, app)","    );","  }","","  setNote(user, note) {","    return this.rest.makeRequest('put', Constants.Endpoints.note(user.id), true, { note }).then(() => user);","  }","}","","module.exports = RESTMethods;",""],"l":{"1":28,"2":28,"3":28,"4":0,"5":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"18":0,"19":0,"23":0,"24":0,"25":0,"26":0,"31":0,"35":0,"36":0,"37":0,"42":0,"46":0,"47":0,"49":0,"50":0,"51":0,"52":0,"55":0,"56":0,"59":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"74":0,"76":0,"80":0,"81":0,"83":0,"89":0,"90":0,"91":0,"92":0,"94":0,"96":0,"100":0,"102":0,"110":0,"113":0,"121":0,"122":0,"126":0,"130":0,"131":0,"132":0,"134":0,"138":0,"139":0,"144":0,"145":0,"146":0,"147":0,"148":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"165":0,"166":0,"167":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"181":0,"182":0,"183":0,"184":0,"185":0,"188":0,"190":0,"191":0,"192":0,"200":0,"201":0,"206":0,"207":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"221":0,"222":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"242":0,"243":0,"251":0,"252":0,"260":0,"261":0,"269":0,"275":0,"277":0,"281":0,"282":0,"283":0,"284":0,"285":0,"287":0,"288":0,"289":0,"293":0,"294":0,"295":0,"299":0,"300":0,"305":0,"306":0,"308":0,"310":0,"311":0,"312":0,"313":0,"317":0,"318":0,"323":0,"325":0,"326":0,"331":0,"336":0,"337":0,"338":0,"343":0,"347":0,"348":0,"349":0,"354":0,"355":0,"356":0,"357":0,"358":0,"360":0,"365":0,"366":0,"367":0,"369":0,"370":0,"371":0,"372":0,"373":0,"376":0,"378":0,"379":0,"380":0,"383":0,"384":0,"385":0,"386":0,"392":0,"393":0,"394":0,"395":0,"396":0,"398":0,"403":0,"404":0,"405":0,"406":0,"407":0,"408":0,"410":0,"411":0,"413":0,"414":0,"415":0,"416":0,"417":0,"419":0,"421":0,"424":0,"427":0,"435":0,"436":0,"440":0,"441":0,"445":0,"449":0,"450":0,"451":0,"452":0,"453":0,"454":0,"458":0,"462":0,"463":0,"468":0,"469":0,"470":0,"471":0,"472":0,"474":0,"479":0,"480":0,"484":0,"485":0,"489":0,"490":0,"494":0,"495":0,"500":0,"501":0,"502":0,"503":0,"508":0,"509":0,"510":0,"511":0,"516":0,"517":0,"521":0,"525":0,"526":0,"527":0,"532":0,"536":0,"537":0,"538":0,"539":0,"542":0,"553":0,"559":0,"560":0,"565":0,"566":0,"569":0,"573":0,"576":0,"580":0,"581":0,"585":0,"586":0,"590":0,"591":0,"595":0,"596":0,"604":0,"607":0,"617":0,"618":0,"619":0,"621":0,"622":0,"632":0,"633":0,"637":0,"643":0,"644":0,"649":0,"653":0}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/util/Collection.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/util/Collection.js","s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":13},"end":{"line":7,"column":24}}},"2":{"name":"(anonymous_2)","line":25,"loc":{"start":{"line":25,"column":5},"end":{"line":25,"column":16}}},"3":{"name":"(anonymous_3)","line":31,"loc":{"start":{"line":31,"column":8},"end":{"line":31,"column":14}}},"4":{"name":"(anonymous_4)","line":43,"loc":{"start":{"line":43,"column":7},"end":{"line":43,"column":10}}},"5":{"name":"(anonymous_5)","line":54,"loc":{"start":{"line":54,"column":10},"end":{"line":54,"column":13}}},"6":{"name":"(anonymous_6)","line":63,"loc":{"start":{"line":63,"column":7},"end":{"line":63,"column":10}}},"7":{"name":"(anonymous_7)","line":71,"loc":{"start":{"line":71,"column":10},"end":{"line":71,"column":13}}},"8":{"name":"(anonymous_8)","line":80,"loc":{"start":{"line":80,"column":6},"end":{"line":80,"column":9}}},"9":{"name":"(anonymous_9)","line":90,"loc":{"start":{"line":90,"column":9},"end":{"line":90,"column":12}}},"10":{"name":"(anonymous_10)","line":100,"loc":{"start":{"line":100,"column":8},"end":{"line":100,"column":11}}},"11":{"name":"(anonymous_11)","line":110,"loc":{"start":{"line":110,"column":11},"end":{"line":110,"column":14}}},"12":{"name":"(anonymous_12)","line":124,"loc":{"start":{"line":124,"column":9},"end":{"line":124,"column":23}}},"13":{"name":"(anonymous_13)","line":148,"loc":{"start":{"line":148,"column":6},"end":{"line":148,"column":24}}},"14":{"name":"(anonymous_14)","line":180,"loc":{"start":{"line":180,"column":9},"end":{"line":180,"column":27}}},"15":{"name":"(anonymous_15)","line":210,"loc":{"start":{"line":210,"column":8},"end":{"line":210,"column":22}}},"16":{"name":"(anonymous_16)","line":223,"loc":{"start":{"line":223,"column":8},"end":{"line":223,"column":22}}},"17":{"name":"(anonymous_17)","line":239,"loc":{"start":{"line":239,"column":13},"end":{"line":239,"column":27}}},"18":{"name":"(anonymous_18)","line":255,"loc":{"start":{"line":255,"column":5},"end":{"line":255,"column":19}}},"19":{"name":"(anonymous_19)","line":270,"loc":{"start":{"line":270,"column":6},"end":{"line":270,"column":20}}},"20":{"name":"(anonymous_20)","line":285,"loc":{"start":{"line":285,"column":7},"end":{"line":285,"column":21}}},"21":{"name":"(anonymous_21)","line":301,"loc":{"start":{"line":301,"column":8},"end":{"line":301,"column":27}}},"22":{"name":"(anonymous_22)","line":326,"loc":{"start":{"line":326,"column":8},"end":{"line":326,"column":25}}},"23":{"name":"(anonymous_23)","line":339,"loc":{"start":{"line":339,"column":11},"end":{"line":339,"column":14}}},"24":{"name":"(anonymous_24)","line":354,"loc":{"start":{"line":354,"column":8},"end":{"line":354,"column":21}}}},"statementMap":{"1":{"start":{"line":8,"column":4},"end":{"line":8,"column":20}},"2":{"start":{"line":15,"column":4},"end":{"line":15,"column":23}},"3":{"start":{"line":22,"column":4},"end":{"line":22,"column":26}},"4":{"start":{"line":26,"column":4},"end":{"line":26,"column":23}},"5":{"start":{"line":27,"column":4},"end":{"line":27,"column":26}},"6":{"start":{"line":28,"column":4},"end":{"line":28,"column":31}},"7":{"start":{"line":32,"column":4},"end":{"line":32,"column":23}},"8":{"start":{"line":33,"column":4},"end":{"line":33,"column":26}},"9":{"start":{"line":34,"column":4},"end":{"line":34,"column":29}},"10":{"start":{"line":44,"column":4},"end":{"line":44,"column":98}},"11":{"start":{"line":44,"column":58},"end":{"line":44,"column":98}},"12":{"start":{"line":45,"column":4},"end":{"line":45,"column":23}},"13":{"start":{"line":55,"column":4},"end":{"line":55,"column":105}},"14":{"start":{"line":55,"column":64},"end":{"line":55,"column":105}},"15":{"start":{"line":56,"column":4},"end":{"line":56,"column":26}},"16":{"start":{"line":64,"column":4},"end":{"line":64,"column":38}},"17":{"start":{"line":72,"column":4},"end":{"line":72,"column":36}},"18":{"start":{"line":81,"column":4},"end":{"line":81,"column":29}},"19":{"start":{"line":82,"column":4},"end":{"line":82,"column":31}},"20":{"start":{"line":91,"column":4},"end":{"line":91,"column":32}},"21":{"start":{"line":92,"column":4},"end":{"line":92,"column":31}},"22":{"start":{"line":101,"column":4},"end":{"line":101,"column":29}},"23":{"start":{"line":102,"column":4},"end":{"line":102,"column":55}},"24":{"start":{"line":111,"column":4},"end":{"line":111,"column":32}},"25":{"start":{"line":112,"column":4},"end":{"line":112,"column":55}},"26":{"start":{"line":125,"column":4},"end":{"line":125,"column":79}},"27":{"start":{"line":125,"column":34},"end":{"line":125,"column":79}},"28":{"start":{"line":126,"column":4},"end":{"line":126,"column":82}},"29":{"start":{"line":126,"column":38},"end":{"line":126,"column":82}},"30":{"start":{"line":127,"column":4},"end":{"line":127,"column":23}},"31":{"start":{"line":128,"column":4},"end":{"line":130,"column":5}},"32":{"start":{"line":129,"column":6},"end":{"line":129,"column":51}},"33":{"start":{"line":129,"column":32},"end":{"line":129,"column":51}},"34":{"start":{"line":131,"column":4},"end":{"line":131,"column":19}},"35":{"start":{"line":149,"column":4},"end":{"line":163,"column":5}},"36":{"start":{"line":150,"column":6},"end":{"line":150,"column":84}},"37":{"start":{"line":150,"column":40},"end":{"line":150,"column":84}},"38":{"start":{"line":151,"column":6},"end":{"line":151,"column":105}},"39":{"start":{"line":151,"column":29},"end":{"line":151,"column":105}},"40":{"start":{"line":152,"column":6},"end":{"line":154,"column":7}},"41":{"start":{"line":153,"column":8},"end":{"line":153,"column":50}},"42":{"start":{"line":153,"column":38},"end":{"line":153,"column":50}},"43":{"start":{"line":155,"column":6},"end":{"line":155,"column":18}},"44":{"start":{"line":156,"column":11},"end":{"line":163,"column":5}},"45":{"start":{"line":157,"column":6},"end":{"line":159,"column":7}},"46":{"start":{"line":158,"column":8},"end":{"line":158,"column":49}},"47":{"start":{"line":158,"column":38},"end":{"line":158,"column":49}},"48":{"start":{"line":160,"column":6},"end":{"line":160,"column":18}},"49":{"start":{"line":162,"column":6},"end":{"line":162,"column":81}},"50":{"start":{"line":181,"column":4},"end":{"line":194,"column":5}},"51":{"start":{"line":182,"column":6},"end":{"line":182,"column":84}},"52":{"start":{"line":182,"column":40},"end":{"line":182,"column":84}},"53":{"start":{"line":183,"column":6},"end":{"line":185,"column":7}},"54":{"start":{"line":184,"column":8},"end":{"line":184,"column":48}},"55":{"start":{"line":184,"column":37},"end":{"line":184,"column":48}},"56":{"start":{"line":186,"column":6},"end":{"line":186,"column":18}},"57":{"start":{"line":187,"column":11},"end":{"line":194,"column":5}},"58":{"start":{"line":188,"column":6},"end":{"line":190,"column":7}},"59":{"start":{"line":189,"column":8},"end":{"line":189,"column":49}},"60":{"start":{"line":189,"column":38},"end":{"line":189,"column":49}},"61":{"start":{"line":191,"column":6},"end":{"line":191,"column":18}},"62":{"start":{"line":193,"column":6},"end":{"line":193,"column":81}},"63":{"start":{"line":211,"column":4},"end":{"line":211,"column":101}},"64":{"start":{"line":211,"column":23},"end":{"line":211,"column":101}},"65":{"start":{"line":212,"column":4},"end":{"line":212,"column":43}},"66":{"start":{"line":224,"column":4},"end":{"line":224,"column":39}},"67":{"start":{"line":224,"column":17},"end":{"line":224,"column":39}},"68":{"start":{"line":225,"column":4},"end":{"line":225,"column":37}},"69":{"start":{"line":226,"column":4},"end":{"line":228,"column":5}},"70":{"start":{"line":227,"column":6},"end":{"line":227,"column":52}},"71":{"start":{"line":227,"column":30},"end":{"line":227,"column":52}},"72":{"start":{"line":229,"column":4},"end":{"line":229,"column":19}},"73":{"start":{"line":240,"column":4},"end":{"line":240,"column":39}},"74":{"start":{"line":240,"column":17},"end":{"line":240,"column":39}},"75":{"start":{"line":241,"column":4},"end":{"line":241,"column":23}},"76":{"start":{"line":242,"column":4},"end":{"line":244,"column":5}},"77":{"start":{"line":243,"column":6},"end":{"line":243,"column":48}},"78":{"start":{"line":243,"column":30},"end":{"line":243,"column":48}},"79":{"start":{"line":245,"column":4},"end":{"line":245,"column":19}},"80":{"start":{"line":256,"column":4},"end":{"line":256,"column":39}},"81":{"start":{"line":256,"column":17},"end":{"line":256,"column":39}},"82":{"start":{"line":257,"column":4},"end":{"line":257,"column":37}},"83":{"start":{"line":258,"column":4},"end":{"line":258,"column":14}},"84":{"start":{"line":259,"column":4},"end":{"line":259,"column":65}},"85":{"start":{"line":259,"column":35},"end":{"line":259,"column":65}},"86":{"start":{"line":260,"column":4},"end":{"line":260,"column":15}},"87":{"start":{"line":271,"column":4},"end":{"line":271,"column":39}},"88":{"start":{"line":271,"column":17},"end":{"line":271,"column":39}},"89":{"start":{"line":272,"column":4},"end":{"line":274,"column":5}},"90":{"start":{"line":273,"column":6},"end":{"line":273,"column":42}},"91":{"start":{"line":273,"column":30},"end":{"line":273,"column":42}},"92":{"start":{"line":275,"column":4},"end":{"line":275,"column":17}},"93":{"start":{"line":286,"column":4},"end":{"line":286,"column":39}},"94":{"start":{"line":286,"column":17},"end":{"line":286,"column":39}},"95":{"start":{"line":287,"column":4},"end":{"line":289,"column":5}},"96":{"start":{"line":288,"column":6},"end":{"line":288,"column":44}},"97":{"start":{"line":288,"column":31},"end":{"line":288,"column":44}},"98":{"start":{"line":290,"column":4},"end":{"line":290,"column":16}},"99":{"start":{"line":302,"column":4},"end":{"line":302,"column":20}},"100":{"start":{"line":303,"column":4},"end":{"line":316,"column":5}},"101":{"start":{"line":304,"column":6},"end":{"line":304,"column":33}},"102":{"start":{"line":305,"column":6},"end":{"line":305,"column":83}},"103":{"start":{"line":305,"column":37},"end":{"line":305,"column":83}},"104":{"start":{"line":307,"column":6},"end":{"line":307,"column":23}},"105":{"start":{"line":308,"column":6},"end":{"line":315,"column":7}},"106":{"start":{"line":309,"column":8},"end":{"line":313,"column":9}},"107":{"start":{"line":310,"column":10},"end":{"line":310,"column":28}},"108":{"start":{"line":311,"column":10},"end":{"line":311,"column":24}},"109":{"start":{"line":312,"column":10},"end":{"line":312,"column":19}},"110":{"start":{"line":314,"column":8},"end":{"line":314,"column":54}},"111":{"start":{"line":317,"column":4},"end":{"line":317,"column":23}},"112":{"start":{"line":327,"column":4},"end":{"line":327,"column":43}},"113":{"start":{"line":328,"column":4},"end":{"line":328,"column":57}},"114":{"start":{"line":328,"column":35},"end":{"line":328,"column":57}},"115":{"start":{"line":329,"column":4},"end":{"line":331,"column":5}},"116":{"start":{"line":330,"column":6},"end":{"line":330,"column":59}},"117":{"start":{"line":330,"column":37},"end":{"line":330,"column":59}},"118":{"start":{"line":332,"column":4},"end":{"line":332,"column":19}},"119":{"start":{"line":340,"column":4},"end":{"line":340,"column":23}},"120":{"start":{"line":341,"column":4},"end":{"line":343,"column":5}},"121":{"start":{"line":342,"column":6},"end":{"line":342,"column":51}},"122":{"start":{"line":342,"column":23},"end":{"line":342,"column":51}},"123":{"start":{"line":344,"column":4},"end":{"line":344,"column":19}},"124":{"start":{"line":355,"column":4},"end":{"line":355,"column":34}},"125":{"start":{"line":355,"column":21},"end":{"line":355,"column":34}},"126":{"start":{"line":356,"column":4},"end":{"line":356,"column":41}},"127":{"start":{"line":356,"column":29},"end":{"line":356,"column":41}},"128":{"start":{"line":357,"column":4},"end":{"line":357,"column":52}},"129":{"start":{"line":357,"column":39},"end":{"line":357,"column":52}},"130":{"start":{"line":358,"column":4},"end":{"line":361,"column":7}},"131":{"start":{"line":359,"column":6},"end":{"line":359,"column":42}},"132":{"start":{"line":360,"column":6},"end":{"line":360,"column":82}},"133":{"start":{"line":365,"column":0},"end":{"line":365,"column":28}}},"branchMap":{"1":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":4},"end":{"line":44,"column":4}},{"start":{"line":44,"column":4},"end":{"line":44,"column":4}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":8},"end":{"line":44,"column":20}},{"start":{"line":44,"column":24},"end":{"line":44,"column":56}}]},"3":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":4},"end":{"line":55,"column":4}},{"start":{"line":55,"column":4},"end":{"line":55,"column":4}}]},"4":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":8},"end":{"line":55,"column":23}},{"start":{"line":55,"column":27},"end":{"line":55,"column":62}}]},"5":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":4},"end":{"line":125,"column":4}},{"start":{"line":125,"column":4},"end":{"line":125,"column":4}}]},"6":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":4},"end":{"line":126,"column":4}},{"start":{"line":126,"column":4},"end":{"line":126,"column":4}}]},"7":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":6},"end":{"line":129,"column":6}},{"start":{"line":129,"column":6},"end":{"line":129,"column":6}}]},"8":{"line":149,"type":"if","locations":[{"start":{"line":149,"column":4},"end":{"line":149,"column":4}},{"start":{"line":149,"column":4},"end":{"line":149,"column":4}}]},"9":{"line":150,"type":"if","locations":[{"start":{"line":150,"column":6},"end":{"line":150,"column":6}},{"start":{"line":150,"column":6},"end":{"line":150,"column":6}}]},"10":{"line":151,"type":"if","locations":[{"start":{"line":151,"column":6},"end":{"line":151,"column":6}},{"start":{"line":151,"column":6},"end":{"line":151,"column":6}}]},"11":{"line":153,"type":"if","locations":[{"start":{"line":153,"column":8},"end":{"line":153,"column":8}},{"start":{"line":153,"column":8},"end":{"line":153,"column":8}}]},"12":{"line":156,"type":"if","locations":[{"start":{"line":156,"column":11},"end":{"line":156,"column":11}},{"start":{"line":156,"column":11},"end":{"line":156,"column":11}}]},"13":{"line":158,"type":"if","locations":[{"start":{"line":158,"column":8},"end":{"line":158,"column":8}},{"start":{"line":158,"column":8},"end":{"line":158,"column":8}}]},"14":{"line":181,"type":"if","locations":[{"start":{"line":181,"column":4},"end":{"line":181,"column":4}},{"start":{"line":181,"column":4},"end":{"line":181,"column":4}}]},"15":{"line":182,"type":"if","locations":[{"start":{"line":182,"column":6},"end":{"line":182,"column":6}},{"start":{"line":182,"column":6},"end":{"line":182,"column":6}}]},"16":{"line":184,"type":"if","locations":[{"start":{"line":184,"column":8},"end":{"line":184,"column":8}},{"start":{"line":184,"column":8},"end":{"line":184,"column":8}}]},"17":{"line":187,"type":"if","locations":[{"start":{"line":187,"column":11},"end":{"line":187,"column":11}},{"start":{"line":187,"column":11},"end":{"line":187,"column":11}}]},"18":{"line":189,"type":"if","locations":[{"start":{"line":189,"column":8},"end":{"line":189,"column":8}},{"start":{"line":189,"column":8},"end":{"line":189,"column":8}}]},"19":{"line":211,"type":"if","locations":[{"start":{"line":211,"column":4},"end":{"line":211,"column":4}},{"start":{"line":211,"column":4},"end":{"line":211,"column":4}}]},"20":{"line":224,"type":"if","locations":[{"start":{"line":224,"column":4},"end":{"line":224,"column":4}},{"start":{"line":224,"column":4},"end":{"line":224,"column":4}}]},"21":{"line":227,"type":"if","locations":[{"start":{"line":227,"column":6},"end":{"line":227,"column":6}},{"start":{"line":227,"column":6},"end":{"line":227,"column":6}}]},"22":{"line":240,"type":"if","locations":[{"start":{"line":240,"column":4},"end":{"line":240,"column":4}},{"start":{"line":240,"column":4},"end":{"line":240,"column":4}}]},"23":{"line":243,"type":"if","locations":[{"start":{"line":243,"column":6},"end":{"line":243,"column":6}},{"start":{"line":243,"column":6},"end":{"line":243,"column":6}}]},"24":{"line":256,"type":"if","locations":[{"start":{"line":256,"column":4},"end":{"line":256,"column":4}},{"start":{"line":256,"column":4},"end":{"line":256,"column":4}}]},"25":{"line":271,"type":"if","locations":[{"start":{"line":271,"column":4},"end":{"line":271,"column":4}},{"start":{"line":271,"column":4},"end":{"line":271,"column":4}}]},"26":{"line":273,"type":"if","locations":[{"start":{"line":273,"column":6},"end":{"line":273,"column":6}},{"start":{"line":273,"column":6},"end":{"line":273,"column":6}}]},"27":{"line":286,"type":"if","locations":[{"start":{"line":286,"column":4},"end":{"line":286,"column":4}},{"start":{"line":286,"column":4},"end":{"line":286,"column":4}}]},"28":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":6},"end":{"line":288,"column":6}},{"start":{"line":288,"column":6},"end":{"line":288,"column":6}}]},"29":{"line":303,"type":"if","locations":[{"start":{"line":303,"column":4},"end":{"line":303,"column":4}},{"start":{"line":303,"column":4},"end":{"line":303,"column":4}}]},"30":{"line":309,"type":"if","locations":[{"start":{"line":309,"column":8},"end":{"line":309,"column":8}},{"start":{"line":309,"column":8},"end":{"line":309,"column":8}}]},"31":{"line":342,"type":"if","locations":[{"start":{"line":342,"column":6},"end":{"line":342,"column":6}},{"start":{"line":342,"column":6},"end":{"line":342,"column":6}}]},"32":{"line":355,"type":"if","locations":[{"start":{"line":355,"column":4},"end":{"line":355,"column":4}},{"start":{"line":355,"column":4},"end":{"line":355,"column":4}}]},"33":{"line":356,"type":"if","locations":[{"start":{"line":356,"column":4},"end":{"line":356,"column":4}},{"start":{"line":356,"column":4},"end":{"line":356,"column":4}}]},"34":{"line":357,"type":"if","locations":[{"start":{"line":357,"column":4},"end":{"line":357,"column":4}},{"start":{"line":357,"column":4},"end":{"line":357,"column":4}}]},"35":{"line":360,"type":"binary-expr","locations":[{"start":{"line":360,"column":13},"end":{"line":360,"column":30}},{"start":{"line":360,"column":35},"end":{"line":360,"column":56}},{"start":{"line":360,"column":60},"end":{"line":360,"column":80}}]}},"code":["/**"," * A Map with additional utility methods. This is used throughout discord.js rather than Arrays for anything that has"," * an ID, for significantly improved performance and ease-of-use."," * @extends {Map}"," */","class Collection extends Map {","  constructor(iterable) {","    super(iterable);","","    /**","     * Cached array for the `array()` method - will be reset to `null` whenever `set()` or `delete()` are called.","     * @type {?Array}","     * @private","     */","    this._array = null;","","    /**","     * Cached array for the `keyArray()` method - will be reset to `null` whenever `set()` or `delete()` are called.","     * @type {?Array}","     * @private","     */","    this._keyArray = null;","  }","","  set(key, val) {","    this._array = null;","    this._keyArray = null;","    return super.set(key, val);","  }","","  delete(key) {","    this._array = null;","    this._keyArray = null;","    return super.delete(key);","  }","","  /**","   * Creates an ordered array of the values of this collection, and caches it internally. The array will only be","   * reconstructed if an item is added to or removed from the collection, or if you change the length of the array","   * itself. If you don't want this caching behaviour, use `Array.from(collection.values())` instead.","   * @returns {Array}","   */","  array() {","    if (!this._array || this._array.length !== this.size) this._array = Array.from(this.values());","    return this._array;","  }","","  /**","   * Creates an ordered array of the keys of this collection, and caches it internally. The array will only be","   * reconstructed if an item is added to or removed from the collection, or if you change the length of the array","   * itself. If you don't want this caching behaviour, use `Array.from(collection.keys())` instead.","   * @returns {Array}","   */","  keyArray() {","    if (!this._keyArray || this._keyArray.length !== this.size) this._keyArray = Array.from(this.keys());","    return this._keyArray;","  }","","  /**","   * Obtains the first item in this collection.","   * @returns {*}","   */","  first() {","    return this.values().next().value;","  }","","  /**","   * Obtains the first key in this collection.","   * @returns {*}","   */","  firstKey() {","    return this.keys().next().value;","  }","","  /**","   * Obtains the last item in this collection. This relies on the `array()` method, and thus the caching mechanism","   * applies here as well.","   * @returns {*}","   */","  last() {","    const arr = this.array();","    return arr[arr.length - 1];","  }","","  /**","   * Obtains the last key in this collection. This relies on the `keyArray()` method, and thus the caching mechanism","   * applies here as well.","   * @returns {*}","   */","  lastKey() {","    const arr = this.keyArray();","    return arr[arr.length - 1];","  }","","  /**","   * Obtains a random item from this collection. This relies on the `array()` method, and thus the caching mechanism","   * applies here as well.","   * @returns {*}","   */","  random() {","    const arr = this.array();","    return arr[Math.floor(Math.random() * arr.length)];","  }","","  /**","   * Obtains a random key from this collection. This relies on the `keyArray()` method, and thus the caching mechanism","   * applies here as well.","   * @returns {*}","   */","  randomKey() {","    const arr = this.keyArray();","    return arr[Math.floor(Math.random() * arr.length)];","  }","","  /**","   * Searches for all items where their specified property's value is identical to the given value","   * (`item[prop] === value`).","   * @param {string} prop The property to test against","   * @param {*} value The expected value","   * @returns {Array}","   * @example","   * collection.findAll('username', 'Bob');","   */","  findAll(prop, value) {","    if (typeof prop !== 'string') throw new TypeError('Key must be a string.');","    if (typeof value === 'undefined') throw new Error('Value must be specified.');","    const results = [];","    for (const item of this.values()) {","      if (item[prop] === value) results.push(item);","    }","    return results;","  }","","  /**","   * Searches for a single item where its specified property's value is identical to the given value","   * (`item[prop] === value`), or the given function returns a truthy value. In the latter case, this is identical to","   * [Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).","   * <warn>Do not use this to obtain an item by its ID. Instead, use `collection.get(id)`. See","   * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) for details.</warn>","   * @param {string|Function} propOrFn The property to test against, or the function to test with","   * @param {*} [value] The expected value - only applicable and required if using a property for the first argument","   * @returns {*}","   * @example","   * collection.find('username', 'Bob');","   * @example","   * collection.find(val => val.username === 'Bob');","   */","  find(propOrFn, value) {","    if (typeof propOrFn === 'string') {","      if (typeof value === 'undefined') throw new Error('Value must be specified.');","      if (propOrFn === 'id') throw new RangeError('Don\\'t use .find() with IDs. Instead, use .get(id).');","      for (const item of this.values()) {","        if (item[propOrFn] === value) return item;","      }","      return null;","    } else if (typeof propOrFn === 'function') {","      for (const [key, val] of this) {","        if (propOrFn(val, key, this)) return val;","      }","      return null;","    } else {","      throw new Error('First argument must be a property string or a function.');","    }","  }","","  /* eslint-disable max-len */","  /**","   * Searches for the key of a single item where its specified property's value is identical to the given value","   * (`item[prop] === value`), or the given function returns a truthy value. In the latter case, this is identical to","   * [Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).","   * @param {string|Function} propOrFn The property to test against, or the function to test with","   * @param {*} [value] The expected value - only applicable and required if using a property for the first argument","   * @returns {*}","   * @example","   * collection.findKey('username', 'Bob');","   * @example","   * collection.findKey(val => val.username === 'Bob');","   */","  /* eslint-enable max-len */","  findKey(propOrFn, value) {","    if (typeof propOrFn === 'string') {","      if (typeof value === 'undefined') throw new Error('Value must be specified.');","      for (const [key, val] of this) {","        if (val[propOrFn] === value) return key;","      }","      return null;","    } else if (typeof propOrFn === 'function') {","      for (const [key, val] of this) {","        if (propOrFn(val, key, this)) return key;","      }","      return null;","    } else {","      throw new Error('First argument must be a property string or a function.');","    }","  }","","  /**","   * Searches for the existence of a single item where its specified property's value is identical to the given value","   * (`item[prop] === value`).","   * <warn>Do not use this to check for an item by its ID. Instead, use `collection.has(id)`. See","   * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has) for details.</warn>","   * @param {string} prop The property to test against","   * @param {*} value The expected value","   * @returns {boolean}","   * @example","   * if (collection.exists('username', 'Bob')) {","   *  console.log('user here!');","   * }","   */","  exists(prop, value) {","    if (prop === 'id') throw new RangeError('Don\\'t use .exists() with IDs. Instead, use .has(id).');","    return Boolean(this.find(prop, value));","  }","","  /**","   * Identical to","   * [Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),","   * but returns a Collection instead of an Array.","   * @param {Function} fn Function used to test (should return a boolean)","   * @param {Object} [thisArg] Value to use as `this` when executing function","   * @returns {Collection}","   */","  filter(fn, thisArg) {","    if (thisArg) fn = fn.bind(thisArg);","    const results = new Collection();","    for (const [key, val] of this) {","      if (fn(val, key, this)) results.set(key, val);","    }","    return results;","  }","","  /**","   * Identical to","   * [Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).","   * @param {Function} fn Function used to test (should return a boolean)","   * @param {Object} [thisArg] Value to use as `this` when executing function","   * @returns {Array}","   */","  filterArray(fn, thisArg) {","    if (thisArg) fn = fn.bind(thisArg);","    const results = [];","    for (const [key, val] of this) {","      if (fn(val, key, this)) results.push(val);","    }","    return results;","  }","","  /**","   * Identical to","   * [Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).","   * @param {Function} fn Function that produces an element of the new array, taking three arguments","   * @param {*} [thisArg] Value to use as `this` when executing function","   * @returns {Array}","   */","  map(fn, thisArg) {","    if (thisArg) fn = fn.bind(thisArg);","    const arr = new Array(this.size);","    let i = 0;","    for (const [key, val] of this) arr[i++] = fn(val, key, this);","    return arr;","  }","","  /**","   * Identical to","   * [Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).","   * @param {Function} fn Function used to test (should return a boolean)","   * @param {Object} [thisArg] Value to use as `this` when executing function","   * @returns {boolean}","   */","  some(fn, thisArg) {","    if (thisArg) fn = fn.bind(thisArg);","    for (const [key, val] of this) {","      if (fn(val, key, this)) return true;","    }","    return false;","  }","","  /**","   * Identical to","   * [Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).","   * @param {Function} fn Function used to test (should return a boolean)","   * @param {Object} [thisArg] Value to use as `this` when executing function","   * @returns {boolean}","   */","  every(fn, thisArg) {","    if (thisArg) fn = fn.bind(thisArg);","    for (const [key, val] of this) {","      if (!fn(val, key, this)) return false;","    }","    return true;","  }","","  /**","   * Identical to","   * [Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).","   * @param {Function} fn Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,","   * and `collection`","   * @param {*} [initialValue] Starting value for the accumulator","   * @returns {*}","   */","  reduce(fn, initialValue) {","    let accumulator;","    if (typeof initialValue !== 'undefined') {","      accumulator = initialValue;","      for (const [key, val] of this) accumulator = fn(accumulator, val, key, this);","    } else {","      let first = true;","      for (const [key, val] of this) {","        if (first) {","          accumulator = val;","          first = false;","          continue;","        }","        accumulator = fn(accumulator, val, key, this);","      }","    }","    return accumulator;","  }","","  /**","   * Combines this collection with others into a new collection. None of the source collections are modified.","   * @param {...Collection} collections Collections to merge","   * @returns {Collection}","   * @example const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);","   */","  concat(...collections) {","    const newColl = new this.constructor();","    for (const [key, val] of this) newColl.set(key, val);","    for (const coll of collections) {","      for (const [key, val] of coll) newColl.set(key, val);","    }","    return newColl;","  }","","  /**","   * Calls the `delete()` method on all items that have it.","   * @returns {Promise[]}","   */","  deleteAll() {","    const returns = [];","    for (const item of this.values()) {","      if (item.delete) returns.push(item.delete());","    }","    return returns;","  }","","  /**","   * Checks if this collection shares identical key-value pairings with another.","   * This is different to checking for equality using equal-signs, because","   * the collections may be different objects, but contain the same data.","   * @param {Collection} collection Collection to compare with","   * @returns {boolean} Whether the collections have identical contents","   */","  equals(collection) {","    if (!collection) return false;","    if (this === collection) return true;","    if (this.size !== collection.size) return false;","    return !this.find((value, key) => {","      const testVal = collection.get(key);","      return testVal !== value || (testVal === undefined && !collection.has(key));","    });","  }","}","","module.exports = Collection;",""],"l":{"8":0,"15":0,"22":0,"26":0,"27":0,"28":0,"32":0,"33":0,"34":0,"44":0,"45":0,"55":0,"56":0,"64":0,"72":0,"81":0,"82":0,"91":0,"92":0,"101":0,"102":0,"111":0,"112":0,"125":0,"126":0,"127":0,"128":0,"129":0,"131":0,"149":0,"150":0,"151":0,"152":0,"153":0,"155":0,"156":0,"157":0,"158":0,"160":0,"162":0,"181":0,"182":0,"183":0,"184":0,"186":0,"187":0,"188":0,"189":0,"191":0,"193":0,"211":0,"212":0,"224":0,"225":0,"226":0,"227":0,"229":0,"240":0,"241":0,"242":0,"243":0,"245":0,"256":0,"257":0,"258":0,"259":0,"260":0,"271":0,"272":0,"273":0,"275":0,"286":0,"287":0,"288":0,"290":0,"302":0,"303":0,"304":0,"305":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"314":0,"317":0,"327":0,"328":0,"329":0,"330":0,"332":0,"340":0,"341":0,"342":0,"344":0,"355":0,"356":0,"357":0,"358":0,"359":0,"360":0,"365":1}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/webpack.config.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/webpack.config.js","s":{"1":2,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":6,"column":0},"end":{"line":6,"column":35}},"2":{"start":{"line":7,"column":0},"end":{"line":7,"column":66}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":50}},"4":{"start":{"line":10,"column":0},"end":{"line":41,"column":2}},"5":{"start":{"line":11,"column":2},"end":{"line":13,"column":4}},"6":{"start":{"line":15,"column":2},"end":{"line":15,"column":92}},"7":{"start":{"line":15,"column":22},"end":{"line":15,"column":92}},"8":{"start":{"line":17,"column":2},"end":{"line":17,"column":130}},"9":{"start":{"line":19,"column":2},"end":{"line":40,"column":4}},"10":{"start":{"line":43,"column":0},"end":{"line":43,"column":77}}},"branchMap":{"1":{"line":15,"type":"if","locations":[{"start":{"line":15,"column":2},"end":{"line":15,"column":2}},{"start":{"line":15,"column":2},"end":{"line":15,"column":2}}]},"2":{"line":17,"type":"cond-expr","locations":[{"start":{"line":17,"column":75},"end":{"line":17,"column":77}},{"start":{"line":17,"column":80},"end":{"line":17,"column":93}}]},"3":{"line":17,"type":"cond-expr","locations":[{"start":{"line":17,"column":113},"end":{"line":17,"column":119}},{"start":{"line":17,"column":122},"end":{"line":17,"column":124}}]}},"code":["/*","  ONLY RUN BUILDS WITH `npm run web-dist`!","  DO NOT USE NORMAL WEBPACK! IT WILL NOT WORK!","*/","","const webpack = require('webpack');","const createVariants = require('parallel-webpack').createVariants;","const version = require('./package.json').version;","","const createConfig = (options) => {","  const plugins = [","    new webpack.DefinePlugin({ 'global.GENTLY': false }),","  ];","","  if (options.minify) plugins.push(new webpack.optimize.UglifyJsPlugin({ minimize: true }));","","  const filename = `./webpack/discord${process.env.VERSIONED === 'false' ? '' : '.' + version}${options.minify ? '.min' : ''}.js`; // eslint-disable-line","","  return {","    entry: './src/index.js',","    output: {","      path: __dirname,","      filename,","    },","    module: {","      rules: [","        { test: /\\.md$/, loader: 'ignore-loader' },","      ],","    },","    node: {","      fs: 'empty',","      dns: 'mock',","      tls: 'mock',","      child_process: 'empty',","      dgram: 'empty',","      zlib: 'empty',","      __dirname: true,","    },","    plugins,","  };","};","","module.exports = createVariants({}, { minify: [false, true] }, createConfig);",""],"l":{"6":2,"7":0,"8":0,"10":0,"11":0,"15":0,"17":0,"19":0,"43":0}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/ClientDataManager.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/ClientDataManager.js","s":{"1":2,"2":2,"3":2,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"fnMap":{"1":{"name":"(anonymous_1)","line":13,"loc":{"start":{"line":13,"column":13},"end":{"line":13,"column":22}}},"2":{"name":"(anonymous_2)","line":17,"loc":{"start":{"line":17,"column":15},"end":{"line":17,"column":18}}},"3":{"name":"(anonymous_3)","line":21,"loc":{"start":{"line":21,"column":10},"end":{"line":21,"column":17}}},"4":{"name":"(anonymous_4)","line":41,"loc":{"start":{"line":41,"column":9},"end":{"line":41,"column":16}}},"5":{"name":"(anonymous_5)","line":48,"loc":{"start":{"line":48,"column":12},"end":{"line":48,"column":26}}},"6":{"name":"(anonymous_6)","line":77,"loc":{"start":{"line":77,"column":10},"end":{"line":77,"column":24}}},"7":{"name":"(anonymous_7)","line":91,"loc":{"start":{"line":91,"column":11},"end":{"line":91,"column":19}}},"8":{"name":"(anonymous_8)","line":97,"loc":{"start":{"line":97,"column":11},"end":{"line":97,"column":19}}},"9":{"name":"(anonymous_9)","line":103,"loc":{"start":{"line":103,"column":10},"end":{"line":103,"column":17}}},"10":{"name":"(anonymous_10)","line":107,"loc":{"start":{"line":107,"column":13},"end":{"line":107,"column":23}}},"11":{"name":"(anonymous_11)","line":112,"loc":{"start":{"line":112,"column":13},"end":{"line":112,"column":37}}},"12":{"name":"(anonymous_12)","line":118,"loc":{"start":{"line":118,"column":15},"end":{"line":118,"column":41}}},"13":{"name":"(anonymous_13)","line":122,"loc":{"start":{"line":122,"column":13},"end":{"line":122,"column":37}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":47}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":51}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":43}},"5":{"start":{"line":5,"column":0},"end":{"line":5,"column":53}},"6":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}},"7":{"start":{"line":7,"column":0},"end":{"line":7,"column":57}},"8":{"start":{"line":8,"column":0},"end":{"line":8,"column":59}},"9":{"start":{"line":9,"column":0},"end":{"line":9,"column":59}},"10":{"start":{"line":10,"column":0},"end":{"line":10,"column":63}},"11":{"start":{"line":14,"column":4},"end":{"line":14,"column":25}},"12":{"start":{"line":18,"column":4},"end":{"line":18,"column":60}},"13":{"start":{"line":22,"column":4},"end":{"line":22,"column":52}},"14":{"start":{"line":23,"column":4},"end":{"line":23,"column":47}},"15":{"start":{"line":24,"column":4},"end":{"line":24,"column":44}},"16":{"start":{"line":25,"column":4},"end":{"line":36,"column":5}},"17":{"start":{"line":31,"column":6},"end":{"line":35,"column":7}},"18":{"start":{"line":32,"column":8},"end":{"line":32,"column":101}},"19":{"start":{"line":32,"column":42},"end":{"line":32,"column":97}},"20":{"start":{"line":34,"column":8},"end":{"line":34,"column":63}},"21":{"start":{"line":38,"column":4},"end":{"line":38,"column":17}},"22":{"start":{"line":42,"column":4},"end":{"line":42,"column":78}},"23":{"start":{"line":42,"column":40},"end":{"line":42,"column":78}},"24":{"start":{"line":43,"column":4},"end":{"line":43,"column":45}},"25":{"start":{"line":44,"column":4},"end":{"line":44,"column":41}},"26":{"start":{"line":45,"column":4},"end":{"line":45,"column":16}},"27":{"start":{"line":49,"column":4},"end":{"line":49,"column":54}},"28":{"start":{"line":50,"column":4},"end":{"line":50,"column":16}},"29":{"start":{"line":51,"column":4},"end":{"line":66,"column":5}},"30":{"start":{"line":52,"column":6},"end":{"line":52,"column":49}},"31":{"start":{"line":53,"column":11},"end":{"line":66,"column":5}},"32":{"start":{"line":54,"column":6},"end":{"line":54,"column":54}},"33":{"start":{"line":56,"column":6},"end":{"line":56,"column":61}},"34":{"start":{"line":57,"column":6},"end":{"line":65,"column":7}},"35":{"start":{"line":58,"column":8},"end":{"line":64,"column":9}},"36":{"start":{"line":59,"column":10},"end":{"line":59,"column":49}},"37":{"start":{"line":60,"column":10},"end":{"line":60,"column":50}},"38":{"start":{"line":61,"column":15},"end":{"line":64,"column":9}},"39":{"start":{"line":62,"column":10},"end":{"line":62,"column":50}},"40":{"start":{"line":63,"column":10},"end":{"line":63,"column":50}},"41":{"start":{"line":68,"column":4},"end":{"line":72,"column":5}},"42":{"start":{"line":69,"column":6},"end":{"line":69,"column":97}},"43":{"start":{"line":69,"column":38},"end":{"line":69,"column":97}},"44":{"start":{"line":70,"column":6},"end":{"line":70,"column":52}},"45":{"start":{"line":71,"column":6},"end":{"line":71,"column":21}},"46":{"start":{"line":74,"column":4},"end":{"line":74,"column":16}},"47":{"start":{"line":78,"column":4},"end":{"line":78,"column":46}},"48":{"start":{"line":79,"column":4},"end":{"line":86,"column":5}},"49":{"start":{"line":80,"column":6},"end":{"line":80,"column":41}},"50":{"start":{"line":81,"column":6},"end":{"line":81,"column":67}},"51":{"start":{"line":82,"column":6},"end":{"line":82,"column":40}},"52":{"start":{"line":83,"column":6},"end":{"line":83,"column":19}},"53":{"start":{"line":84,"column":11},"end":{"line":86,"column":5}},"54":{"start":{"line":85,"column":6},"end":{"line":85,"column":39}},"55":{"start":{"line":88,"column":4},"end":{"line":88,"column":16}},"56":{"start":{"line":92,"column":4},"end":{"line":92,"column":57}},"57":{"start":{"line":92,"column":50},"end":{"line":92,"column":57}},"58":{"start":{"line":93,"column":4},"end":{"line":93,"column":65}},"59":{"start":{"line":94,"column":4},"end":{"line":94,"column":40}},"60":{"start":{"line":98,"column":4},"end":{"line":98,"column":53}},"61":{"start":{"line":99,"column":4},"end":{"line":99,"column":40}},"62":{"start":{"line":100,"column":4},"end":{"line":100,"column":90}},"63":{"start":{"line":100,"column":35},"end":{"line":100,"column":90}},"64":{"start":{"line":104,"column":4},"end":{"line":104,"column":38}},"65":{"start":{"line":108,"column":4},"end":{"line":108,"column":44}},"66":{"start":{"line":109,"column":4},"end":{"line":109,"column":83}},"67":{"start":{"line":109,"column":41},"end":{"line":109,"column":83}},"68":{"start":{"line":113,"column":4},"end":{"line":113,"column":47}},"69":{"start":{"line":114,"column":4},"end":{"line":114,"column":32}},"70":{"start":{"line":115,"column":4},"end":{"line":115,"column":96}},"71":{"start":{"line":115,"column":24},"end":{"line":115,"column":96}},"72":{"start":{"line":119,"column":4},"end":{"line":119,"column":34}},"73":{"start":{"line":123,"column":4},"end":{"line":123,"column":47}},"74":{"start":{"line":124,"column":4},"end":{"line":124,"column":32}},"75":{"start":{"line":125,"column":4},"end":{"line":125,"column":82}},"76":{"start":{"line":129,"column":0},"end":{"line":129,"column":35}}},"branchMap":{"1":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":25,"column":4}},{"start":{"line":25,"column":4},"end":{"line":25,"column":4}}]},"2":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":8},"end":{"line":25,"column":22}},{"start":{"line":25,"column":26},"end":{"line":25,"column":34}}]},"3":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":6},"end":{"line":31,"column":6}},{"start":{"line":31,"column":6},"end":{"line":31,"column":6}}]},"4":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":4},"end":{"line":42,"column":4}},{"start":{"line":42,"column":4},"end":{"line":42,"column":4}}]},"5":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":4},"end":{"line":51,"column":4}},{"start":{"line":51,"column":4},"end":{"line":51,"column":4}}]},"6":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":11},"end":{"line":53,"column":11}},{"start":{"line":53,"column":11},"end":{"line":53,"column":11}}]},"7":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":14},"end":{"line":56,"column":19}},{"start":{"line":56,"column":23},"end":{"line":56,"column":60}}]},"8":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":6},"end":{"line":57,"column":6}},{"start":{"line":57,"column":6},"end":{"line":57,"column":6}}]},"9":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":8},"end":{"line":58,"column":8}},{"start":{"line":58,"column":8},"end":{"line":58,"column":8}}]},"10":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":15},"end":{"line":61,"column":15}},{"start":{"line":61,"column":15},"end":{"line":61,"column":15}}]},"11":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":4},"end":{"line":68,"column":4}},{"start":{"line":68,"column":4},"end":{"line":68,"column":4}}]},"12":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":6},"end":{"line":69,"column":6}},{"start":{"line":69,"column":6},"end":{"line":69,"column":6}}]},"13":{"line":69,"type":"binary-expr","locations":[{"start":{"line":69,"column":10},"end":{"line":69,"column":24}},{"start":{"line":69,"column":28},"end":{"line":69,"column":36}}]},"14":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":4},"end":{"line":79,"column":4}},{"start":{"line":79,"column":4},"end":{"line":79,"column":4}}]},"15":{"line":79,"type":"binary-expr","locations":[{"start":{"line":79,"column":8},"end":{"line":79,"column":12}},{"start":{"line":79,"column":16},"end":{"line":79,"column":24}}]},"16":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":11},"end":{"line":84,"column":11}},{"start":{"line":84,"column":11},"end":{"line":84,"column":11}}]},"17":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":4},"end":{"line":92,"column":4}},{"start":{"line":92,"column":4},"end":{"line":92,"column":4}}]},"18":{"line":92,"type":"binary-expr","locations":[{"start":{"line":92,"column":10},"end":{"line":92,"column":32}},{"start":{"line":92,"column":36},"end":{"line":92,"column":47}}]},"19":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":4},"end":{"line":100,"column":4}},{"start":{"line":100,"column":4},"end":{"line":100,"column":4}}]},"20":{"line":100,"type":"binary-expr","locations":[{"start":{"line":100,"column":8},"end":{"line":100,"column":15}},{"start":{"line":100,"column":19},"end":{"line":100,"column":33}}]},"21":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":4},"end":{"line":109,"column":4}},{"start":{"line":109,"column":4},"end":{"line":109,"column":4}}]},"22":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":4},"end":{"line":115,"column":4}},{"start":{"line":115,"column":4},"end":{"line":115,"column":4}}]}},"code":["const Constants = require('../util/Constants');","const cloneObject = require('../util/CloneObject');","const Guild = require('../structures/Guild');","const User = require('../structures/User');","const DMChannel = require('../structures/DMChannel');","const Emoji = require('../structures/Emoji');","const TextChannel = require('../structures/TextChannel');","const VoiceChannel = require('../structures/VoiceChannel');","const GuildChannel = require('../structures/GuildChannel');","const GroupDMChannel = require('../structures/GroupDMChannel');","","class ClientDataManager {","  constructor(client) {","    this.client = client;","  }","","  get pastReady() {","    return this.client.ws.status === Constants.Status.READY;","  }","","  newGuild(data) {","    const already = this.client.guilds.has(data.id);","    const guild = new Guild(this.client, data);","    this.client.guilds.set(guild.id, guild);","    if (this.pastReady && !already) {","      /**","       * Emitted whenever the client joins a guild.","       * @event Client#guildCreate","       * @param {Guild} guild The created guild","       */","      if (this.client.options.fetchAllMembers) {","        guild.fetchMembers().then(() => { this.client.emit(Constants.Events.GUILD_CREATE, guild); });","      } else {","        this.client.emit(Constants.Events.GUILD_CREATE, guild);","      }","    }","","    return guild;","  }","","  newUser(data) {","    if (this.client.users.has(data.id)) return this.client.users.get(data.id);","    const user = new User(this.client, data);","    this.client.users.set(user.id, user);","    return user;","  }","","  newChannel(data, guild) {","    const already = this.client.channels.has(data.id);","    let channel;","    if (data.type === Constants.ChannelTypes.DM) {","      channel = new DMChannel(this.client, data);","    } else if (data.type === Constants.ChannelTypes.groupDM) {","      channel = new GroupDMChannel(this.client, data);","    } else {","      guild = guild || this.client.guilds.get(data.guild_id);","      if (guild) {","        if (data.type === Constants.ChannelTypes.text) {","          channel = new TextChannel(guild, data);","          guild.channels.set(channel.id, channel);","        } else if (data.type === Constants.ChannelTypes.voice) {","          channel = new VoiceChannel(guild, data);","          guild.channels.set(channel.id, channel);","        }","      }","    }","","    if (channel) {","      if (this.pastReady && !already) this.client.emit(Constants.Events.CHANNEL_CREATE, channel);","      this.client.channels.set(channel.id, channel);","      return channel;","    }","","    return null;","  }","","  newEmoji(data, guild) {","    const already = guild.emojis.has(data.id);","    if (data && !already) {","      let emoji = new Emoji(guild, data);","      this.client.emit(Constants.Events.GUILD_EMOJI_CREATE, emoji);","      guild.emojis.set(emoji.id, emoji);","      return emoji;","    } else if (already) {","      return guild.emojis.get(data.id);","    }","","    return null;","  }","","  killEmoji(emoji) {","    if (!(emoji instanceof Emoji && emoji.guild)) return;","    this.client.emit(Constants.Events.GUILD_EMOJI_DELETE, emoji);","    emoji.guild.emojis.delete(emoji.id);","  }","","  killGuild(guild) {","    const already = this.client.guilds.has(guild.id);","    this.client.guilds.delete(guild.id);","    if (already && this.pastReady) this.client.emit(Constants.Events.GUILD_DELETE, guild);","  }","","  killUser(user) {","    this.client.users.delete(user.id);","  }","","  killChannel(channel) {","    this.client.channels.delete(channel.id);","    if (channel instanceof GuildChannel) channel.guild.channels.delete(channel.id);","  }","","  updateGuild(currentGuild, newData) {","    const oldGuild = cloneObject(currentGuild);","    currentGuild.setup(newData);","    if (this.pastReady) this.client.emit(Constants.Events.GUILD_UPDATE, oldGuild, currentGuild);","  }","","  updateChannel(currentChannel, newData) {","    currentChannel.setup(newData);","  }","","  updateEmoji(currentEmoji, newData) {","    const oldEmoji = cloneObject(currentEmoji);","    currentEmoji.setup(newData);","    this.client.emit(Constants.Events.GUILD_EMOJI_UPDATE, oldEmoji, currentEmoji);","  }","}","","module.exports = ClientDataManager;",""],"l":{"1":2,"2":2,"3":2,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"14":0,"18":0,"22":0,"23":0,"24":0,"25":0,"31":0,"32":0,"34":0,"38":0,"42":0,"43":0,"44":0,"45":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"68":0,"69":0,"70":0,"71":0,"74":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"88":0,"92":0,"93":0,"94":0,"98":0,"99":0,"100":0,"104":0,"108":0,"109":0,"113":0,"114":0,"115":0,"119":0,"123":0,"124":0,"125":0,"129":0}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/util/CloneObject.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/util/CloneObject.js","s":{"1":1,"2":0,"3":0,"4":0},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"cloneObject","line":1,"loc":{"start":{"line":1,"column":17},"end":{"line":1,"column":43}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":5,"column":2}},"2":{"start":{"line":2,"column":2},"end":{"line":2,"column":36}},"3":{"start":{"line":3,"column":2},"end":{"line":3,"column":29}},"4":{"start":{"line":4,"column":2},"end":{"line":4,"column":16}}},"branchMap":{},"code":["module.exports = function cloneObject(obj) {","  const cloned = Object.create(obj);","  Object.assign(cloned, obj);","  return cloned;","};",""],"l":{"1":1,"2":0,"3":0,"4":0}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/Guild.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/Guild.js","s":{"1":4,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0,0,0,0,0,0,0,0,0,0,0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":28}}},"2":{"name":"(anonymous_2)","line":74,"loc":{"start":{"line":74,"column":7},"end":{"line":74,"column":14}}},"3":{"name":"(anonymous_3)","line":219,"loc":{"start":{"line":219,"column":22},"end":{"line":219,"column":25}}},"4":{"name":"(anonymous_4)","line":228,"loc":{"start":{"line":228,"column":15},"end":{"line":228,"column":18}}},"5":{"name":"(anonymous_5)","line":237,"loc":{"start":{"line":237,"column":14},"end":{"line":237,"column":17}}},"6":{"name":"(anonymous_6)","line":246,"loc":{"start":{"line":246,"column":13},"end":{"line":246,"column":16}}},"7":{"name":"(anonymous_7)","line":256,"loc":{"start":{"line":256,"column":15},"end":{"line":256,"column":18}}},"8":{"name":"(anonymous_8)","line":266,"loc":{"start":{"line":266,"column":11},"end":{"line":266,"column":14}}},"9":{"name":"(anonymous_9)","line":275,"loc":{"start":{"line":275,"column":21},"end":{"line":275,"column":24}}},"10":{"name":"(anonymous_10)","line":285,"loc":{"start":{"line":285,"column":20},"end":{"line":285,"column":23}}},"11":{"name":"(anonymous_11)","line":297,"loc":{"start":{"line":297,"column":8},"end":{"line":297,"column":15}}},"12":{"name":"(anonymous_12)","line":305,"loc":{"start":{"line":305,"column":11},"end":{"line":305,"column":14}}},"13":{"name":"(anonymous_13)","line":313,"loc":{"start":{"line":313,"column":14},"end":{"line":313,"column":17}}},"14":{"name":"(anonymous_14)","line":321,"loc":{"start":{"line":321,"column":15},"end":{"line":321,"column":18}}},"15":{"name":"(anonymous_15)","line":330,"loc":{"start":{"line":330,"column":13},"end":{"line":330,"column":20}}},"16":{"name":"(anonymous_16)","line":344,"loc":{"start":{"line":344,"column":14},"end":{"line":344,"column":27}}},"17":{"name":"(anonymous_17)","line":391,"loc":{"start":{"line":391,"column":6},"end":{"line":391,"column":13}}},"18":{"name":"(anonymous_18)","line":405,"loc":{"start":{"line":405,"column":9},"end":{"line":405,"column":16}}},"19":{"name":"(anonymous_19)","line":419,"loc":{"start":{"line":419,"column":11},"end":{"line":419,"column":20}}},"20":{"name":"(anonymous_20)","line":433,"loc":{"start":{"line":433,"column":22},"end":{"line":433,"column":42}}},"21":{"name":"(anonymous_21)","line":447,"loc":{"start":{"line":447,"column":15},"end":{"line":447,"column":28}}},"22":{"name":"(anonymous_22)","line":461,"loc":{"start":{"line":461,"column":15},"end":{"line":461,"column":28}}},"23":{"name":"(anonymous_23)","line":475,"loc":{"start":{"line":475,"column":9},"end":{"line":475,"column":16}}},"24":{"name":"(anonymous_24)","line":489,"loc":{"start":{"line":489,"column":10},"end":{"line":489,"column":18}}},"25":{"name":"(anonymous_25)","line":503,"loc":{"start":{"line":503,"column":11},"end":{"line":503,"column":20}}},"26":{"name":"(anonymous_26)","line":519,"loc":{"start":{"line":519,"column":5},"end":{"line":519,"column":28}}},"27":{"name":"(anonymous_27)","line":533,"loc":{"start":{"line":533,"column":7},"end":{"line":533,"column":14}}},"28":{"name":"(anonymous_28)","line":553,"loc":{"start":{"line":553,"column":14},"end":{"line":553,"column":34}}},"29":{"name":"(anonymous_29)","line":562,"loc":{"start":{"line":562,"column":6},"end":{"line":562,"column":9}}},"30":{"name":"(anonymous_30)","line":578,"loc":{"start":{"line":578,"column":15},"end":{"line":578,"column":40}}},"31":{"name":"(anonymous_31)","line":597,"loc":{"start":{"line":597,"column":12},"end":{"line":597,"column":19}}},"32":{"name":"(anonymous_32)","line":619,"loc":{"start":{"line":619,"column":13},"end":{"line":619,"column":32}}},"33":{"name":"(anonymous_33)","line":636,"loc":{"start":{"line":636,"column":13},"end":{"line":636,"column":21}}},"34":{"name":"(anonymous_34)","line":650,"loc":{"start":{"line":650,"column":7},"end":{"line":650,"column":10}}},"35":{"name":"(anonymous_35)","line":663,"loc":{"start":{"line":663,"column":8},"end":{"line":663,"column":11}}},"36":{"name":"(anonymous_36)","line":673,"loc":{"start":{"line":673,"column":17},"end":{"line":673,"column":34}}},"37":{"name":"(anonymous_37)","line":713,"loc":{"start":{"line":713,"column":8},"end":{"line":713,"column":16}}},"38":{"name":"(anonymous_38)","line":750,"loc":{"start":{"line":750,"column":10},"end":{"line":750,"column":13}}},"39":{"name":"(anonymous_39)","line":754,"loc":{"start":{"line":754,"column":12},"end":{"line":754,"column":42}}},"40":{"name":"(anonymous_40)","line":790,"loc":{"start":{"line":790,"column":15},"end":{"line":790,"column":30}}},"41":{"name":"(anonymous_41)","line":814,"loc":{"start":{"line":814,"column":15},"end":{"line":814,"column":29}}},"42":{"name":"(anonymous_42)","line":819,"loc":{"start":{"line":819,"column":20},"end":{"line":819,"column":37}}},"43":{"name":"(anonymous_43)","line":833,"loc":{"start":{"line":833,"column":14},"end":{"line":833,"column":29}}},"44":{"name":"(anonymous_44)","line":841,"loc":{"start":{"line":841,"column":14},"end":{"line":841,"column":17}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":31}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":31}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":33}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":48}},"5":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}},"6":{"start":{"line":6,"column":0},"end":{"line":6,"column":47}},"7":{"start":{"line":7,"column":0},"end":{"line":7,"column":49}},"8":{"start":{"line":8,"column":0},"end":{"line":8,"column":51}},"9":{"start":{"line":9,"column":0},"end":{"line":9,"column":51}},"10":{"start":{"line":24,"column":4},"end":{"line":24,"column":61}},"11":{"start":{"line":30,"column":4},"end":{"line":30,"column":36}},"12":{"start":{"line":36,"column":4},"end":{"line":36,"column":37}},"13":{"start":{"line":42,"column":4},"end":{"line":42,"column":34}},"14":{"start":{"line":48,"column":4},"end":{"line":48,"column":38}},"15":{"start":{"line":50,"column":4},"end":{"line":50,"column":22}},"16":{"start":{"line":50,"column":15},"end":{"line":50,"column":22}},"17":{"start":{"line":51,"column":4},"end":{"line":66,"column":5}},"18":{"start":{"line":56,"column":6},"end":{"line":56,"column":29}},"19":{"start":{"line":62,"column":6},"end":{"line":62,"column":24}},"20":{"start":{"line":64,"column":6},"end":{"line":64,"column":28}},"21":{"start":{"line":65,"column":6},"end":{"line":65,"column":23}},"22":{"start":{"line":79,"column":4},"end":{"line":79,"column":26}},"23":{"start":{"line":85,"column":4},"end":{"line":85,"column":26}},"24":{"start":{"line":91,"column":4},"end":{"line":91,"column":30}},"25":{"start":{"line":97,"column":4},"end":{"line":97,"column":30}},"26":{"start":{"line":103,"column":4},"end":{"line":103,"column":61}},"27":{"start":{"line":109,"column":4},"end":{"line":109,"column":42}},"28":{"start":{"line":115,"column":4},"end":{"line":115,"column":34}},"29":{"start":{"line":121,"column":4},"end":{"line":121,"column":45}},"30":{"start":{"line":127,"column":4},"end":{"line":127,"column":35}},"31":{"start":{"line":128,"column":4},"end":{"line":128,"column":87}},"32":{"start":{"line":128,"column":37},"end":{"line":128,"column":87}},"33":{"start":{"line":134,"column":4},"end":{"line":134,"column":39}},"34":{"start":{"line":140,"column":4},"end":{"line":140,"column":44}},"35":{"start":{"line":146,"column":4},"end":{"line":146,"column":43}},"36":{"start":{"line":152,"column":4},"end":{"line":152,"column":53}},"37":{"start":{"line":158,"column":4},"end":{"line":158,"column":102}},"38":{"start":{"line":160,"column":4},"end":{"line":160,"column":22}},"39":{"start":{"line":161,"column":4},"end":{"line":161,"column":39}},"40":{"start":{"line":162,"column":4},"end":{"line":162,"column":57}},"41":{"start":{"line":164,"column":4},"end":{"line":167,"column":5}},"42":{"start":{"line":165,"column":6},"end":{"line":165,"column":27}},"43":{"start":{"line":166,"column":6},"end":{"line":166,"column":78}},"44":{"start":{"line":166,"column":44},"end":{"line":166,"column":78}},"45":{"start":{"line":169,"column":4},"end":{"line":175,"column":5}},"46":{"start":{"line":174,"column":6},"end":{"line":174,"column":35}},"47":{"start":{"line":177,"column":4},"end":{"line":180,"column":5}},"48":{"start":{"line":178,"column":6},"end":{"line":178,"column":28}},"49":{"start":{"line":179,"column":6},"end":{"line":179,"column":93}},"50":{"start":{"line":179,"column":43},"end":{"line":179,"column":93}},"51":{"start":{"line":182,"column":4},"end":{"line":188,"column":5}},"52":{"start":{"line":183,"column":6},"end":{"line":183,"column":25}},"53":{"start":{"line":184,"column":6},"end":{"line":187,"column":7}},"54":{"start":{"line":185,"column":8},"end":{"line":185,"column":45}},"55":{"start":{"line":186,"column":8},"end":{"line":186,"column":44}},"56":{"start":{"line":190,"column":4},"end":{"line":194,"column":5}},"57":{"start":{"line":191,"column":6},"end":{"line":193,"column":7}},"58":{"start":{"line":192,"column":8},"end":{"line":192,"column":54}},"59":{"start":{"line":196,"column":4},"end":{"line":196,"column":44}},"60":{"start":{"line":197,"column":4},"end":{"line":211,"column":5}},"61":{"start":{"line":198,"column":6},"end":{"line":210,"column":7}},"62":{"start":{"line":199,"column":8},"end":{"line":199,"column":65}},"63":{"start":{"line":200,"column":8},"end":{"line":200,"column":60}},"64":{"start":{"line":201,"column":8},"end":{"line":209,"column":9}},"65":{"start":{"line":202,"column":10},"end":{"line":202,"column":46}},"66":{"start":{"line":203,"column":10},"end":{"line":203,"column":46}},"67":{"start":{"line":204,"column":10},"end":{"line":204,"column":49}},"68":{"start":{"line":205,"column":10},"end":{"line":205,"column":49}},"69":{"start":{"line":206,"column":10},"end":{"line":206,"column":56}},"70":{"start":{"line":207,"column":10},"end":{"line":207,"column":56}},"71":{"start":{"line":208,"column":10},"end":{"line":208,"column":87}},"72":{"start":{"line":220,"column":4},"end":{"line":220,"column":47}},"73":{"start":{"line":229,"column":4},"end":{"line":229,"column":43}},"74":{"start":{"line":238,"column":4},"end":{"line":238,"column":42}},"75":{"start":{"line":247,"column":4},"end":{"line":247,"column":32}},"76":{"start":{"line":247,"column":20},"end":{"line":247,"column":32}},"77":{"start":{"line":248,"column":4},"end":{"line":248,"column":61}},"78":{"start":{"line":257,"column":4},"end":{"line":257,"column":34}},"79":{"start":{"line":257,"column":22},"end":{"line":257,"column":34}},"80":{"start":{"line":258,"column":4},"end":{"line":258,"column":65}},"81":{"start":{"line":267,"column":4},"end":{"line":267,"column":42}},"82":{"start":{"line":276,"column":4},"end":{"line":276,"column":41}},"83":{"start":{"line":276,"column":29},"end":{"line":276,"column":41}},"84":{"start":{"line":277,"column":4},"end":{"line":277,"column":62}},"85":{"start":{"line":286,"column":4},"end":{"line":286,"column":38}},"86":{"start":{"line":298,"column":4},"end":{"line":298,"column":63}},"87":{"start":{"line":306,"column":4},"end":{"line":306,"column":55}},"88":{"start":{"line":314,"column":4},"end":{"line":314,"column":58}},"89":{"start":{"line":322,"column":4},"end":{"line":322,"column":59}},"90":{"start":{"line":331,"column":4},"end":{"line":331,"column":95}},"91":{"start":{"line":331,"column":27},"end":{"line":331,"column":95}},"92":{"start":{"line":332,"column":4},"end":{"line":332,"column":50}},"93":{"start":{"line":333,"column":4},"end":{"line":333,"column":99}},"94":{"start":{"line":333,"column":15},"end":{"line":333,"column":99}},"95":{"start":{"line":334,"column":4},"end":{"line":334,"column":85}},"96":{"start":{"line":334,"column":35},"end":{"line":334,"column":85}},"97":{"start":{"line":335,"column":4},"end":{"line":335,"column":63}},"98":{"start":{"line":345,"column":4},"end":{"line":362,"column":7}},"99":{"start":{"line":346,"column":6},"end":{"line":346,"column":94}},"100":{"start":{"line":346,"column":29},"end":{"line":346,"column":94}},"101":{"start":{"line":347,"column":6},"end":{"line":350,"column":7}},"102":{"start":{"line":348,"column":8},"end":{"line":348,"column":22}},"103":{"start":{"line":349,"column":8},"end":{"line":349,"column":15}},"104":{"start":{"line":351,"column":6},"end":{"line":351,"column":34}},"105":{"start":{"line":352,"column":6},"end":{"line":359,"column":9}},"106":{"start":{"line":360,"column":6},"end":{"line":360,"column":26}},"107":{"start":{"line":361,"column":6},"end":{"line":361,"column":101}},"108":{"start":{"line":361,"column":35},"end":{"line":361,"column":87}},"109":{"start":{"line":392,"column":4},"end":{"line":392,"column":60}},"110":{"start":{"line":406,"column":4},"end":{"line":406,"column":31}},"111":{"start":{"line":420,"column":4},"end":{"line":420,"column":33}},"112":{"start":{"line":434,"column":4},"end":{"line":434,"column":44}},"113":{"start":{"line":448,"column":4},"end":{"line":448,"column":37}},"114":{"start":{"line":462,"column":4},"end":{"line":462,"column":37}},"115":{"start":{"line":476,"column":4},"end":{"line":476,"column":31}},"116":{"start":{"line":490,"column":4},"end":{"line":490,"column":32}},"117":{"start":{"line":504,"column":4},"end":{"line":504,"column":33}},"118":{"start":{"line":520,"column":4},"end":{"line":520,"column":75}},"119":{"start":{"line":534,"column":4},"end":{"line":534,"column":65}},"120":{"start":{"line":554,"column":4},"end":{"line":554,"column":80}},"121":{"start":{"line":554,"column":34},"end":{"line":554,"column":80}},"122":{"start":{"line":555,"column":4},"end":{"line":555,"column":71}},"123":{"start":{"line":563,"column":4},"end":{"line":563,"column":62}},"124":{"start":{"line":563,"column":31},"end":{"line":563,"column":62}},"125":{"start":{"line":579,"column":4},"end":{"line":579,"column":80}},"126":{"start":{"line":598,"column":4},"end":{"line":598,"column":66}},"127":{"start":{"line":599,"column":4},"end":{"line":599,"column":29}},"128":{"start":{"line":599,"column":15},"end":{"line":599,"column":29}},"129":{"start":{"line":600,"column":4},"end":{"line":600,"column":48}},"130":{"start":{"line":600,"column":31},"end":{"line":600,"column":46}},"131":{"start":{"line":620,"column":4},"end":{"line":628,"column":7}},"132":{"start":{"line":621,"column":6},"end":{"line":627,"column":7}},"133":{"start":{"line":622,"column":8},"end":{"line":622,"column":78}},"134":{"start":{"line":624,"column":8},"end":{"line":626,"column":10}},"135":{"start":{"line":625,"column":10},"end":{"line":625,"column":73}},"136":{"start":{"line":637,"column":4},"end":{"line":637,"column":66}},"137":{"start":{"line":637,"column":35},"end":{"line":637,"column":66}},"138":{"start":{"line":638,"column":4},"end":{"line":638,"column":55}},"139":{"start":{"line":651,"column":4},"end":{"line":651,"column":53}},"140":{"start":{"line":664,"column":4},"end":{"line":664,"column":54}},"141":{"start":{"line":674,"column":4},"end":{"line":677,"column":5}},"142":{"start":{"line":675,"column":6},"end":{"line":675,"column":34}},"143":{"start":{"line":676,"column":6},"end":{"line":676,"column":92}},"144":{"start":{"line":676,"column":17},"end":{"line":676,"column":92}},"145":{"start":{"line":679,"column":4},"end":{"line":679,"column":32}},"146":{"start":{"line":680,"column":4},"end":{"line":680,"column":96}},"147":{"start":{"line":680,"column":25},"end":{"line":680,"column":96}},"148":{"start":{"line":682,"column":4},"end":{"line":682,"column":61}},"149":{"start":{"line":683,"column":4},"end":{"line":683,"column":62}},"150":{"start":{"line":685,"column":4},"end":{"line":685,"column":112}},"151":{"start":{"line":685,"column":49},"end":{"line":685,"column":110}},"152":{"start":{"line":688,"column":4},"end":{"line":692,"column":5}},"153":{"start":{"line":689,"column":6},"end":{"line":689,"column":48}},"154":{"start":{"line":691,"column":6},"end":{"line":691,"column":47}},"155":{"start":{"line":694,"column":4},"end":{"line":694,"column":28}},"156":{"start":{"line":696,"column":4},"end":{"line":701,"column":5}},"157":{"start":{"line":697,"column":6},"end":{"line":700,"column":9}},"158":{"start":{"line":703,"column":4},"end":{"line":703,"column":76}},"159":{"start":{"line":714,"column":4},"end":{"line":727,"column":48}},"160":{"start":{"line":729,"column":4},"end":{"line":735,"column":5}},"161":{"start":{"line":730,"column":6},"end":{"line":734,"column":7}},"162":{"start":{"line":731,"column":8},"end":{"line":731,"column":75}},"163":{"start":{"line":731,"column":61},"end":{"line":731,"column":75}},"164":{"start":{"line":732,"column":13},"end":{"line":734,"column":7}},"165":{"start":{"line":733,"column":8},"end":{"line":733,"column":22}},"166":{"start":{"line":737,"column":4},"end":{"line":737,"column":17}},"167":{"start":{"line":751,"column":4},"end":{"line":751,"column":21}},"168":{"start":{"line":755,"column":4},"end":{"line":755,"column":57}},"169":{"start":{"line":756,"column":4},"end":{"line":756,"column":108}},"170":{"start":{"line":756,"column":43},"end":{"line":756,"column":108}},"171":{"start":{"line":758,"column":4},"end":{"line":758,"column":51}},"172":{"start":{"line":759,"column":4},"end":{"line":759,"column":52}},"173":{"start":{"line":760,"column":4},"end":{"line":760,"column":40}},"174":{"start":{"line":762,"column":4},"end":{"line":775,"column":5}},"175":{"start":{"line":763,"column":6},"end":{"line":763,"column":66}},"176":{"start":{"line":764,"column":6},"end":{"line":764,"column":42}},"177":{"start":{"line":765,"column":6},"end":{"line":765,"column":42}},"178":{"start":{"line":766,"column":6},"end":{"line":766,"column":45}},"179":{"start":{"line":767,"column":6},"end":{"line":767,"column":45}},"180":{"start":{"line":768,"column":6},"end":{"line":768,"column":52}},"181":{"start":{"line":769,"column":6},"end":{"line":769,"column":52}},"182":{"start":{"line":770,"column":6},"end":{"line":774,"column":7}},"183":{"start":{"line":771,"column":8},"end":{"line":771,"column":92}},"184":{"start":{"line":773,"column":8},"end":{"line":773,"column":113}},"185":{"start":{"line":782,"column":4},"end":{"line":784,"column":5}},"186":{"start":{"line":783,"column":6},"end":{"line":783,"column":66}},"187":{"start":{"line":786,"column":4},"end":{"line":786,"column":24}},"188":{"start":{"line":787,"column":4},"end":{"line":787,"column":18}},"189":{"start":{"line":791,"column":4},"end":{"line":791,"column":42}},"190":{"start":{"line":793,"column":4},"end":{"line":793,"column":47}},"191":{"start":{"line":793,"column":20},"end":{"line":793,"column":47}},"192":{"start":{"line":794,"column":4},"end":{"line":794,"column":70}},"193":{"start":{"line":794,"column":42},"end":{"line":794,"column":70}},"194":{"start":{"line":796,"column":4},"end":{"line":796,"column":108}},"195":{"start":{"line":798,"column":4},"end":{"line":806,"column":5}},"196":{"start":{"line":805,"column":6},"end":{"line":805,"column":80}},"197":{"start":{"line":808,"column":4},"end":{"line":811,"column":6}},"198":{"start":{"line":815,"column":4},"end":{"line":815,"column":40}},"199":{"start":{"line":816,"column":4},"end":{"line":816,"column":24}},"200":{"start":{"line":820,"column":4},"end":{"line":820,"column":42}},"201":{"start":{"line":821,"column":4},"end":{"line":830,"column":5}},"202":{"start":{"line":822,"column":6},"end":{"line":822,"column":33}},"203":{"start":{"line":829,"column":6},"end":{"line":829,"column":81}},"204":{"start":{"line":834,"column":4},"end":{"line":837,"column":5}},"205":{"start":{"line":835,"column":6},"end":{"line":835,"column":46}},"206":{"start":{"line":836,"column":6},"end":{"line":836,"column":13}},"207":{"start":{"line":838,"column":4},"end":{"line":838,"column":51}},"208":{"start":{"line":842,"column":4},"end":{"line":847,"column":5}},"209":{"start":{"line":843,"column":6},"end":{"line":846,"column":7}},"210":{"start":{"line":844,"column":8},"end":{"line":844,"column":32}},"211":{"start":{"line":845,"column":8},"end":{"line":845,"column":33}},"212":{"start":{"line":851,"column":0},"end":{"line":851,"column":23}}},"branchMap":{"1":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":4},"end":{"line":50,"column":4}},{"start":{"line":50,"column":4},"end":{"line":50,"column":4}}]},"2":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":4},"end":{"line":51,"column":4}},{"start":{"line":51,"column":4},"end":{"line":51,"column":4}}]},"3":{"line":103,"type":"binary-expr","locations":[{"start":{"line":103,"column":23},"end":{"line":103,"column":40}},{"start":{"line":103,"column":44},"end":{"line":103,"column":60}}]},"4":{"line":109,"type":"binary-expr","locations":[{"start":{"line":109,"column":17},"end":{"line":109,"column":27}},{"start":{"line":109,"column":31},"end":{"line":109,"column":41}}]},"5":{"line":158,"type":"cond-expr","locations":[{"start":{"line":158,"column":44},"end":{"line":158,"column":78}},{"start":{"line":158,"column":81},"end":{"line":158,"column":101}}]},"6":{"line":162,"type":"binary-expr","locations":[{"start":{"line":162,"column":20},"end":{"line":162,"column":33}},{"start":{"line":162,"column":37},"end":{"line":162,"column":50}},{"start":{"line":162,"column":54},"end":{"line":162,"column":56}}]},"7":{"line":164,"type":"if","locations":[{"start":{"line":164,"column":4},"end":{"line":164,"column":4}},{"start":{"line":164,"column":4},"end":{"line":164,"column":4}}]},"8":{"line":169,"type":"if","locations":[{"start":{"line":169,"column":4},"end":{"line":169,"column":4}},{"start":{"line":169,"column":4},"end":{"line":169,"column":4}}]},"9":{"line":177,"type":"if","locations":[{"start":{"line":177,"column":4},"end":{"line":177,"column":4}},{"start":{"line":177,"column":4},"end":{"line":177,"column":4}}]},"10":{"line":182,"type":"if","locations":[{"start":{"line":182,"column":4},"end":{"line":182,"column":4}},{"start":{"line":182,"column":4},"end":{"line":182,"column":4}}]},"11":{"line":190,"type":"if","locations":[{"start":{"line":190,"column":4},"end":{"line":190,"column":4}},{"start":{"line":190,"column":4},"end":{"line":190,"column":4}}]},"12":{"line":197,"type":"if","locations":[{"start":{"line":197,"column":4},"end":{"line":197,"column":4}},{"start":{"line":197,"column":4},"end":{"line":197,"column":4}}]},"13":{"line":201,"type":"if","locations":[{"start":{"line":201,"column":8},"end":{"line":201,"column":8}},{"start":{"line":201,"column":8},"end":{"line":201,"column":8}}]},"14":{"line":247,"type":"if","locations":[{"start":{"line":247,"column":4},"end":{"line":247,"column":4}},{"start":{"line":247,"column":4},"end":{"line":247,"column":4}}]},"15":{"line":257,"type":"if","locations":[{"start":{"line":257,"column":4},"end":{"line":257,"column":4}},{"start":{"line":257,"column":4},"end":{"line":257,"column":4}}]},"16":{"line":276,"type":"if","locations":[{"start":{"line":276,"column":4},"end":{"line":276,"column":4}},{"start":{"line":276,"column":4},"end":{"line":276,"column":4}}]},"17":{"line":277,"type":"binary-expr","locations":[{"start":{"line":277,"column":11},"end":{"line":277,"column":53}},{"start":{"line":277,"column":57},"end":{"line":277,"column":61}}]},"18":{"line":331,"type":"if","locations":[{"start":{"line":331,"column":4},"end":{"line":331,"column":4}},{"start":{"line":331,"column":4},"end":{"line":331,"column":4}}]},"19":{"line":333,"type":"if","locations":[{"start":{"line":333,"column":4},"end":{"line":333,"column":4}},{"start":{"line":333,"column":4},"end":{"line":333,"column":4}}]},"20":{"line":334,"type":"if","locations":[{"start":{"line":334,"column":4},"end":{"line":334,"column":4}},{"start":{"line":334,"column":4},"end":{"line":334,"column":4}}]},"21":{"line":346,"type":"if","locations":[{"start":{"line":346,"column":6},"end":{"line":346,"column":6}},{"start":{"line":346,"column":6},"end":{"line":346,"column":6}}]},"22":{"line":347,"type":"if","locations":[{"start":{"line":347,"column":6},"end":{"line":347,"column":6}},{"start":{"line":347,"column":6},"end":{"line":347,"column":6}}]},"23":{"line":554,"type":"if","locations":[{"start":{"line":554,"column":4},"end":{"line":554,"column":4}},{"start":{"line":554,"column":4},"end":{"line":554,"column":4}}]},"24":{"line":563,"type":"if","locations":[{"start":{"line":563,"column":4},"end":{"line":563,"column":4}},{"start":{"line":563,"column":4},"end":{"line":563,"column":4}}]},"25":{"line":599,"type":"if","locations":[{"start":{"line":599,"column":4},"end":{"line":599,"column":4}},{"start":{"line":599,"column":4},"end":{"line":599,"column":4}}]},"26":{"line":621,"type":"if","locations":[{"start":{"line":621,"column":6},"end":{"line":621,"column":6}},{"start":{"line":621,"column":6},"end":{"line":621,"column":6}}]},"27":{"line":637,"type":"if","locations":[{"start":{"line":637,"column":4},"end":{"line":637,"column":4}},{"start":{"line":637,"column":4},"end":{"line":637,"column":4}}]},"28":{"line":674,"type":"if","locations":[{"start":{"line":674,"column":4},"end":{"line":674,"column":4}},{"start":{"line":674,"column":4},"end":{"line":674,"column":4}}]},"29":{"line":676,"type":"if","locations":[{"start":{"line":676,"column":6},"end":{"line":676,"column":6}},{"start":{"line":676,"column":6},"end":{"line":676,"column":6}}]},"30":{"line":680,"type":"if","locations":[{"start":{"line":680,"column":4},"end":{"line":680,"column":4}},{"start":{"line":680,"column":4},"end":{"line":680,"column":4}}]},"31":{"line":685,"type":"binary-expr","locations":[{"start":{"line":685,"column":49},"end":{"line":685,"column":77}},{"start":{"line":685,"column":81},"end":{"line":685,"column":110}}]},"32":{"line":688,"type":"if","locations":[{"start":{"line":688,"column":4},"end":{"line":688,"column":4}},{"start":{"line":688,"column":4},"end":{"line":688,"column":4}}]},"33":{"line":699,"type":"cond-expr","locations":[{"start":{"line":699,"column":41},"end":{"line":699,"column":49}},{"start":{"line":699,"column":52},"end":{"line":699,"column":104}}]},"34":{"line":699,"type":"cond-expr","locations":[{"start":{"line":699,"column":97},"end":{"line":699,"column":98}},{"start":{"line":699,"column":101},"end":{"line":699,"column":103}}]},"35":{"line":715,"type":"binary-expr","locations":[{"start":{"line":715,"column":6},"end":{"line":715,"column":11}},{"start":{"line":716,"column":6},"end":{"line":716,"column":26}},{"start":{"line":717,"column":6},"end":{"line":717,"column":43}},{"start":{"line":718,"column":6},"end":{"line":718,"column":34}},{"start":{"line":719,"column":6},"end":{"line":719,"column":34}},{"start":{"line":720,"column":6},"end":{"line":720,"column":30}},{"start":{"line":721,"column":6},"end":{"line":721,"column":45}},{"start":{"line":722,"column":6},"end":{"line":722,"column":32}},{"start":{"line":723,"column":6},"end":{"line":723,"column":30}},{"start":{"line":724,"column":6},"end":{"line":724,"column":48}},{"start":{"line":725,"column":6},"end":{"line":725,"column":37}},{"start":{"line":726,"column":6},"end":{"line":726,"column":57}},{"start":{"line":727,"column":6},"end":{"line":727,"column":47}}]},"36":{"line":729,"type":"if","locations":[{"start":{"line":729,"column":4},"end":{"line":729,"column":4}},{"start":{"line":729,"column":4},"end":{"line":729,"column":4}}]},"37":{"line":730,"type":"if","locations":[{"start":{"line":730,"column":6},"end":{"line":730,"column":6}},{"start":{"line":730,"column":6},"end":{"line":730,"column":6}}]},"38":{"line":731,"type":"if","locations":[{"start":{"line":731,"column":8},"end":{"line":731,"column":8}},{"start":{"line":731,"column":8},"end":{"line":731,"column":8}}]},"39":{"line":732,"type":"if","locations":[{"start":{"line":732,"column":13},"end":{"line":732,"column":13}},{"start":{"line":732,"column":13},"end":{"line":732,"column":13}}]},"40":{"line":756,"type":"if","locations":[{"start":{"line":756,"column":4},"end":{"line":756,"column":4}},{"start":{"line":756,"column":4},"end":{"line":756,"column":4}}]},"41":{"line":758,"type":"binary-expr","locations":[{"start":{"line":758,"column":26},"end":{"line":758,"column":45}},{"start":{"line":758,"column":49},"end":{"line":758,"column":50}}]},"42":{"line":762,"type":"if","locations":[{"start":{"line":762,"column":4},"end":{"line":762,"column":4}},{"start":{"line":762,"column":4},"end":{"line":762,"column":4}}]},"43":{"line":762,"type":"binary-expr","locations":[{"start":{"line":762,"column":8},"end":{"line":762,"column":28}},{"start":{"line":762,"column":32},"end":{"line":762,"column":72}}]},"44":{"line":770,"type":"if","locations":[{"start":{"line":770,"column":6},"end":{"line":770,"column":6}},{"start":{"line":770,"column":6},"end":{"line":770,"column":6}}]},"45":{"line":782,"type":"if","locations":[{"start":{"line":782,"column":4},"end":{"line":782,"column":4}},{"start":{"line":782,"column":4},"end":{"line":782,"column":4}}]},"46":{"line":782,"type":"binary-expr","locations":[{"start":{"line":782,"column":8},"end":{"line":782,"column":56}},{"start":{"line":782,"column":60},"end":{"line":782,"column":69}},{"start":{"line":782,"column":73},"end":{"line":782,"column":82}}]},"47":{"line":793,"type":"if","locations":[{"start":{"line":793,"column":4},"end":{"line":793,"column":4}},{"start":{"line":793,"column":4},"end":{"line":793,"column":4}}]},"48":{"line":794,"type":"if","locations":[{"start":{"line":794,"column":4},"end":{"line":794,"column":4}},{"start":{"line":794,"column":4},"end":{"line":794,"column":4}}]},"49":{"line":796,"type":"binary-expr","locations":[{"start":{"line":796,"column":20},"end":{"line":796,"column":58}},{"start":{"line":796,"column":62},"end":{"line":796,"column":107}}]},"50":{"line":798,"type":"if","locations":[{"start":{"line":798,"column":4},"end":{"line":798,"column":4}},{"start":{"line":798,"column":4},"end":{"line":798,"column":4}}]},"51":{"line":798,"type":"binary-expr","locations":[{"start":{"line":798,"column":8},"end":{"line":798,"column":56}},{"start":{"line":798,"column":60},"end":{"line":798,"column":67}}]},"52":{"line":821,"type":"if","locations":[{"start":{"line":821,"column":4},"end":{"line":821,"column":4}},{"start":{"line":821,"column":4},"end":{"line":821,"column":4}}]},"53":{"line":821,"type":"binary-expr","locations":[{"start":{"line":821,"column":8},"end":{"line":821,"column":14}},{"start":{"line":821,"column":18},"end":{"line":821,"column":46}}]},"54":{"line":834,"type":"if","locations":[{"start":{"line":834,"column":4},"end":{"line":834,"column":4}},{"start":{"line":834,"column":4},"end":{"line":834,"column":4}}]},"55":{"line":842,"type":"if","locations":[{"start":{"line":842,"column":4},"end":{"line":842,"column":4}},{"start":{"line":842,"column":4},"end":{"line":842,"column":4}}]},"56":{"line":843,"type":"if","locations":[{"start":{"line":843,"column":6},"end":{"line":843,"column":6}},{"start":{"line":843,"column":6},"end":{"line":843,"column":6}}]}},"code":["const User = require('./User');","const Role = require('./Role');","const Emoji = require('./Emoji');","const Presence = require('./Presence').Presence;","const GuildMember = require('./GuildMember');","const Constants = require('../util/Constants');","const Collection = require('../util/Collection');","const cloneObject = require('../util/CloneObject');","const arraysEqual = require('../util/ArraysEqual');","","/**"," * Represents a guild (or a server) on Discord."," * <info>It's recommended to see if a guild is available before performing operations or reading data from it. You can"," * check this with `guild.available`.</info>"," */","class Guild {","  constructor(client, data) {","    /**","     * The Client that created the instance of the the Guild.","     * @name Guild#client","     * @type {Client}","     * @readonly","     */","    Object.defineProperty(this, 'client', { value: client });","","    /**","     * A collection of members that are in this guild. The key is the member's ID, the value is the member.","     * @type {Collection<string, GuildMember>}","     */","    this.members = new Collection();","","    /**","     * A collection of channels that are in this guild. The key is the channel's ID, the value is the channel.","     * @type {Collection<string, GuildChannel>}","     */","    this.channels = new Collection();","","    /**","     * A collection of roles that are in this guild. The key is the role's ID, the value is the role.","     * @type {Collection<string, Role>}","     */","    this.roles = new Collection();","","    /**","     * A collection of presences in this guild","     * @type {Collection<string, Presence>}","     */","    this.presences = new Collection();","","    if (!data) return;","    if (data.unavailable) {","      /**","       * Whether the guild is available to access. If it is not available, it indicates a server outage.","       * @type {boolean}","       */","      this.available = false;","","      /**","       * The Unique ID of the Guild, useful for comparisons.","       * @type {string}","       */","      this.id = data.id;","    } else {","      this.available = true;","      this.setup(data);","    }","  }","","  /**","   * Sets up the Guild","   * @param {*} data The raw data of the guild","   * @private","   */","  setup(data) {","    /**","     * The name of the guild","     * @type {string}","     */","    this.name = data.name;","","    /**","     * The hash of the guild icon, or null if there is no icon.","     * @type {?string}","     */","    this.icon = data.icon;","","    /**","     * The hash of the guild splash image, or null if no splash (VIP only)","     * @type {?string}","     */","    this.splash = data.splash;","","    /**","     * The region the guild is located in","     * @type {string}","     */","    this.region = data.region;","","    /**","     * The full amount of members in this guild as of `READY`","     * @type {number}","     */","    this.memberCount = data.member_count || this.memberCount;","","    /**","     * Whether the guild is \"large\" (has more than 250 members)","     * @type {boolean}","     */","    this.large = data.large || this.large;","","    /**","     * An array of guild features.","     * @type {Object[]}","     */","    this.features = data.features;","","    /**","     * The ID of the application that created this guild (if applicable)","     * @type {?string}","     */","    this.applicationID = data.application_id;","","    /**","     * A collection of emojis that are in this guild. The key is the emoji's ID, the value is the emoji.","     * @type {Collection<string, Emoji>}","     */","    this.emojis = new Collection();","    for (const emoji of data.emojis) this.emojis.set(emoji.id, new Emoji(this, emoji));","","    /**","     * The time in seconds before a user is counted as \"away from keyboard\".","     * @type {?number}","     */","    this.afkTimeout = data.afk_timeout;","","    /**","     * The ID of the voice channel where AFK members are moved.","     * @type {?string}","     */","    this.afkChannelID = data.afk_channel_id;","","    /**","     * Whether embedded images are enabled on this guild.","     * @type {boolean}","     */","    this.embedEnabled = data.embed_enabled;","","    /**","     * The verification level of the guild.","     * @type {number}","     */","    this.verificationLevel = data.verification_level;","","    /**","     * The timestamp the client user joined the guild at","     * @type {number}","     */","    this.joinedTimestamp = data.joined_at ? new Date(data.joined_at).getTime() : this.joinedTimestamp;","","    this.id = data.id;","    this.available = !data.unavailable;","    this.features = data.features || this.features || [];","","    if (data.members) {","      this.members.clear();","      for (const guildUser of data.members) this._addMember(guildUser, false);","    }","","    if (data.owner_id) {","      /**","       * The user ID of this guild's owner.","       * @type {string}","       */","      this.ownerID = data.owner_id;","    }","","    if (data.channels) {","      this.channels.clear();","      for (const channel of data.channels) this.client.dataManager.newChannel(channel, this);","    }","","    if (data.roles) {","      this.roles.clear();","      for (const role of data.roles) {","        const newRole = new Role(this, role);","        this.roles.set(newRole.id, newRole);","      }","    }","","    if (data.presences) {","      for (const presence of data.presences) {","        this._setPresence(presence.user.id, presence);","      }","    }","","    this._rawVoiceStates = new Collection();","    if (data.voice_states) {","      for (const voiceState of data.voice_states) {","        this._rawVoiceStates.set(voiceState.user_id, voiceState);","        const member = this.members.get(voiceState.user_id);","        if (member) {","          member.serverMute = voiceState.mute;","          member.serverDeaf = voiceState.deaf;","          member.selfMute = voiceState.self_mute;","          member.selfDeaf = voiceState.self_deaf;","          member.voiceSessionID = voiceState.session_id;","          member.voiceChannelID = voiceState.channel_id;","          this.channels.get(voiceState.channel_id).members.set(member.user.id, member);","        }","      }","    }","  }","","  /**","   * The timestamp the guild was created at","   * @type {number}","   * @readonly","   */","  get createdTimestamp() {","    return (this.id / 4194304) + 1420070400000;","  }","","  /**","   * The time the guild was created","   * @type {Date}","   * @readonly","   */","  get createdAt() {","    return new Date(this.createdTimestamp);","  }","","  /**","   * The time the client user joined the guild","   * @type {Date}","   * @readonly","   */","  get joinedAt() {","    return new Date(this.joinedTimestamp);","  }","","  /**","   * Gets the URL to this guild's icon (if it has one, otherwise it returns null)","   * @type {?string}","   * @readonly","   */","  get iconURL() {","    if (!this.icon) return null;","    return Constants.Endpoints.guildIcon(this.id, this.icon);","  }","","  /**","   * Gets the URL to this guild's splash (if it has one, otherwise it returns null)","   * @type {?string}","   * @readonly","   */","  get splashURL() {","    if (!this.splash) return null;","    return Constants.Endpoints.guildSplash(this.id, this.splash);","  }","","  /**","   * The owner of the guild","   * @type {GuildMember}","   * @readonly","   */","  get owner() {","    return this.members.get(this.ownerID);","  }","","  /**","   * If the client is connected to any voice channel in this guild, this will be the relevant VoiceConnection.","   * @type {?VoiceConnection}","   * @readonly","   */","  get voiceConnection() {","    if (this.client.browser) return null;","    return this.client.voice.connections.get(this.id) || null;","  }","","  /**","   * The `#general` GuildChannel of the server.","   * @type {GuildChannel}","   * @readonly","   */","  get defaultChannel() {","    return this.channels.get(this.id);","  }","","  /**","   * Returns the GuildMember form of a User object, if the user is present in the guild.","   * @param {UserResolvable} user The user that you want to obtain the GuildMember of","   * @returns {?GuildMember}","   * @example","   * // get the guild member of a user","   * const member = guild.member(message.author);","   */","  member(user) {","    return this.client.resolver.resolveGuildMember(this, user);","  }","","  /**","   * Fetch a collection of banned users in this guild.","   * @returns {Promise<Collection<string, User>>}","   */","  fetchBans() {","    return this.client.rest.methods.getGuildBans(this);","  }","","  /**","   * Fetch a collection of invites to this guild. Resolves with a collection mapping invites by their codes.","   * @returns {Promise<Collection<string, Invite>>}","   */","  fetchInvites() {","    return this.client.rest.methods.getGuildInvites(this);","  }","","  /**","   * Fetch all webhooks for the guild.","   * @returns {Collection<Webhook>}","   */","  fetchWebhooks() {","    return this.client.rest.methods.getGuildWebhooks(this);","  }","","  /**","   * Fetch a single guild member from a user.","   * @param {UserResolvable} user The user to fetch the member for","   * @returns {Promise<GuildMember>}","   */","  fetchMember(user) {","    if (this._fetchWaiter) return Promise.reject(new Error('Already fetching guild members.'));","    user = this.client.resolver.resolveUser(user);","    if (!user) return Promise.reject(new Error('User is not cached. Use Client.fetchUser first.'));","    if (this.members.has(user.id)) return Promise.resolve(this.members.get(user.id));","    return this.client.rest.methods.getGuildMember(this, user);","  }","","  /**","   * Fetches all the members in the guild, even if they are offline. If the guild has less than 250 members,","   * this should not be necessary.","   * @param {string} [query=''] An optional query to provide when fetching members","   * @returns {Promise<Guild>}","   */","  fetchMembers(query = '') {","    return new Promise((resolve, reject) => {","      if (this._fetchWaiter) throw new Error('Already fetching guild members in ${this.id}.');","      if (this.memberCount === this.members.size) {","        resolve(this);","        return;","      }","      this._fetchWaiter = resolve;","      this.client.ws.send({","        op: Constants.OPCodes.REQUEST_GUILD_MEMBERS,","        d: {","          guild_id: this.id,","          query,","          limit: 0,","        },","      });","      this._checkChunks();","      this.client.setTimeout(() => reject(new Error('Members didn\\'t arrive in time.')), 120 * 1000);","    });","  }","","  /**","   * The data for editing a guild","   * @typedef {Object} GuildEditData","   * @property {string} [name] The name of the guild","   * @property {string} [region] The region of the guild","   * @property {number} [verificationLevel] The verification level of the guild","   * @property {ChannelResolvable} [afkChannel] The AFK channel of the guild","   * @property {number} [afkTimeout] The AFK timeout of the guild","   * @property {Base64Resolvable} [icon] The icon of the guild","   * @property {GuildMemberResolvable} [owner] The owner of the guild","   * @property {Base64Resolvable} [splash] The splash screen of the guild","   */","","  /**","   * Updates the Guild with new information - e.g. a new name.","   * @param {GuildEditData} data The data to update the guild with","   * @returns {Promise<Guild>}","   * @example","   * // set the guild name and region","   * guild.edit({","   *  name: 'Discord Guild',","   *  region: 'london',","   * })","   * .then(updated => console.log(`New guild name ${updated.name} in region ${updated.region}`))","   * .catch(console.error);","   */","  edit(data) {","    return this.client.rest.methods.updateGuild(this, data);","  }","","  /**","   * Edit the name of the guild.","   * @param {string} name The new name of the guild","   * @returns {Promise<Guild>}","   * @example","   * // edit the guild name","   * guild.setName('Discord Guild')","   *  .then(updated => console.log(`Updated guild name to ${guild.name}`))","   *  .catch(console.error);","   */","  setName(name) {","    return this.edit({ name });","  }","","  /**","   * Edit the region of the guild.","   * @param {string} region The new region of the guild.","   * @returns {Promise<Guild>}","   * @example","   * // edit the guild region","   * guild.setRegion('london')","   *  .then(updated => console.log(`Updated guild region to ${guild.region}`))","   *  .catch(console.error);","   */","  setRegion(region) {","    return this.edit({ region });","  }","","  /**","   * Edit the verification level of the guild.","   * @param {number} verificationLevel The new verification level of the guild","   * @returns {Promise<Guild>}","   * @example","   * // edit the guild verification level","   * guild.setVerificationLevel(1)","   *  .then(updated => console.log(`Updated guild verification level to ${guild.verificationLevel}`))","   *  .catch(console.error);","   */","  setVerificationLevel(verificationLevel) {","    return this.edit({ verificationLevel });","  }","","  /**","   * Edit the AFK channel of the guild.","   * @param {ChannelResolvable} afkChannel The new AFK channel","   * @returns {Promise<Guild>}","   * @example","   * // edit the guild AFK channel","   * guild.setAFKChannel(channel)","   *  .then(updated => console.log(`Updated guild AFK channel to ${guild.afkChannel}`))","   *  .catch(console.error);","   */","  setAFKChannel(afkChannel) {","    return this.edit({ afkChannel });","  }","","  /**","   * Edit the AFK timeout of the guild.","   * @param {number} afkTimeout The time in seconds that a user must be idle to be considered AFK","   * @returns {Promise<Guild>}","   * @example","   * // edit the guild AFK channel","   * guild.setAFKTimeout(60)","   *  .then(updated => console.log(`Updated guild AFK timeout to ${guild.afkTimeout}`))","   *  .catch(console.error);","   */","  setAFKTimeout(afkTimeout) {","    return this.edit({ afkTimeout });","  }","","  /**","   * Set a new guild icon.","   * @param {Base64Resolvable} icon The new icon of the guild","   * @returns {Promise<Guild>}","   * @example","   * // edit the guild icon","   * guild.setIcon(fs.readFileSync('./icon.png'))","   *  .then(updated => console.log('Updated the guild icon'))","   *  .catch(console.error);","   */","  setIcon(icon) {","    return this.edit({ icon });","  }","","  /**","   * Sets a new owner of the guild.","   * @param {GuildMemberResolvable} owner The new owner of the guild","   * @returns {Promise<Guild>}","   * @example","   * // edit the guild owner","   * guild.setOwner(guilds.members[0])","   *  .then(updated => console.log(`Updated the guild owner to ${updated.owner.username}`))","   *  .catch(console.error);","   */","  setOwner(owner) {","    return this.edit({ owner });","  }","","  /**","   * Set a new guild splash screen.","   * @param {Base64Resolvable} splash The new splash screen of the guild","   * @returns {Promise<Guild>}","   * @example","   * // edit the guild splash","   * guild.setIcon(fs.readFileSync('./splash.png'))","   *  .then(updated => console.log('Updated the guild splash'))","   *  .catch(console.error);","   */","  setSplash(splash) {","    return this.edit({ splash });","  }","","  /**","   * Bans a user from the guild.","   * @param {UserResolvable} user The user to ban","   * @param {number} [deleteDays=0] The amount of days worth of messages from this user that should","   * also be deleted. Between `0` and `7`.","   * @returns {Promise<GuildMember|User|string>} Result object will be resolved as specifically as possible.","   * If the GuildMember cannot be resolved, the User will instead be attempted to be resolved. If that also cannot","   * be resolved, the user ID will be the result.","   * @example","   * // ban a user","   * guild.ban('123123123123');","   */","  ban(user, deleteDays = 0) {","    return this.client.rest.methods.banGuildMember(this, user, deleteDays);","  }","","  /**","   * Unbans a user from the guild.","   * @param {UserResolvable} user The user to unban","   * @returns {Promise<User>}","   * @example","   * // unban a user","   * guild.unban('123123123123')","   *  .then(user => console.log(`Unbanned ${user.username} from ${guild.name}`))","   *  .catch(reject);","   */","  unban(user) {","    return this.client.rest.methods.unbanGuildMember(this, user);","  }","","  /**","   * Prunes members from the guild based on how long they have been inactive.","   * @param {number} days Number of days of inactivity required to kick","   * @param {boolean} [dry=false] If true, will return number of users that will be kicked, without actually doing it","   * @returns {Promise<number>} The number of members that were/will be kicked","   * @example","   * // see how many members will be pruned","   * guild.pruneMembers(12, true)","   *   .then(pruned => console.log(`This will prune ${pruned} people!`);","   *   .catch(console.error);","   * @example","   * // actually prune the members","   * guild.pruneMembers(12)","   *   .then(pruned => console.log(`I just pruned ${pruned} people!`);","   *   .catch(console.error);","   */","  pruneMembers(days, dry = false) {","    if (typeof days !== 'number') throw new TypeError('Days must be a number.');","    return this.client.rest.methods.pruneGuildMembers(this, days, dry);","  }","","  /**","   * Syncs this guild (already done automatically every 30 seconds).","   * <warn>This is only available when using a user account.</warn>","   */","  sync() {","    if (!this.client.user.bot) this.client.syncGuilds([this]);","  }","","  /**","   * Creates a new channel in the guild.","   * @param {string} name The name of the new channel","   * @param {string} type The type of the new channel, either `text` or `voice`","   * @param {Array<PermissionOverwrites|Object>} overwrites Permission overwrites to apply to the new channel","   * @returns {Promise<TextChannel|VoiceChannel>}","   * @example","   * // create a new text channel","   * guild.createChannel('new-general', 'text')","   *  .then(channel => console.log(`Created new channel ${channel}`))","   *  .catch(console.error);","   */","  createChannel(name, type, overwrites) {","    return this.client.rest.methods.createChannel(this, name, type, overwrites);","  }","","  /**","   * Creates a new role in the guild, and optionally updates it with the given information.","   * @param {RoleData} [data] The data to update the role with","   * @returns {Promise<Role>}","   * @example","   * // create a new role","   * guild.createRole()","   *  .then(role => console.log(`Created role ${role}`))","   *  .catch(console.error);","   * @example","   * // create a new role with data","   * guild.createRole({ name: 'Super Cool People' })","   *   .then(role => console.log(`Created role ${role}`))","   *   .catch(console.error)","   */","  createRole(data) {","    const create = this.client.rest.methods.createGuildRole(this);","    if (!data) return create;","    return create.then(role => role.edit(data));","  }","","  /**","   * Creates a new custom emoji in the guild.","   * @param {BufferResolvable} attachment The image for the emoji.","   * @param {string} name The name for the emoji.","   * @returns {Promise<Emoji>} The created emoji.","   * @example","   * // create a new emoji from a url","   * guild.createEmoji('https://i.imgur.com/w3duR07.png', 'rip')","   *  .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))","   *  .catch(console.error);","   * @example","   * // create a new emoji from a file on your computer","   * guild.createEmoji('./memes/banana.png', 'banana')","   *  .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))","   *  .catch(console.error);","   */","  createEmoji(attachment, name) {","    return new Promise(resolve => {","      if (attachment.startsWith('data:')) {","        resolve(this.client.rest.methods.createEmoji(this, attachment, name));","      } else {","        this.client.resolver.resolveBuffer(attachment).then(data =>","          resolve(this.client.rest.methods.createEmoji(this, data, name))","        );","      }","    });","  }","","  /**","   * Delete an emoji.","   * @param {Emoji|string} emoji The emoji to delete.","   * @returns {Promise}","   */","  deleteEmoji(emoji) {","    if (!(emoji instanceof Emoji)) emoji = this.emojis.get(emoji);","    return this.client.rest.methods.deleteEmoji(emoji);","  }","","  /**","   * Causes the Client to leave the guild.","   * @returns {Promise<Guild>}","   * @example","   * // leave a guild","   * guild.leave()","   *  .then(g => console.log(`Left the guild ${g}`))","   *  .catch(console.error);","   */","  leave() {","    return this.client.rest.methods.leaveGuild(this);","  }","","  /**","   * Causes the Client to delete the guild.","   * @returns {Promise<Guild>}","   * @example","   * // delete a guild","   * guild.delete()","   *  .then(g => console.log(`Deleted the guild ${g}`))","   *  .catch(console.error);","   */","  delete() {","    return this.client.rest.methods.deleteGuild(this);","  }","","  /**","   * Set the position of a role in this guild","   * @param {string|Role} role the role to edit, can be a role object or a role ID.","   * @param {number} position the new position of the role","   * @returns {Promise<Guild>}","   */","  setRolePosition(role, position) {","    if (typeof role === 'string') {","      role = this.roles.get(role);","      if (!role) return Promise.reject(new Error('Supplied role is not a role or string.'));","    }","","    position = Number(position);","    if (isNaN(position)) return Promise.reject(new Error('Supplied position is not a number.'));","","    const lowestAffected = Math.min(role.position, position);","    const highestAffected = Math.max(role.position, position);","","    const rolesToUpdate = this.roles.filter(r => r.position >= lowestAffected && r.position <= highestAffected);","","    // stop role positions getting stupidly inflated","    if (position > role.position) {","      position = rolesToUpdate.first().position;","    } else {","      position = rolesToUpdate.last().position;","    }","","    const updatedRoles = [];","","    for (const uRole of rolesToUpdate.values()) {","      updatedRoles.push({","        id: uRole.id,","        position: uRole.id === role.id ? position : uRole.position + (position < role.position ? 1 : -1),","      });","    }","","    return this.client.rest.methods.setRolePositions(this.id, updatedRoles);","  }","","  /**","   * Whether this Guild equals another Guild. It compares all properties, so for most operations","   * it is advisable to just compare `guild.id === guild2.id` as it is much faster and is often","   * what most users need.","   * @param {Guild} guild Guild to compare with","   * @returns {boolean}","   */","  equals(guild) {","    let equal =","      guild &&","      this.id === guild.id &&","      this.available === !guild.unavailable &&","      this.splash === guild.splash &&","      this.region === guild.region &&","      this.name === guild.name &&","      this.memberCount === guild.member_count &&","      this.large === guild.large &&","      this.icon === guild.icon &&","      arraysEqual(this.features, guild.features) &&","      this.ownerID === guild.owner_id &&","      this.verificationLevel === guild.verification_level &&","      this.embedEnabled === guild.embed_enabled;","","    if (equal) {","      if (this.embedChannel) {","        if (this.embedChannel.id !== guild.embed_channel_id) equal = false;","      } else if (guild.embed_channel_id) {","        equal = false;","      }","    }","","    return equal;","  }","","  /**","   * When concatenated with a string, this automatically concatenates the guild's name instead of the Guild object.","   * @returns {string}","   * @example","   * // logs: Hello from My Guild!","   * console.log(`Hello from ${guild}!`);","   * @example","   * // logs: Hello from My Guild!","   * console.log(`Hello from ' + guild + '!');","   */","  toString() {","    return this.name;","  }","","  _addMember(guildUser, emitEvent = true) {","    const existing = this.members.has(guildUser.user.id);","    if (!(guildUser.user instanceof User)) guildUser.user = this.client.dataManager.newUser(guildUser.user);","","    guildUser.joined_at = guildUser.joined_at || 0;","    const member = new GuildMember(this, guildUser);","    this.members.set(member.id, member);","","    if (this._rawVoiceStates && this._rawVoiceStates.has(member.user.id)) {","      const voiceState = this._rawVoiceStates.get(member.user.id);","      member.serverMute = voiceState.mute;","      member.serverDeaf = voiceState.deaf;","      member.selfMute = voiceState.self_mute;","      member.selfDeaf = voiceState.self_deaf;","      member.voiceSessionID = voiceState.session_id;","      member.voiceChannelID = voiceState.channel_id;","      if (this.client.channels.has(voiceState.channel_id)) {","        this.client.channels.get(voiceState.channel_id).members.set(member.user.id, member);","      } else {","        this.client.emit('warn', `Member ${member.id} added in guild ${this.id} with an uncached voice channel`);","      }","    }","","    /**","     * Emitted whenever a user joins a guild.","     * @event Client#guildMemberAdd","     * @param {GuildMember} member The member that has joined a guild","     */","    if (this.client.ws.status === Constants.Status.READY && emitEvent && !existing) {","      this.client.emit(Constants.Events.GUILD_MEMBER_ADD, member);","    }","","    this._checkChunks();","    return member;","  }","","  _updateMember(member, data) {","    const oldMember = cloneObject(member);","","    if (data.roles) member._roles = data.roles;","    if (typeof data.nick !== 'undefined') member.nickname = data.nick;","","    const notSame = member.nickname !== oldMember.nickname || !arraysEqual(member._roles, oldMember._roles);","","    if (this.client.ws.status === Constants.Status.READY && notSame) {","      /**","       * Emitted whenever a guild member changes - i.e. new role, removed role, nickname","       * @event Client#guildMemberUpdate","       * @param {GuildMember} oldMember The member before the update","       * @param {GuildMember} newMember The member after the update","       */","      this.client.emit(Constants.Events.GUILD_MEMBER_UPDATE, oldMember, member);","    }","","    return {","      old: oldMember,","      mem: member,","    };","  }","","  _removeMember(guildMember) {","    this.members.delete(guildMember.id);","    this._checkChunks();","  }","","  _memberSpeakUpdate(user, speaking) {","    const member = this.members.get(user);","    if (member && member.speaking !== speaking) {","      member.speaking = speaking;","      /**","       * Emitted once a guild member starts/stops speaking","       * @event Client#guildMemberSpeaking","       * @param {GuildMember} member The member that started/stopped speaking","       * @param {boolean} speaking Whether or not the member is speaking","       */","      this.client.emit(Constants.Events.GUILD_MEMBER_SPEAKING, member, speaking);","    }","  }","","  _setPresence(id, presence) {","    if (this.presences.get(id)) {","      this.presences.get(id).update(presence);","      return;","    }","    this.presences.set(id, new Presence(presence));","  }","","  _checkChunks() {","    if (this._fetchWaiter) {","      if (this.members.size === this.memberCount) {","        this._fetchWaiter(this);","        this._fetchWaiter = null;","      }","    }","  }","}","","module.exports = Guild;",""],"l":{"1":4,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"24":0,"30":0,"36":0,"42":0,"48":0,"50":0,"51":0,"56":0,"62":0,"64":0,"65":0,"79":0,"85":0,"91":0,"97":0,"103":0,"109":0,"115":0,"121":0,"127":0,"128":0,"134":0,"140":0,"146":0,"152":0,"158":0,"160":0,"161":0,"162":0,"164":0,"165":0,"166":0,"169":0,"174":0,"177":0,"178":0,"179":0,"182":0,"183":0,"184":0,"185":0,"186":0,"190":0,"191":0,"192":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"220":0,"229":0,"238":0,"247":0,"248":0,"257":0,"258":0,"267":0,"276":0,"277":0,"286":0,"298":0,"306":0,"314":0,"322":0,"331":0,"332":0,"333":0,"334":0,"335":0,"345":0,"346":0,"347":0,"348":0,"349":0,"351":0,"352":0,"360":0,"361":0,"392":0,"406":0,"420":0,"434":0,"448":0,"462":0,"476":0,"490":0,"504":0,"520":0,"534":0,"554":0,"555":0,"563":0,"579":0,"598":0,"599":0,"600":0,"620":0,"621":0,"622":0,"624":0,"625":0,"637":0,"638":0,"651":0,"664":0,"674":0,"675":0,"676":0,"679":0,"680":0,"682":0,"683":0,"685":0,"688":0,"689":0,"691":0,"694":0,"696":0,"697":0,"703":0,"714":0,"729":0,"730":0,"731":0,"732":0,"733":0,"737":0,"751":0,"755":0,"756":0,"758":0,"759":0,"760":0,"762":0,"763":0,"764":0,"765":0,"766":0,"767":0,"768":0,"769":0,"770":0,"771":0,"773":0,"782":0,"783":0,"786":0,"787":0,"791":0,"793":0,"794":0,"796":0,"798":0,"805":0,"808":0,"815":0,"816":0,"820":0,"821":0,"822":0,"829":0,"834":0,"835":0,"836":0,"838":0,"842":0,"843":0,"844":0,"845":0,"851":0}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/User.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/User.js","s":{"1":12,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0,0,0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0},"fnMap":{"1":{"name":"(anonymous_1)","line":10,"loc":{"start":{"line":10,"column":13},"end":{"line":10,"column":28}}},"2":{"name":"(anonymous_2)","line":22,"loc":{"start":{"line":22,"column":7},"end":{"line":22,"column":14}}},"3":{"name":"(anonymous_3)","line":60,"loc":{"start":{"line":60,"column":7},"end":{"line":60,"column":14}}},"4":{"name":"(anonymous_4)","line":72,"loc":{"start":{"line":72,"column":22},"end":{"line":72,"column":25}}},"5":{"name":"(anonymous_5)","line":81,"loc":{"start":{"line":81,"column":15},"end":{"line":81,"column":18}}},"6":{"name":"(anonymous_6)","line":90,"loc":{"start":{"line":90,"column":14},"end":{"line":90,"column":17}}},"7":{"name":"(anonymous_7)","line":103,"loc":{"start":{"line":103,"column":15},"end":{"line":103,"column":18}}},"8":{"name":"(anonymous_8)","line":113,"loc":{"start":{"line":113,"column":22},"end":{"line":113,"column":25}}},"9":{"name":"(anonymous_9)","line":124,"loc":{"start":{"line":124,"column":22},"end":{"line":124,"column":25}}},"10":{"name":"(anonymous_10)","line":134,"loc":{"start":{"line":134,"column":10},"end":{"line":134,"column":13}}},"11":{"name":"(anonymous_11)","line":143,"loc":{"start":{"line":143,"column":10},"end":{"line":143,"column":20}}},"12":{"name":"(anonymous_12)","line":153,"loc":{"start":{"line":153,"column":15},"end":{"line":153,"column":25}}},"13":{"name":"(anonymous_13)","line":163,"loc":{"start":{"line":163,"column":18},"end":{"line":163,"column":28}}},"14":{"name":"(anonymous_14)","line":172,"loc":{"start":{"line":172,"column":15},"end":{"line":172,"column":18}}},"15":{"name":"(anonymous_15)","line":180,"loc":{"start":{"line":180,"column":10},"end":{"line":180,"column":13}}},"16":{"name":"(anonymous_16)","line":189,"loc":{"start":{"line":189,"column":11},"end":{"line":189,"column":14}}},"17":{"name":"(anonymous_17)","line":198,"loc":{"start":{"line":198,"column":14},"end":{"line":198,"column":17}}},"18":{"name":"(anonymous_18)","line":207,"loc":{"start":{"line":207,"column":7},"end":{"line":207,"column":10}}},"19":{"name":"(anonymous_19)","line":216,"loc":{"start":{"line":216,"column":9},"end":{"line":216,"column":12}}},"20":{"name":"(anonymous_20)","line":225,"loc":{"start":{"line":225,"column":14},"end":{"line":225,"column":17}}},"21":{"name":"(anonymous_21)","line":235,"loc":{"start":{"line":235,"column":9},"end":{"line":235,"column":16}}},"22":{"name":"(anonymous_22)","line":245,"loc":{"start":{"line":245,"column":8},"end":{"line":245,"column":15}}},"23":{"name":"(anonymous_23)","line":263,"loc":{"start":{"line":263,"column":10},"end":{"line":263,"column":13}}},"24":{"name":"(anonymous_24)","line":268,"loc":{"start":{"line":268,"column":6},"end":{"line":268,"column":9}}},"25":{"name":"(anonymous_25)","line":269,"loc":{"start":{"line":269,"column":13},"end":{"line":269,"column":16}}},"26":{"name":"(anonymous_26)","line":270,"loc":{"start":{"line":270,"column":11},"end":{"line":270,"column":14}}},"27":{"name":"(anonymous_27)","line":271,"loc":{"start":{"line":271,"column":10},"end":{"line":271,"column":13}}},"28":{"name":"(anonymous_28)","line":272,"loc":{"start":{"line":272,"column":10},"end":{"line":272,"column":13}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":65}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":47}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":48}},"4":{"start":{"line":17,"column":4},"end":{"line":17,"column":61}},"5":{"start":{"line":19,"column":4},"end":{"line":19,"column":31}},"6":{"start":{"line":19,"column":14},"end":{"line":19,"column":31}},"7":{"start":{"line":27,"column":4},"end":{"line":27,"column":22}},"8":{"start":{"line":33,"column":4},"end":{"line":33,"column":34}},"9":{"start":{"line":39,"column":4},"end":{"line":39,"column":44}},"10":{"start":{"line":45,"column":4},"end":{"line":45,"column":30}},"11":{"start":{"line":51,"column":4},"end":{"line":51,"column":33}},"12":{"start":{"line":57,"column":4},"end":{"line":57,"column":30}},"13":{"start":{"line":61,"column":4},"end":{"line":63,"column":5}},"14":{"start":{"line":62,"column":6},"end":{"line":62,"column":69}},"15":{"start":{"line":62,"column":45},"end":{"line":62,"column":69}},"16":{"start":{"line":64,"column":4},"end":{"line":64,"column":51}},"17":{"start":{"line":64,"column":20},"end":{"line":64,"column":51}},"18":{"start":{"line":73,"column":4},"end":{"line":73,"column":47}},"19":{"start":{"line":82,"column":4},"end":{"line":82,"column":43}},"20":{"start":{"line":91,"column":4},"end":{"line":91,"column":86}},"21":{"start":{"line":91,"column":44},"end":{"line":91,"column":86}},"22":{"start":{"line":92,"column":4},"end":{"line":94,"column":5}},"23":{"start":{"line":93,"column":6},"end":{"line":93,"column":76}},"24":{"start":{"line":93,"column":40},"end":{"line":93,"column":76}},"25":{"start":{"line":95,"column":4},"end":{"line":95,"column":26}},"26":{"start":{"line":104,"column":4},"end":{"line":104,"column":34}},"27":{"start":{"line":104,"column":22},"end":{"line":104,"column":34}},"28":{"start":{"line":105,"column":4},"end":{"line":105,"column":60}},"29":{"start":{"line":114,"column":4},"end":{"line":114,"column":65}},"30":{"start":{"line":115,"column":4},"end":{"line":115,"column":67}},"31":{"start":{"line":116,"column":4},"end":{"line":116,"column":78}},"32":{"start":{"line":125,"column":4},"end":{"line":125,"column":51}},"33":{"start":{"line":135,"column":4},"end":{"line":135,"column":55}},"34":{"start":{"line":144,"column":4},"end":{"line":144,"column":59}},"35":{"start":{"line":145,"column":4},"end":{"line":145,"column":40}},"36":{"start":{"line":154,"column":4},"end":{"line":154,"column":59}},"37":{"start":{"line":155,"column":4},"end":{"line":155,"column":94}},"38":{"start":{"line":164,"column":4},"end":{"line":164,"column":59}},"39":{"start":{"line":165,"column":4},"end":{"line":165,"column":88}},"40":{"start":{"line":173,"column":4},"end":{"line":173,"column":99}},"41":{"start":{"line":173,"column":44},"end":{"line":173,"column":59}},"42":{"start":{"line":173,"column":71},"end":{"line":173,"column":97}},"43":{"start":{"line":181,"column":4},"end":{"line":181,"column":56}},"44":{"start":{"line":190,"column":4},"end":{"line":190,"column":52}},"45":{"start":{"line":199,"column":4},"end":{"line":199,"column":55}},"46":{"start":{"line":208,"column":4},"end":{"line":208,"column":52}},"47":{"start":{"line":217,"column":4},"end":{"line":217,"column":54}},"48":{"start":{"line":226,"column":4},"end":{"line":226,"column":59}},"49":{"start":{"line":236,"column":4},"end":{"line":236,"column":56}},"50":{"start":{"line":246,"column":4},"end":{"line":251,"column":37}},"51":{"start":{"line":253,"column":4},"end":{"line":253,"column":17}},"52":{"start":{"line":264,"column":4},"end":{"line":264,"column":27}},"53":{"start":{"line":268,"column":11},"end":{"line":268,"column":18}},"54":{"start":{"line":269,"column":18},"end":{"line":269,"column":25}},"55":{"start":{"line":270,"column":16},"end":{"line":270,"column":23}},"56":{"start":{"line":271,"column":15},"end":{"line":271,"column":22}},"57":{"start":{"line":272,"column":15},"end":{"line":272,"column":22}},"58":{"start":{"line":275,"column":0},"end":{"line":275,"column":36}},"59":{"start":{"line":277,"column":0},"end":{"line":277,"column":22}}},"branchMap":{"1":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":19,"column":4}},{"start":{"line":19,"column":4},"end":{"line":19,"column":4}}]},"2":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":6},"end":{"line":62,"column":6}},{"start":{"line":62,"column":6},"end":{"line":62,"column":6}}]},"3":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":4},"end":{"line":64,"column":4}},{"start":{"line":64,"column":4},"end":{"line":64,"column":4}}]},"4":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":4},"end":{"line":91,"column":4}},{"start":{"line":91,"column":4},"end":{"line":91,"column":4}}]},"5":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":6},"end":{"line":93,"column":6}},{"start":{"line":93,"column":6},"end":{"line":93,"column":6}}]},"6":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":4},"end":{"line":104,"column":4}},{"start":{"line":104,"column":4},"end":{"line":104,"column":4}}]},"7":{"line":125,"type":"binary-expr","locations":[{"start":{"line":125,"column":11},"end":{"line":125,"column":25}},{"start":{"line":125,"column":29},"end":{"line":125,"column":50}}]},"8":{"line":135,"type":"binary-expr","locations":[{"start":{"line":135,"column":11},"end":{"line":135,"column":46}},{"start":{"line":135,"column":50},"end":{"line":135,"column":54}}]},"9":{"line":155,"type":"cond-expr","locations":[{"start":{"line":155,"column":42},"end":{"line":155,"column":86}},{"start":{"line":155,"column":89},"end":{"line":155,"column":93}}]},"10":{"line":165,"type":"cond-expr","locations":[{"start":{"line":165,"column":42},"end":{"line":165,"column":82}},{"start":{"line":165,"column":85},"end":{"line":165,"column":87}}]},"11":{"line":246,"type":"binary-expr","locations":[{"start":{"line":246,"column":16},"end":{"line":246,"column":20}},{"start":{"line":247,"column":6},"end":{"line":247,"column":25}},{"start":{"line":248,"column":6},"end":{"line":248,"column":37}},{"start":{"line":249,"column":6},"end":{"line":249,"column":47}},{"start":{"line":250,"column":6},"end":{"line":250,"column":33}},{"start":{"line":251,"column":6},"end":{"line":251,"column":36}}]}},"code":["const TextBasedChannel = require('./interface/TextBasedChannel');","const Constants = require('../util/Constants');","const Presence = require('./Presence').Presence;","","/**"," * Represents a user on Discord."," * @implements {TextBasedChannel}"," */","class User {","  constructor(client, data) {","    /**","     * The Client that created the instance of the the User.","     * @name User#client","     * @type {Client}","     * @readonly","     */","    Object.defineProperty(this, 'client', { value: client });","","    if (data) this.setup(data);","  }","","  setup(data) {","    /**","     * The ID of the user","     * @type {string}","     */","    this.id = data.id;","","    /**","     * The username of the user","     * @type {string}","     */","    this.username = data.username;","","    /**","     * A discriminator based on username for the user","     * @type {string}","     */","    this.discriminator = data.discriminator;","","    /**","     * The ID of the user's avatar","     * @type {string}","     */","    this.avatar = data.avatar;","","    /**","     * Whether or not the user is a bot.","     * @type {boolean}","     */","    this.bot = Boolean(data.bot);","","    /**","     * The ID of the last message sent by the user, if one was sent.","     * @type {?string}","     */","    this.lastMessageID = null;","  }","","  patch(data) {","    for (const prop of ['id', 'username', 'discriminator', 'avatar', 'bot']) {","      if (typeof data[prop] !== 'undefined') this[prop] = data[prop];","    }","    if (data.token) this.client.token = data.token;","  }","","  /**","   * The timestamp the user was created at","   * @type {number}","   * @readonly","   */","  get createdTimestamp() {","    return (this.id / 4194304) + 1420070400000;","  }","","  /**","   * The time the user was created","   * @type {Date}","   * @readonly","   */","  get createdAt() {","    return new Date(this.createdTimestamp);","  }","","  /**","   * The presence of this user","   * @type {Presence}","   * @readonly","   */","  get presence() {","    if (this.client.presences.has(this.id)) return this.client.presences.get(this.id);","    for (const guild of this.client.guilds.values()) {","      if (guild.presences.has(this.id)) return guild.presences.get(this.id);","    }","    return new Presence();","  }","","  /**","   * A link to the user's avatar (if they have one, otherwise null)","   * @type {?string}","   * @readonly","   */","  get avatarURL() {","    if (!this.avatar) return null;","    return Constants.Endpoints.avatar(this.id, this.avatar);","  }","","  /**","   * A link to the user's default avatar","   * @type {string}","   * @readonly","   */","  get defaultAvatarURL() {","    let defaultAvatars = Object.values(Constants.DefaultAvatars);","    let defaultAvatar = this.discriminator % defaultAvatars.length;","    return Constants.Endpoints.assets(`${defaultAvatars[defaultAvatar]}.png`);","  }","","  /**","   * A link to the user's avatar if they have one. Otherwise a link to their default avatar will be returned","   * @type {string}","   * @readonly","   */","  get displayAvatarURL() {","    return this.avatarURL || this.defaultAvatarURL;","  }","","  /**","   * The note that is set for the user","   * <warn>This is only available when using a user account.</warn>","   * @type {?string}","   * @readonly","   */","  get note() {","    return this.client.user.notes.get(this.id) || null;","  }","","  /**","   * Check whether the user is typing in a channel.","   * @param {ChannelResolvable} channel The channel to check in","   * @returns {boolean}","   */","  typingIn(channel) {","    channel = this.client.resolver.resolveChannel(channel);","    return channel._typing.has(this.id);","  }","","  /**","   * Get the time that the user started typing.","   * @param {ChannelResolvable} channel The channel to get the time in","   * @returns {?Date}","   */","  typingSinceIn(channel) {","    channel = this.client.resolver.resolveChannel(channel);","    return channel._typing.has(this.id) ? new Date(channel._typing.get(this.id).since) : null;","  }","","  /**","   * Get the amount of time the user has been typing in a channel for (in milliseconds), or -1 if they're not typing.","   * @param {ChannelResolvable} channel The channel to get the time in","   * @returns {number}","   */","  typingDurationIn(channel) {","    channel = this.client.resolver.resolveChannel(channel);","    return channel._typing.has(this.id) ? channel._typing.get(this.id).elapsedTime : -1;","  }","","  /**","   * The DM between the client's user and this user","   * @type {?DMChannel}","   */","  get dmChannel() {","    return this.client.channels.filter(c => c.type === 'dm').find(c => c.recipient.id === this.id);","  }","","  /**","   * Deletes a DM channel (if one exists) between the client and the user. Resolves with the channel if successful.","   * @returns {Promise<DMChannel>}","   */","  deleteDM() {","    return this.client.rest.methods.deleteChannel(this);","  }","","  /**","   * Sends a friend request to the user","   * <warn>This is only available when using a user account.</warn>","   * @returns {Promise<User>}","   */","  addFriend() {","    return this.client.rest.methods.addFriend(this);","  }","","  /**","   * Removes the user from your friends","   * <warn>This is only available when using a user account.</warn>","   * @returns {Promise<User>}","   */","  removeFriend() {","    return this.client.rest.methods.removeFriend(this);","  }","","  /**","   * Blocks the user","   * <warn>This is only available when using a user account.</warn>","   * @returns {Promise<User>}","   */","  block() {","    return this.client.rest.methods.blockUser(this);","  }","","  /**","   * Unblocks the user","   * <warn>This is only available when using a user account.</warn>","   * @returns {Promise<User>}","   */","  unblock() {","    return this.client.rest.methods.unblockUser(this);","  }","","  /**","   * Get the profile of the user","   * <warn>This is only available when using a user account.</warn>","   * @returns {Promise<UserProfile>}","   */","  fetchProfile() {","    return this.client.rest.methods.fetchUserProfile(this);","  }","","  /**","   * Sets a note for the user","   * <warn>This is only available when using a user account.</warn>","   * @param {string} note The note to set for the user","   * @returns {Promise<User>}","   */","  setNote(note) {","    return this.client.rest.methods.setNote(this, note);","  }","","  /**","   * Checks if the user is equal to another. It compares ID, username, discriminator, avatar, and bot flags.","   * It is recommended to compare equality by using `user.id === user2.id` unless you want to compare all properties.","   * @param {User} user User to compare with","   * @returns {boolean}","   */","  equals(user) {","    let equal = user &&","      this.id === user.id &&","      this.username === user.username &&","      this.discriminator === user.discriminator &&","      this.avatar === user.avatar &&","      this.bot === Boolean(user.bot);","","    return equal;","  }","","  /**","   * When concatenated with a string, this automatically concatenates the user's mention instead of the User object.","   * @returns {string}","   * @example","   * // logs: Hello from <@123456789>!","   * console.log(`Hello from ${user}!`);","   */","  toString() {","    return `<@${this.id}>`;","  }","","  // These are here only for documentation purposes - they are implemented by TextBasedChannel","  send() { return; }","  sendMessage() { return; }","  sendEmbed() { return; }","  sendFile() { return; }","  sendCode() { return; }","}","","TextBasedChannel.applyToClass(User);","","module.exports = User;",""],"l":{"1":12,"2":0,"3":0,"17":0,"19":0,"27":0,"33":0,"39":0,"45":0,"51":0,"57":0,"61":0,"62":0,"64":0,"73":0,"82":0,"91":0,"92":0,"93":0,"95":0,"104":0,"105":0,"114":0,"115":0,"116":0,"125":0,"135":0,"144":0,"145":0,"154":0,"155":0,"164":0,"165":0,"173":0,"181":0,"190":0,"199":0,"208":0,"217":0,"226":0,"236":0,"246":0,"253":0,"264":0,"268":0,"269":0,"270":0,"271":0,"272":0,"275":0,"277":0}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/interface/TextBasedChannel.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/interface/TextBasedChannel.js","s":{"1":20,"2":20,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":13},"end":{"line":12,"column":16}}},"2":{"name":"(anonymous_2)","line":67,"loc":{"start":{"line":67,"column":6},"end":{"line":67,"column":25}}},"3":{"name":"(anonymous_3)","line":106,"loc":{"start":{"line":106,"column":13},"end":{"line":106,"column":32}}},"4":{"name":"(anonymous_4)","line":117,"loc":{"start":{"line":117,"column":11},"end":{"line":117,"column":37}}},"5":{"name":"(anonymous_5)","line":135,"loc":{"start":{"line":135,"column":10},"end":{"line":135,"column":52}}},"6":{"name":"(anonymous_6)","line":146,"loc":{"start":{"line":146,"column":10},"end":{"line":146,"column":40}}},"7":{"name":"(anonymous_7)","line":161,"loc":{"start":{"line":161,"column":14},"end":{"line":161,"column":26}}},"8":{"name":"(anonymous_8)","line":189,"loc":{"start":{"line":189,"column":15},"end":{"line":189,"column":30}}},"9":{"name":"(anonymous_9)","line":205,"loc":{"start":{"line":205,"column":21},"end":{"line":205,"column":24}}},"10":{"name":"(anonymous_10)","line":224,"loc":{"start":{"line":224,"column":13},"end":{"line":224,"column":21}}},"11":{"name":"(anonymous_11)","line":252,"loc":{"start":{"line":252,"column":12},"end":{"line":252,"column":28}}},"12":{"name":"(anonymous_12)","line":268,"loc":{"start":{"line":268,"column":12},"end":{"line":268,"column":15}}},"13":{"name":"(anonymous_13)","line":277,"loc":{"start":{"line":277,"column":17},"end":{"line":277,"column":20}}},"14":{"name":"(anonymous_14)","line":296,"loc":{"start":{"line":296,"column":17},"end":{"line":296,"column":40}}},"15":{"name":"(anonymous_15)","line":320,"loc":{"start":{"line":320,"column":15},"end":{"line":320,"column":38}}},"16":{"name":"(anonymous_16)","line":339,"loc":{"start":{"line":339,"column":12},"end":{"line":339,"column":23}}},"17":{"name":"(anonymous_17)","line":348,"loc":{"start":{"line":348,"column":15},"end":{"line":348,"column":25}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":29}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":38}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":52}},"5":{"start":{"line":17,"column":4},"end":{"line":17,"column":37}},"6":{"start":{"line":23,"column":4},"end":{"line":23,"column":30}},"7":{"start":{"line":68,"column":4},"end":{"line":73,"column":5}},"8":{"start":{"line":69,"column":6},"end":{"line":69,"column":24}},"9":{"start":{"line":70,"column":6},"end":{"line":70,"column":19}},"10":{"start":{"line":71,"column":11},"end":{"line":73,"column":5}},"11":{"start":{"line":72,"column":6},"end":{"line":72,"column":19}},"12":{"start":{"line":74,"column":4},"end":{"line":91,"column":5}},"13":{"start":{"line":75,"column":6},"end":{"line":75,"column":88}},"14":{"start":{"line":75,"column":44},"end":{"line":75,"column":88}},"15":{"start":{"line":76,"column":6},"end":{"line":84,"column":7}},"16":{"start":{"line":77,"column":8},"end":{"line":83,"column":9}},"17":{"start":{"line":78,"column":10},"end":{"line":78,"column":69}},"18":{"start":{"line":79,"column":15},"end":{"line":83,"column":9}},"19":{"start":{"line":80,"column":10},"end":{"line":80,"column":74}},"20":{"start":{"line":82,"column":10},"end":{"line":82,"column":41}},"21":{"start":{"line":85,"column":6},"end":{"line":90,"column":8}},"22":{"start":{"line":86,"column":8},"end":{"line":89,"column":10}},"23":{"start":{"line":92,"column":4},"end":{"line":92,"column":72}},"24":{"start":{"line":107,"column":4},"end":{"line":107,"column":39}},"25":{"start":{"line":118,"column":4},"end":{"line":123,"column":5}},"26":{"start":{"line":119,"column":6},"end":{"line":119,"column":24}},"27":{"start":{"line":120,"column":6},"end":{"line":120,"column":19}},"28":{"start":{"line":121,"column":11},"end":{"line":123,"column":5}},"29":{"start":{"line":122,"column":6},"end":{"line":122,"column":19}},"30":{"start":{"line":124,"column":4},"end":{"line":124,"column":65}},"31":{"start":{"line":136,"column":4},"end":{"line":136,"column":86}},"32":{"start":{"line":147,"column":4},"end":{"line":147,"column":70}},"33":{"start":{"line":162,"column":4},"end":{"line":166,"column":7}},"34":{"start":{"line":163,"column":6},"end":{"line":163,"column":88}},"35":{"start":{"line":164,"column":6},"end":{"line":164,"column":30}},"36":{"start":{"line":165,"column":6},"end":{"line":165,"column":17}},"37":{"start":{"line":190,"column":4},"end":{"line":198,"column":7}},"38":{"start":{"line":191,"column":6},"end":{"line":191,"column":40}},"39":{"start":{"line":192,"column":6},"end":{"line":196,"column":7}},"40":{"start":{"line":193,"column":8},"end":{"line":193,"column":60}},"41":{"start":{"line":194,"column":8},"end":{"line":194,"column":38}},"42":{"start":{"line":195,"column":8},"end":{"line":195,"column":32}},"43":{"start":{"line":197,"column":6},"end":{"line":197,"column":22}},"44":{"start":{"line":206,"column":4},"end":{"line":214,"column":7}},"45":{"start":{"line":207,"column":6},"end":{"line":207,"column":40}},"46":{"start":{"line":208,"column":6},"end":{"line":212,"column":7}},"47":{"start":{"line":209,"column":8},"end":{"line":209,"column":60}},"48":{"start":{"line":210,"column":8},"end":{"line":210,"column":38}},"49":{"start":{"line":211,"column":8},"end":{"line":211,"column":32}},"50":{"start":{"line":213,"column":6},"end":{"line":213,"column":22}},"51":{"start":{"line":225,"column":4},"end":{"line":225,"column":101}},"52":{"start":{"line":225,"column":51},"end":{"line":225,"column":101}},"53":{"start":{"line":226,"column":4},"end":{"line":237,"column":5}},"54":{"start":{"line":227,"column":6},"end":{"line":232,"column":9}},"55":{"start":{"line":230,"column":10},"end":{"line":230,"column":55}},"56":{"start":{"line":233,"column":6},"end":{"line":233,"column":51}},"57":{"start":{"line":235,"column":6},"end":{"line":235,"column":58}},"58":{"start":{"line":236,"column":6},"end":{"line":236,"column":45}},"59":{"start":{"line":253,"column":4},"end":{"line":260,"column":5}},"60":{"start":{"line":254,"column":6},"end":{"line":254,"column":58}},"61":{"start":{"line":255,"column":6},"end":{"line":255,"column":20}},"62":{"start":{"line":256,"column":6},"end":{"line":259,"column":7}},"63":{"start":{"line":257,"column":8},"end":{"line":257,"column":50}},"64":{"start":{"line":258,"column":8},"end":{"line":258,"column":49}},"65":{"start":{"line":269,"column":4},"end":{"line":269,"column":49}},"66":{"start":{"line":278,"column":4},"end":{"line":278,"column":98}},"67":{"start":{"line":278,"column":47},"end":{"line":278,"column":98}},"68":{"start":{"line":279,"column":4},"end":{"line":279,"column":13}},"69":{"start":{"line":297,"column":4},"end":{"line":297,"column":55}},"70":{"start":{"line":321,"column":4},"end":{"line":330,"column":7}},"71":{"start":{"line":322,"column":6},"end":{"line":322,"column":62}},"72":{"start":{"line":323,"column":6},"end":{"line":329,"column":9}},"73":{"start":{"line":324,"column":8},"end":{"line":328,"column":9}},"74":{"start":{"line":325,"column":10},"end":{"line":325,"column":29}},"75":{"start":{"line":327,"column":10},"end":{"line":327,"column":30}},"76":{"start":{"line":340,"column":4},"end":{"line":340,"column":109}},"77":{"start":{"line":340,"column":26},"end":{"line":340,"column":109}},"78":{"start":{"line":340,"column":86},"end":{"line":340,"column":107}},"79":{"start":{"line":341,"column":4},"end":{"line":344,"column":5}},"80":{"start":{"line":342,"column":6},"end":{"line":342,"column":104}},"81":{"start":{"line":342,"column":98},"end":{"line":342,"column":102}},"82":{"start":{"line":343,"column":6},"end":{"line":343,"column":75}},"83":{"start":{"line":345,"column":4},"end":{"line":345,"column":81}},"84":{"start":{"line":349,"column":4},"end":{"line":349,"column":60}},"85":{"start":{"line":350,"column":4},"end":{"line":350,"column":35}},"86":{"start":{"line":350,"column":23},"end":{"line":350,"column":35}},"87":{"start":{"line":351,"column":4},"end":{"line":351,"column":101}},"88":{"start":{"line":351,"column":54},"end":{"line":351,"column":101}},"89":{"start":{"line":352,"column":4},"end":{"line":352,"column":43}},"90":{"start":{"line":353,"column":4},"end":{"line":353,"column":19}},"91":{"start":{"line":357,"column":0},"end":{"line":377,"column":2}},"92":{"start":{"line":358,"column":2},"end":{"line":358,"column":77}},"93":{"start":{"line":359,"column":2},"end":{"line":373,"column":3}},"94":{"start":{"line":360,"column":4},"end":{"line":372,"column":6}},"95":{"start":{"line":374,"column":2},"end":{"line":376,"column":3}},"96":{"start":{"line":375,"column":4},"end":{"line":375,"column":120}}},"branchMap":{"1":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":4},"end":{"line":68,"column":4}},{"start":{"line":68,"column":4},"end":{"line":68,"column":4}}]},"2":{"line":68,"type":"binary-expr","locations":[{"start":{"line":68,"column":8},"end":{"line":68,"column":16}},{"start":{"line":68,"column":20},"end":{"line":68,"column":47}},{"start":{"line":68,"column":51},"end":{"line":68,"column":78}}]},"3":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":11},"end":{"line":71,"column":11}},{"start":{"line":71,"column":11},"end":{"line":71,"column":11}}]},"4":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":4},"end":{"line":74,"column":4}},{"start":{"line":74,"column":4},"end":{"line":74,"column":4}}]},"5":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":6},"end":{"line":75,"column":6}},{"start":{"line":75,"column":6},"end":{"line":75,"column":6}}]},"6":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":6},"end":{"line":76,"column":6}},{"start":{"line":76,"column":6},"end":{"line":76,"column":6}}]},"7":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":8},"end":{"line":77,"column":8}},{"start":{"line":77,"column":8},"end":{"line":77,"column":8}}]},"8":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":15},"end":{"line":79,"column":15}},{"start":{"line":79,"column":15},"end":{"line":79,"column":15}}]},"9":{"line":79,"type":"binary-expr","locations":[{"start":{"line":79,"column":19},"end":{"line":79,"column":42}},{"start":{"line":79,"column":46},"end":{"line":79,"column":74}}]},"10":{"line":118,"type":"if","locations":[{"start":{"line":118,"column":4},"end":{"line":118,"column":4}},{"start":{"line":118,"column":4},"end":{"line":118,"column":4}}]},"11":{"line":118,"type":"binary-expr","locations":[{"start":{"line":118,"column":8},"end":{"line":118,"column":16}},{"start":{"line":118,"column":20},"end":{"line":118,"column":47}}]},"12":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":11},"end":{"line":121,"column":11}},{"start":{"line":121,"column":11},"end":{"line":121,"column":11}}]},"13":{"line":163,"type":"cond-expr","locations":[{"start":{"line":163,"column":44},"end":{"line":163,"column":48}},{"start":{"line":163,"column":51},"end":{"line":163,"column":87}}]},"14":{"line":225,"type":"if","locations":[{"start":{"line":225,"column":4},"end":{"line":225,"column":4}},{"start":{"line":225,"column":4},"end":{"line":225,"column":4}}]},"15":{"line":225,"type":"binary-expr","locations":[{"start":{"line":225,"column":8},"end":{"line":225,"column":36}},{"start":{"line":225,"column":40},"end":{"line":225,"column":49}}]},"16":{"line":226,"type":"if","locations":[{"start":{"line":226,"column":4},"end":{"line":226,"column":4}},{"start":{"line":226,"column":4},"end":{"line":226,"column":4}}]},"17":{"line":228,"type":"binary-expr","locations":[{"start":{"line":228,"column":15},"end":{"line":228,"column":20}},{"start":{"line":228,"column":24},"end":{"line":228,"column":25}}]},"18":{"line":236,"type":"binary-expr","locations":[{"start":{"line":236,"column":20},"end":{"line":236,"column":25}},{"start":{"line":236,"column":29},"end":{"line":236,"column":44}}]},"19":{"line":253,"type":"if","locations":[{"start":{"line":253,"column":4},"end":{"line":253,"column":4}},{"start":{"line":253,"column":4},"end":{"line":253,"column":4}}]},"20":{"line":256,"type":"if","locations":[{"start":{"line":256,"column":6},"end":{"line":256,"column":6}},{"start":{"line":256,"column":6},"end":{"line":256,"column":6}}]},"21":{"line":256,"type":"binary-expr","locations":[{"start":{"line":256,"column":10},"end":{"line":256,"column":26}},{"start":{"line":256,"column":30},"end":{"line":256,"column":35}}]},"22":{"line":278,"type":"if","locations":[{"start":{"line":278,"column":4},"end":{"line":278,"column":4}},{"start":{"line":278,"column":4},"end":{"line":278,"column":4}}]},"23":{"line":324,"type":"if","locations":[{"start":{"line":324,"column":8},"end":{"line":324,"column":8}},{"start":{"line":324,"column":8},"end":{"line":324,"column":8}}]},"24":{"line":324,"type":"binary-expr","locations":[{"start":{"line":324,"column":12},"end":{"line":324,"column":26}},{"start":{"line":324,"column":30},"end":{"line":324,"column":61}}]},"25":{"line":340,"type":"if","locations":[{"start":{"line":340,"column":4},"end":{"line":340,"column":4}},{"start":{"line":340,"column":4},"end":{"line":340,"column":4}}]},"26":{"line":341,"type":"if","locations":[{"start":{"line":341,"column":4},"end":{"line":341,"column":4}},{"start":{"line":341,"column":4},"end":{"line":341,"column":4}}]},"27":{"line":341,"type":"binary-expr","locations":[{"start":{"line":341,"column":8},"end":{"line":341,"column":33}},{"start":{"line":341,"column":37},"end":{"line":341,"column":67}}]},"28":{"line":342,"type":"cond-expr","locations":[{"start":{"line":342,"column":58},"end":{"line":342,"column":77}},{"start":{"line":342,"column":80},"end":{"line":342,"column":103}}]},"29":{"line":350,"type":"if","locations":[{"start":{"line":350,"column":4},"end":{"line":350,"column":4}},{"start":{"line":350,"column":4},"end":{"line":350,"column":4}}]},"30":{"line":351,"type":"if","locations":[{"start":{"line":351,"column":4},"end":{"line":351,"column":4}},{"start":{"line":351,"column":4},"end":{"line":351,"column":4}}]},"31":{"line":351,"type":"binary-expr","locations":[{"start":{"line":351,"column":8},"end":{"line":351,"column":37}},{"start":{"line":351,"column":41},"end":{"line":351,"column":52}}]},"32":{"line":359,"type":"if","locations":[{"start":{"line":359,"column":2},"end":{"line":359,"column":2}},{"start":{"line":359,"column":2},"end":{"line":359,"column":2}}]}},"code":["const path = require('path');","const Message = require('../Message');","const MessageCollector = require('../MessageCollector');","const Collection = require('../../util/Collection');","","","/**"," * Interface for classes that have text-channel-like features"," * @interface"," */","class TextBasedChannel {","  constructor() {","    /**","     * A collection containing the messages sent to this channel.","     * @type {Collection<string, Message>}","     */","    this.messages = new Collection();","","    /**","     * The ID of the last message in the channel, if one was sent.","     * @type {?string}","     */","    this.lastMessageID = null;","  }","","  /**","   * Options that can be passed into send, sendMessage, sendFile, sendEmbed, sendCode, and Message#reply","   * @typedef {Object} MessageOptions","   * @property {boolean} [tts=false] Whether or not the message should be spoken aloud","   * @property {string} [nonce=''] The nonce for the message","   * @property {Object} [embed] An embed for the message","   * (see [here](https://discordapp.com/developers/docs/resources/channel#embed-object) for more details)","   * @property {boolean} [disableEveryone=this.client.options.disableEveryone] Whether or not @everyone and @here","   * should be replaced with plain-text","   * @property {FileOptions|string} [file] A file to send with the message","   * @property {string|boolean} [code] Language for optional codeblock formatting to apply","   * @property {boolean|SplitOptions} [split=false] Whether or not the message should be split into multiple messages if","   * it exceeds the character limit. If an object is provided, these are the options for splitting the message.","   */","","  /**","   * @typedef {Object} FileOptions","   * @property {BufferResolvable} attachment","   * @property {string} [name='file.jpg']","   */","","  /**","   * Options for splitting a message","   * @typedef {Object} SplitOptions","   * @property {number} [maxLength=1950] Maximum character length per message piece","   * @property {string} [char='\\n'] Character to split the message with","   * @property {string} [prepend=''] Text to prepend to every piece except the first","   * @property {string} [append=''] Text to append to every piece except the last","   */","","  /**","   * Send a message to this channel","   * @param {StringResolvable} [content] Text for the message","   * @param {MessageOptions} [options={}] Options for the message","   * @returns {Promise<Message|Message[]>}","   * @example","   * // send a message","   * channel.send('hello!')","   *  .then(message => console.log(`Sent message: ${message.content}`))","   *  .catch(console.error);","   */","  send(content, options) {","    if (!options && typeof content === 'object' && !(content instanceof Array)) {","      options = content;","      content = '';","    } else if (!options) {","      options = {};","    }","    if (options.file) {","      if (typeof options.file === 'string') options.file = { attachment: options.file };","      if (!options.file.name) {","        if (typeof options.file.attachment === 'string') {","          options.file.name = path.basename(options.file.attachment);","        } else if (options.file.attachment && options.file.attachment.path) {","          options.file.name = path.basename(options.file.attachment.path);","        } else {","          options.file.name = 'file.jpg';","        }","      }","      return this.client.resolver.resolveBuffer(options.file.attachment).then(file =>","        this.client.rest.methods.sendMessage(this, content, options, {","          file,","          name: options.file.name,","        })","      );","    }","    return this.client.rest.methods.sendMessage(this, content, options);","  }","","  /**","   * Send a message to this channel","   * @param {StringResolvable} content Text for the message","   * @param {MessageOptions} [options={}] Options for the message","   * @returns {Promise<Message|Message[]>}","   * @example","   * // send a message","   * channel.sendMessage('hello!')","   *  .then(message => console.log(`Sent message: ${message.content}`))","   *  .catch(console.error);","   */","  sendMessage(content, options) {","    return this.send(content, options);","  }","","  /**","   * Send an embed to this channel","   * @param {RichEmbed|Object} embed Embed for the message","   * @param {string} [content] Text for the message","   * @param {MessageOptions} [options] Options for the message","   * @returns {Promise<Message>}","   */","  sendEmbed(embed, content, options) {","    if (!options && typeof content === 'object') {","      options = content;","      content = '';","    } else if (!options) {","      options = {};","    }","    return this.send(content, Object.assign(options, { embed }));","  }","","  /**","   * Send a file to this channel","   * @param {BufferResolvable} attachment File to send","   * @param {string} [name='file.jpg'] Name and extension of the file","   * @param {StringResolvable} [content] Text for the message","   * @param {MessageOptions} [options] Options for the message","   * @returns {Promise<Message>}","   */","  sendFile(attachment, name, content, options = {}) {","    return this.send(content, Object.assign(options, { file: { attachment, name } }));","  }","","  /**","   * Send a code block to this channel","   * @param {string} lang Language for the code block","   * @param {StringResolvable} content Content of the code block","   * @param {MessageOptions} [options] Options for the message","   * @returns {Promise<Message|Message[]>}","   */","  sendCode(lang, content, options = {}) {","    return this.send(content, Object.assign(options, { code: lang }));","  }","","  /**","   * Gets a single message from this channel, regardless of it being cached or not.","   * <warn>This is only available when using a bot account.</warn>","   * @param {string} messageID ID of the message to get","   * @returns {Promise<Message>}","   * @example","   * // get message","   * channel.fetchMessage('99539446449315840')","   *   .then(message => console.log(message.content))","   *   .catch(console.error);","   */","  fetchMessage(messageID) {","    return this.client.rest.methods.getChannelMessage(this, messageID).then(data => {","      const msg = data instanceof Message ? data : new Message(this, data, this.client);","      this._cacheMessage(msg);","      return msg;","    });","  }","","  /**","   * The parameters to pass in when requesting previous messages from a channel. `around`, `before` and","   * `after` are mutually exclusive. All the parameters are optional.","   * @typedef {Object} ChannelLogsQueryOptions","   * @property {number} [limit=50] Number of messages to acquire","   * @property {string} [before] ID of a message to get the messages that were posted before it","   * @property {string} [after] ID of a message to get the messages that were posted after it","   * @property {string} [around] ID of a message to get the messages that were posted around it","   */","","  /**","   * Gets the past messages sent in this channel. Resolves with a collection mapping message ID's to Message objects.","   * @param {ChannelLogsQueryOptions} [options={}] Query parameters to pass in","   * @returns {Promise<Collection<string, Message>>}","   * @example","   * // get messages","   * channel.fetchMessages({limit: 10})","   *  .then(messages => console.log(`Received ${messages.size} messages`))","   *  .catch(console.error);","   */","  fetchMessages(options = {}) {","    return this.client.rest.methods.getChannelMessages(this, options).then(data => {","      const messages = new Collection();","      for (const message of data) {","        const msg = new Message(this, message, this.client);","        messages.set(message.id, msg);","        this._cacheMessage(msg);","      }","      return messages;","    });","  }","","  /**","   * Fetches the pinned messages of this channel and returns a collection of them.","   * @returns {Promise<Collection<string, Message>>}","   */","  fetchPinnedMessages() {","    return this.client.rest.methods.getChannelPinnedMessages(this).then(data => {","      const messages = new Collection();","      for (const message of data) {","        const msg = new Message(this, message, this.client);","        messages.set(message.id, msg);","        this._cacheMessage(msg);","      }","      return messages;","    });","  }","","  /**","   * Starts a typing indicator in the channel.","   * @param {number} [count] The number of times startTyping should be considered to have been called","   * @example","   * // start typing in a channel","   * channel.startTyping();","   */","  startTyping(count) {","    if (typeof count !== 'undefined' && count < 1) throw new RangeError('Count must be at least 1.');","    if (!this.client.user._typing.has(this.id)) {","      this.client.user._typing.set(this.id, {","        count: count || 1,","        interval: this.client.setInterval(() => {","          this.client.rest.methods.sendTyping(this.id);","        }, 4000),","      });","      this.client.rest.methods.sendTyping(this.id);","    } else {","      const entry = this.client.user._typing.get(this.id);","      entry.count = count || entry.count + 1;","    }","  }","","  /**","   * Stops the typing indicator in the channel.","   * The indicator will only stop if this is called as many times as startTyping().","   * <info>It can take a few seconds for the client user to stop typing.</info>","   * @param {boolean} [force=false] Whether or not to reset the call count and force the indicator to stop","   * @example","   * // stop typing in a channel","   * channel.stopTyping();","   * @example","   * // force typing to fully stop in a channel","   * channel.stopTyping(true);","   */","  stopTyping(force = false) {","    if (this.client.user._typing.has(this.id)) {","      const entry = this.client.user._typing.get(this.id);","      entry.count--;","      if (entry.count <= 0 || force) {","        this.client.clearInterval(entry.interval);","        this.client.user._typing.delete(this.id);","      }","    }","  }","","  /**","   * Whether or not the typing indicator is being shown in the channel.","   * @type {boolean}","   * @readonly","   */","  get typing() {","    return this.client.user._typing.has(this.id);","  }","","  /**","   * Number of times `startTyping` has been called.","   * @type {number}","   * @readonly","   */","  get typingCount() {","    if (this.client.user._typing.has(this.id)) return this.client.user._typing.get(this.id).count;","    return 0;","  }","","  /**","   * Creates a Message Collector","   * @param {CollectorFilterFunction} filter The filter to create the collector with","   * @param {CollectorOptions} [options={}] The options to pass to the collector","   * @returns {MessageCollector}","   * @example","   * // create a message collector","   * const collector = channel.createCollector(","   *  m => m.content.includes('discord'),","   *  { time: 15000 }","   * );","   * collector.on('message', m => console.log(`Collected ${m.content}`));","   * collector.on('end', collected => console.log(`Collected ${collected.size} items`));","   */","  createCollector(filter, options = {}) {","    return new MessageCollector(this, filter, options);","  }","","  /**","   * An object containing the same properties as CollectorOptions, but a few more:","   * @typedef {CollectorOptions} AwaitMessagesOptions","   * @property {string[]} [errors] Stop/end reasons that cause the promise to reject","   */","","  /**","   * Similar to createCollector but in promise form. Resolves with a collection of messages that pass the specified","   * filter.","   * @param {CollectorFilterFunction} filter The filter function to use","   * @param {AwaitMessagesOptions} [options={}] Optional options to pass to the internal collector","   * @returns {Promise<Collection<string, Message>>}","   * @example","   * // await !vote messages","   * const filter = m => m.content.startsWith('!vote');","   * // errors: ['time'] treats ending because of the time limit as an error","   * channel.awaitMessages(filter, { max: 4, time: 60000, errors: ['time'] })","   *  .then(collected => console.log(collected.size))","   *  .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));","   */","  awaitMessages(filter, options = {}) {","    return new Promise((resolve, reject) => {","      const collector = this.createCollector(filter, options);","      collector.on('end', (collection, reason) => {","        if (options.errors && options.errors.includes(reason)) {","          reject(collection);","        } else {","          resolve(collection);","        }","      });","    });","  }","","  /**","   * Bulk delete given messages.","   * <warn>This is only available when using a bot account.</warn>","   * @param {Collection<string, Message>|Message[]|number} messages Messages to delete, or number of messages to delete","   * @returns {Promise<Collection<string, Message>>} Deleted messages","   */","  bulkDelete(messages) {","    if (!isNaN(messages)) return this.fetchMessages({ limit: messages }).then(msgs => this.bulkDelete(msgs));","    if (messages instanceof Array || messages instanceof Collection) {","      const messageIDs = messages instanceof Collection ? messages.keyArray() : messages.map(m => m.id);","      return this.client.rest.methods.bulkDeleteMessages(this, messageIDs);","    }","    throw new TypeError('The messages must be an Array, Collection, or number.');","  }","","  _cacheMessage(message) {","    const maxSize = this.client.options.messageCacheMaxSize;","    if (maxSize === 0) return null;","    if (this.messages.size >= maxSize && maxSize > 0) this.messages.delete(this.messages.firstKey());","    this.messages.set(message.id, message);","    return message;","  }","}","","exports.applyToClass = (structure, full = false) => {","  const props = ['send', 'sendMessage', 'sendEmbed', 'sendFile', 'sendCode'];","  if (full) {","    props.push(","      '_cacheMessage',","      'fetchMessages',","      'fetchMessage',","      'bulkDelete',","      'startTyping',","      'stopTyping',","      'typing',","      'typingCount',","      'fetchPinnedMessages',","      'createCollector',","      'awaitMessages'","    );","  }","  for (const prop of props) {","    Object.defineProperty(structure.prototype, prop, Object.getOwnPropertyDescriptor(TextBasedChannel.prototype, prop));","  }","};",""],"l":{"1":20,"2":20,"3":0,"4":0,"17":0,"23":0,"68":0,"69":0,"70":0,"71":0,"72":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"82":0,"85":0,"86":0,"92":0,"107":0,"118":0,"119":0,"120":0,"121":0,"122":0,"124":0,"136":0,"147":0,"162":0,"163":0,"164":0,"165":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"197":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"213":0,"225":0,"226":0,"227":0,"230":0,"233":0,"235":0,"236":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"269":0,"278":0,"279":0,"297":0,"321":0,"322":0,"323":0,"324":0,"325":0,"327":0,"340":0,"341":0,"342":0,"343":0,"345":0,"349":0,"350":0,"351":0,"352":0,"353":0,"357":0,"358":0,"359":0,"360":0,"374":0,"375":0}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/Message.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/Message.js","s":{"1":22,"2":22,"3":22,"4":22,"5":22,"6":22,"7":22,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0,0,0,0,0,0],"75":[0,0],"76":[0,0],"77":[0,0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":13},"end":{"line":15,"column":37}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":7},"end":{"line":33,"column":14}}},"3":{"name":"(anonymous_3)","line":177,"loc":{"start":{"line":177,"column":7},"end":{"line":177,"column":14}}},"4":{"name":"(anonymous_4)","line":242,"loc":{"start":{"line":242,"column":15},"end":{"line":242,"column":18}}},"5":{"name":"(anonymous_5)","line":251,"loc":{"start":{"line":251,"column":14},"end":{"line":251,"column":17}}},"6":{"name":"(anonymous_6)","line":260,"loc":{"start":{"line":260,"column":11},"end":{"line":260,"column":14}}},"7":{"name":"(anonymous_7)","line":270,"loc":{"start":{"line":270,"column":18},"end":{"line":270,"column":21}}},"8":{"name":"(anonymous_8)","line":308,"loc":{"start":{"line":308,"column":11},"end":{"line":308,"column":14}}},"9":{"name":"(anonymous_9)","line":319,"loc":{"start":{"line":319,"column":14},"end":{"line":319,"column":17}}},"10":{"name":"(anonymous_10)","line":328,"loc":{"start":{"line":328,"column":15},"end":{"line":328,"column":18}}},"11":{"name":"(anonymous_11)","line":339,"loc":{"start":{"line":339,"column":14},"end":{"line":339,"column":17}}},"12":{"name":"(anonymous_12)","line":350,"loc":{"start":{"line":350,"column":13},"end":{"line":350,"column":20}}},"13":{"name":"(anonymous_13)","line":361,"loc":{"start":{"line":361,"column":19},"end":{"line":361,"column":28}}},"14":{"name":"(anonymous_14)","line":386,"loc":{"start":{"line":386,"column":6},"end":{"line":386,"column":25}}},"15":{"name":"(anonymous_15)","line":402,"loc":{"start":{"line":402,"column":10},"end":{"line":402,"column":26}}},"16":{"name":"(anonymous_16)","line":411,"loc":{"start":{"line":411,"column":5},"end":{"line":411,"column":8}}},"17":{"name":"(anonymous_17)","line":419,"loc":{"start":{"line":419,"column":7},"end":{"line":419,"column":10}}},"18":{"name":"(anonymous_18)","line":428,"loc":{"start":{"line":428,"column":7},"end":{"line":428,"column":15}}},"19":{"name":"(anonymous_19)","line":439,"loc":{"start":{"line":439,"column":16},"end":{"line":439,"column":19}}},"20":{"name":"(anonymous_20)","line":453,"loc":{"start":{"line":453,"column":8},"end":{"line":453,"column":22}}},"21":{"name":"(anonymous_21)","line":476,"loc":{"start":{"line":476,"column":7},"end":{"line":476,"column":31}}},"22":{"name":"(anonymous_22)","line":485,"loc":{"start":{"line":485,"column":14},"end":{"line":485,"column":17}}},"23":{"name":"(anonymous_23)","line":498,"loc":{"start":{"line":498,"column":8},"end":{"line":498,"column":27}}},"24":{"name":"(anonymous_24)","line":527,"loc":{"start":{"line":527,"column":10},"end":{"line":527,"column":13}}},"25":{"name":"(anonymous_25)","line":531,"loc":{"start":{"line":531,"column":14},"end":{"line":531,"column":28}}},"26":{"name":"(anonymous_26)","line":549,"loc":{"start":{"line":549,"column":17},"end":{"line":549,"column":31}}},"27":{"name":"(anonymous_27)","line":563,"loc":{"start":{"line":563,"column":17},"end":{"line":563,"column":20}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":50}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":40}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":53}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":49}},"5":{"start":{"line":5,"column":0},"end":{"line":5,"column":47}},"6":{"start":{"line":6,"column":0},"end":{"line":6,"column":57}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":30}},"8":{"start":{"line":22,"column":4},"end":{"line":22,"column":61}},"9":{"start":{"line":28,"column":4},"end":{"line":28,"column":27}},"10":{"start":{"line":30,"column":4},"end":{"line":30,"column":31}},"11":{"start":{"line":30,"column":14},"end":{"line":30,"column":31}},"12":{"start":{"line":38,"column":4},"end":{"line":38,"column":22}},"13":{"start":{"line":44,"column":4},"end":{"line":44,"column":50}},"14":{"start":{"line":50,"column":4},"end":{"line":50,"column":32}},"15":{"start":{"line":56,"column":4},"end":{"line":56,"column":63}},"16":{"start":{"line":63,"column":4},"end":{"line":63,"column":77}},"17":{"start":{"line":69,"column":4},"end":{"line":69,"column":30}},"18":{"start":{"line":75,"column":4},"end":{"line":75,"column":24}},"19":{"start":{"line":81,"column":4},"end":{"line":81,"column":28}},"20":{"start":{"line":87,"column":4},"end":{"line":87,"column":34}},"21":{"start":{"line":93,"column":4},"end":{"line":93,"column":59}},"22":{"start":{"line":93,"column":39},"end":{"line":93,"column":57}},"23":{"start":{"line":99,"column":4},"end":{"line":99,"column":40}},"24":{"start":{"line":100,"column":4},"end":{"line":100,"column":117}},"25":{"start":{"line":100,"column":47},"end":{"line":100,"column":117}},"26":{"start":{"line":106,"column":4},"end":{"line":106,"column":63}},"27":{"start":{"line":112,"column":4},"end":{"line":112,"column":100}},"28":{"start":{"line":123,"column":4},"end":{"line":128,"column":6}},"29":{"start":{"line":130,"column":4},"end":{"line":138,"column":5}},"30":{"start":{"line":131,"column":6},"end":{"line":131,"column":51}},"31":{"start":{"line":132,"column":6},"end":{"line":137,"column":7}},"32":{"start":{"line":133,"column":8},"end":{"line":133,"column":47}},"33":{"start":{"line":135,"column":8},"end":{"line":135,"column":56}},"34":{"start":{"line":136,"column":8},"end":{"line":136,"column":47}},"35":{"start":{"line":140,"column":4},"end":{"line":145,"column":5}},"36":{"start":{"line":141,"column":6},"end":{"line":144,"column":7}},"37":{"start":{"line":142,"column":8},"end":{"line":142,"column":59}},"38":{"start":{"line":143,"column":8},"end":{"line":143,"column":57}},"39":{"start":{"line":143,"column":18},"end":{"line":143,"column":57}},"40":{"start":{"line":147,"column":4},"end":{"line":153,"column":5}},"41":{"start":{"line":148,"column":6},"end":{"line":148,"column":78}},"42":{"start":{"line":149,"column":6},"end":{"line":152,"column":7}},"43":{"start":{"line":150,"column":8},"end":{"line":150,"column":86}},"44":{"start":{"line":151,"column":8},"end":{"line":151,"column":60}},"45":{"start":{"line":151,"column":18},"end":{"line":151,"column":60}},"46":{"start":{"line":155,"column":4},"end":{"line":155,"column":21}},"47":{"start":{"line":161,"column":4},"end":{"line":161,"column":38}},"48":{"start":{"line":163,"column":4},"end":{"line":168,"column":5}},"49":{"start":{"line":164,"column":6},"end":{"line":167,"column":7}},"50":{"start":{"line":165,"column":8},"end":{"line":165,"column":107}},"51":{"start":{"line":166,"column":8},"end":{"line":166,"column":103}},"52":{"start":{"line":174,"column":4},"end":{"line":174,"column":45}},"53":{"start":{"line":178,"column":4},"end":{"line":181,"column":5}},"54":{"start":{"line":179,"column":6},"end":{"line":179,"column":58}},"55":{"start":{"line":180,"column":6},"end":{"line":180,"column":67}},"56":{"start":{"line":180,"column":22},"end":{"line":180,"column":67}},"57":{"start":{"line":182,"column":4},"end":{"line":182,"column":50}},"58":{"start":{"line":182,"column":22},"end":{"line":182,"column":50}},"59":{"start":{"line":183,"column":4},"end":{"line":183,"column":83}},"60":{"start":{"line":183,"column":24},"end":{"line":183,"column":83}},"61":{"start":{"line":184,"column":4},"end":{"line":186,"column":5}},"62":{"start":{"line":185,"column":6},"end":{"line":185,"column":102}},"63":{"start":{"line":187,"column":4},"end":{"line":187,"column":43}},"64":{"start":{"line":187,"column":23},"end":{"line":187,"column":43}},"65":{"start":{"line":188,"column":4},"end":{"line":188,"column":83}},"66":{"start":{"line":188,"column":36},"end":{"line":188,"column":83}},"67":{"start":{"line":189,"column":4},"end":{"line":189,"column":44}},"68":{"start":{"line":189,"column":20},"end":{"line":189,"column":44}},"69":{"start":{"line":190,"column":4},"end":{"line":190,"column":76}},"70":{"start":{"line":190,"column":21},"end":{"line":190,"column":76}},"71":{"start":{"line":190,"column":56},"end":{"line":190,"column":74}},"72":{"start":{"line":191,"column":4},"end":{"line":194,"column":5}},"73":{"start":{"line":192,"column":6},"end":{"line":192,"column":26}},"74":{"start":{"line":193,"column":6},"end":{"line":193,"column":46}},"75":{"start":{"line":193,"column":27},"end":{"line":193,"column":46}},"76":{"start":{"line":195,"column":4},"end":{"line":200,"column":5}},"77":{"start":{"line":196,"column":6},"end":{"line":196,"column":42}},"78":{"start":{"line":197,"column":6},"end":{"line":199,"column":7}},"79":{"start":{"line":198,"column":8},"end":{"line":198,"column":78}},"80":{"start":{"line":201,"column":4},"end":{"line":211,"column":5}},"81":{"start":{"line":202,"column":6},"end":{"line":210,"column":7}},"82":{"start":{"line":203,"column":8},"end":{"line":203,"column":53}},"83":{"start":{"line":204,"column":8},"end":{"line":209,"column":9}},"84":{"start":{"line":205,"column":10},"end":{"line":205,"column":49}},"85":{"start":{"line":207,"column":10},"end":{"line":207,"column":58}},"86":{"start":{"line":208,"column":10},"end":{"line":208,"column":49}},"87":{"start":{"line":212,"column":4},"end":{"line":217,"column":5}},"88":{"start":{"line":213,"column":6},"end":{"line":216,"column":7}},"89":{"start":{"line":214,"column":8},"end":{"line":214,"column":59}},"90":{"start":{"line":215,"column":8},"end":{"line":215,"column":57}},"91":{"start":{"line":215,"column":18},"end":{"line":215,"column":57}},"92":{"start":{"line":218,"column":4},"end":{"line":218,"column":35}},"93":{"start":{"line":218,"column":17},"end":{"line":218,"column":35}},"94":{"start":{"line":219,"column":4},"end":{"line":225,"column":5}},"95":{"start":{"line":220,"column":6},"end":{"line":220,"column":78}},"96":{"start":{"line":221,"column":6},"end":{"line":224,"column":7}},"97":{"start":{"line":222,"column":8},"end":{"line":222,"column":86}},"98":{"start":{"line":223,"column":8},"end":{"line":223,"column":60}},"99":{"start":{"line":223,"column":18},"end":{"line":223,"column":60}},"100":{"start":{"line":226,"column":4},"end":{"line":234,"column":5}},"101":{"start":{"line":227,"column":6},"end":{"line":227,"column":40}},"102":{"start":{"line":228,"column":6},"end":{"line":233,"column":7}},"103":{"start":{"line":229,"column":8},"end":{"line":232,"column":9}},"104":{"start":{"line":230,"column":10},"end":{"line":230,"column":109}},"105":{"start":{"line":231,"column":10},"end":{"line":231,"column":93}},"106":{"start":{"line":243,"column":4},"end":{"line":243,"column":43}},"107":{"start":{"line":252,"column":4},"end":{"line":252,"column":72}},"108":{"start":{"line":261,"column":4},"end":{"line":261,"column":38}},"109":{"start":{"line":271,"column":4},"end":{"line":299,"column":9}},"110":{"start":{"line":274,"column":8},"end":{"line":274,"column":49}},"111":{"start":{"line":275,"column":8},"end":{"line":277,"column":9}},"112":{"start":{"line":276,"column":10},"end":{"line":276,"column":94}},"113":{"start":{"line":279,"column":8},"end":{"line":279,"column":58}},"114":{"start":{"line":280,"column":8},"end":{"line":287,"column":9}},"115":{"start":{"line":281,"column":10},"end":{"line":281,"column":60}},"116":{"start":{"line":281,"column":31},"end":{"line":281,"column":60}},"117":{"start":{"line":282,"column":10},"end":{"line":282,"column":44}},"118":{"start":{"line":284,"column":10},"end":{"line":284,"column":49}},"119":{"start":{"line":285,"column":10},"end":{"line":285,"column":47}},"120":{"start":{"line":285,"column":20},"end":{"line":285,"column":47}},"121":{"start":{"line":286,"column":10},"end":{"line":286,"column":23}},"122":{"start":{"line":290,"column":8},"end":{"line":290,"column":78}},"123":{"start":{"line":291,"column":8},"end":{"line":291,"column":47}},"124":{"start":{"line":291,"column":21},"end":{"line":291,"column":47}},"125":{"start":{"line":292,"column":8},"end":{"line":292,"column":21}},"126":{"start":{"line":295,"column":8},"end":{"line":295,"column":86}},"127":{"start":{"line":295,"column":73},"end":{"line":295,"column":86}},"128":{"start":{"line":296,"column":8},"end":{"line":296,"column":73}},"129":{"start":{"line":297,"column":8},"end":{"line":297,"column":41}},"130":{"start":{"line":297,"column":18},"end":{"line":297,"column":41}},"131":{"start":{"line":298,"column":8},"end":{"line":298,"column":21}},"132":{"start":{"line":309,"column":4},"end":{"line":309,"column":37}},"133":{"start":{"line":310,"column":4},"end":{"line":310,"column":23}},"134":{"start":{"line":311,"column":4},"end":{"line":311,"column":16}},"135":{"start":{"line":320,"column":4},"end":{"line":320,"column":50}},"136":{"start":{"line":329,"column":4},"end":{"line":331,"column":6}},"137":{"start":{"line":340,"column":4},"end":{"line":341,"column":109}},"138":{"start":{"line":351,"column":4},"end":{"line":351,"column":44}},"139":{"start":{"line":352,"column":4},"end":{"line":352,"column":110}},"140":{"start":{"line":362,"column":4},"end":{"line":362,"column":44}},"141":{"start":{"line":362,"column":32},"end":{"line":362,"column":44}},"142":{"start":{"line":363,"column":4},"end":{"line":363,"column":56}},"143":{"start":{"line":363,"column":44},"end":{"line":363,"column":56}},"144":{"start":{"line":364,"column":4},"end":{"line":364,"column":116}},"145":{"start":{"line":364,"column":72},"end":{"line":364,"column":101}},"146":{"start":{"line":364,"column":104},"end":{"line":364,"column":116}},"147":{"start":{"line":365,"column":4},"end":{"line":365,"column":17}},"148":{"start":{"line":387,"column":4},"end":{"line":392,"column":5}},"149":{"start":{"line":388,"column":6},"end":{"line":388,"column":24}},"150":{"start":{"line":389,"column":6},"end":{"line":389,"column":19}},"151":{"start":{"line":390,"column":11},"end":{"line":392,"column":5}},"152":{"start":{"line":391,"column":6},"end":{"line":391,"column":19}},"153":{"start":{"line":393,"column":4},"end":{"line":393,"column":74}},"154":{"start":{"line":403,"column":4},"end":{"line":403,"column":80}},"155":{"start":{"line":404,"column":4},"end":{"line":404,"column":64}},"156":{"start":{"line":412,"column":4},"end":{"line":412,"column":53}},"157":{"start":{"line":420,"column":4},"end":{"line":420,"column":55}},"158":{"start":{"line":429,"column":4},"end":{"line":429,"column":63}},"159":{"start":{"line":430,"column":4},"end":{"line":430,"column":85}},"160":{"start":{"line":430,"column":16},"end":{"line":430,"column":85}},"161":{"start":{"line":432,"column":4},"end":{"line":432,"column":68}},"162":{"start":{"line":440,"column":4},"end":{"line":440,"column":65}},"163":{"start":{"line":454,"column":4},"end":{"line":462,"column":5}},"164":{"start":{"line":455,"column":6},"end":{"line":455,"column":58}},"165":{"start":{"line":457,"column":6},"end":{"line":461,"column":9}},"166":{"start":{"line":458,"column":8},"end":{"line":460,"column":20}},"167":{"start":{"line":459,"column":10},"end":{"line":459,"column":33}},"168":{"start":{"line":477,"column":4},"end":{"line":477,"column":99}},"169":{"start":{"line":478,"column":4},"end":{"line":478,"column":47}},"170":{"start":{"line":486,"column":4},"end":{"line":486,"column":100}},"171":{"start":{"line":486,"column":25},"end":{"line":486,"column":100}},"172":{"start":{"line":487,"column":4},"end":{"line":487,"column":52}},"173":{"start":{"line":499,"column":4},"end":{"line":499,"column":31}},"174":{"start":{"line":499,"column":18},"end":{"line":499,"column":31}},"175":{"start":{"line":500,"column":4},"end":{"line":500,"column":64}},"176":{"start":{"line":501,"column":4},"end":{"line":501,"column":99}},"177":{"start":{"line":501,"column":21},"end":{"line":501,"column":99}},"178":{"start":{"line":503,"column":4},"end":{"line":509,"column":63}},"179":{"start":{"line":511,"column":4},"end":{"line":515,"column":5}},"180":{"start":{"line":512,"column":6},"end":{"line":514,"column":78}},"181":{"start":{"line":517,"column":4},"end":{"line":517,"column":17}},"182":{"start":{"line":528,"column":4},"end":{"line":528,"column":24}},"183":{"start":{"line":532,"column":4},"end":{"line":532,"column":72}},"184":{"start":{"line":533,"column":4},"end":{"line":533,"column":17}},"185":{"start":{"line":534,"column":4},"end":{"line":540,"column":5}},"186":{"start":{"line":535,"column":6},"end":{"line":535,"column":45}},"187":{"start":{"line":536,"column":6},"end":{"line":536,"column":70}},"188":{"start":{"line":536,"column":24},"end":{"line":536,"column":70}},"189":{"start":{"line":538,"column":6},"end":{"line":538,"column":86}},"190":{"start":{"line":539,"column":6},"end":{"line":539,"column":44}},"191":{"start":{"line":541,"column":4},"end":{"line":545,"column":5}},"192":{"start":{"line":542,"column":6},"end":{"line":542,"column":40}},"193":{"start":{"line":543,"column":6},"end":{"line":543,"column":23}},"194":{"start":{"line":544,"column":6},"end":{"line":544,"column":22}},"195":{"start":{"line":546,"column":4},"end":{"line":546,"column":16}},"196":{"start":{"line":550,"column":4},"end":{"line":550,"column":38}},"197":{"start":{"line":551,"column":4},"end":{"line":559,"column":5}},"198":{"start":{"line":552,"column":6},"end":{"line":552,"column":51}},"199":{"start":{"line":553,"column":6},"end":{"line":558,"column":7}},"200":{"start":{"line":554,"column":8},"end":{"line":554,"column":39}},"201":{"start":{"line":555,"column":8},"end":{"line":555,"column":25}},"202":{"start":{"line":556,"column":8},"end":{"line":556,"column":65}},"203":{"start":{"line":556,"column":45},"end":{"line":556,"column":65}},"204":{"start":{"line":557,"column":8},"end":{"line":557,"column":24}},"205":{"start":{"line":560,"column":4},"end":{"line":560,"column":16}},"206":{"start":{"line":564,"column":4},"end":{"line":564,"column":27}},"207":{"start":{"line":568,"column":0},"end":{"line":568,"column":25}}},"branchMap":{"1":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":4},"end":{"line":30,"column":4}},{"start":{"line":30,"column":4},"end":{"line":30,"column":4}}]},"2":{"line":63,"type":"cond-expr","locations":[{"start":{"line":63,"column":31},"end":{"line":63,"column":69}},{"start":{"line":63,"column":72},"end":{"line":63,"column":76}}]},"3":{"line":63,"type":"binary-expr","locations":[{"start":{"line":63,"column":31},"end":{"line":63,"column":61}},{"start":{"line":63,"column":65},"end":{"line":63,"column":69}}]},"4":{"line":112,"type":"cond-expr","locations":[{"start":{"line":112,"column":51},"end":{"line":112,"column":92}},{"start":{"line":112,"column":95},"end":{"line":112,"column":99}}]},"5":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":6},"end":{"line":132,"column":6}},{"start":{"line":132,"column":6},"end":{"line":132,"column":6}}]},"6":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":4},"end":{"line":140,"column":4}},{"start":{"line":140,"column":4},"end":{"line":140,"column":4}}]},"7":{"line":143,"type":"if","locations":[{"start":{"line":143,"column":8},"end":{"line":143,"column":8}},{"start":{"line":143,"column":8},"end":{"line":143,"column":8}}]},"8":{"line":147,"type":"if","locations":[{"start":{"line":147,"column":4},"end":{"line":147,"column":4}},{"start":{"line":147,"column":4},"end":{"line":147,"column":4}}]},"9":{"line":148,"type":"binary-expr","locations":[{"start":{"line":148,"column":31},"end":{"line":148,"column":71}},{"start":{"line":148,"column":75},"end":{"line":148,"column":77}}]},"10":{"line":151,"type":"if","locations":[{"start":{"line":151,"column":8},"end":{"line":151,"column":8}},{"start":{"line":151,"column":8},"end":{"line":151,"column":8}}]},"11":{"line":163,"type":"if","locations":[{"start":{"line":163,"column":4},"end":{"line":163,"column":4}},{"start":{"line":163,"column":4},"end":{"line":163,"column":4}}]},"12":{"line":163,"type":"binary-expr","locations":[{"start":{"line":163,"column":8},"end":{"line":163,"column":22}},{"start":{"line":163,"column":26},"end":{"line":163,"column":51}}]},"13":{"line":165,"type":"cond-expr","locations":[{"start":{"line":165,"column":39},"end":{"line":165,"column":84}},{"start":{"line":165,"column":87},"end":{"line":165,"column":106}}]},"14":{"line":174,"type":"binary-expr","locations":[{"start":{"line":174,"column":21},"end":{"line":174,"column":36}},{"start":{"line":174,"column":40},"end":{"line":174,"column":44}}]},"15":{"line":178,"type":"if","locations":[{"start":{"line":178,"column":4},"end":{"line":178,"column":4}},{"start":{"line":178,"column":4},"end":{"line":178,"column":4}}]},"16":{"line":180,"type":"if","locations":[{"start":{"line":180,"column":6},"end":{"line":180,"column":6}},{"start":{"line":180,"column":6},"end":{"line":180,"column":6}}]},"17":{"line":182,"type":"if","locations":[{"start":{"line":182,"column":4},"end":{"line":182,"column":4}},{"start":{"line":182,"column":4},"end":{"line":182,"column":4}}]},"18":{"line":183,"type":"if","locations":[{"start":{"line":183,"column":4},"end":{"line":183,"column":4}},{"start":{"line":183,"column":4},"end":{"line":183,"column":4}}]},"19":{"line":184,"type":"if","locations":[{"start":{"line":184,"column":4},"end":{"line":184,"column":4}},{"start":{"line":184,"column":4},"end":{"line":184,"column":4}}]},"20":{"line":185,"type":"cond-expr","locations":[{"start":{"line":185,"column":53},"end":{"line":185,"column":94}},{"start":{"line":185,"column":97},"end":{"line":185,"column":101}}]},"21":{"line":187,"type":"if","locations":[{"start":{"line":187,"column":4},"end":{"line":187,"column":4}},{"start":{"line":187,"column":4},"end":{"line":187,"column":4}}]},"22":{"line":188,"type":"if","locations":[{"start":{"line":188,"column":4},"end":{"line":188,"column":4}},{"start":{"line":188,"column":4},"end":{"line":188,"column":4}}]},"23":{"line":189,"type":"if","locations":[{"start":{"line":189,"column":4},"end":{"line":189,"column":4}},{"start":{"line":189,"column":4},"end":{"line":189,"column":4}}]},"24":{"line":190,"type":"if","locations":[{"start":{"line":190,"column":4},"end":{"line":190,"column":4}},{"start":{"line":190,"column":4},"end":{"line":190,"column":4}}]},"25":{"line":191,"type":"if","locations":[{"start":{"line":191,"column":4},"end":{"line":191,"column":4}},{"start":{"line":191,"column":4},"end":{"line":191,"column":4}}]},"26":{"line":193,"type":"if","locations":[{"start":{"line":193,"column":6},"end":{"line":193,"column":6}},{"start":{"line":193,"column":6},"end":{"line":193,"column":6}}]},"27":{"line":195,"type":"if","locations":[{"start":{"line":195,"column":4},"end":{"line":195,"column":4}},{"start":{"line":195,"column":4},"end":{"line":195,"column":4}}]},"28":{"line":201,"type":"if","locations":[{"start":{"line":201,"column":4},"end":{"line":201,"column":4}},{"start":{"line":201,"column":4},"end":{"line":201,"column":4}}]},"29":{"line":204,"type":"if","locations":[{"start":{"line":204,"column":8},"end":{"line":204,"column":8}},{"start":{"line":204,"column":8},"end":{"line":204,"column":8}}]},"30":{"line":212,"type":"if","locations":[{"start":{"line":212,"column":4},"end":{"line":212,"column":4}},{"start":{"line":212,"column":4},"end":{"line":212,"column":4}}]},"31":{"line":215,"type":"if","locations":[{"start":{"line":215,"column":8},"end":{"line":215,"column":8}},{"start":{"line":215,"column":8},"end":{"line":215,"column":8}}]},"32":{"line":218,"type":"if","locations":[{"start":{"line":218,"column":4},"end":{"line":218,"column":4}},{"start":{"line":218,"column":4},"end":{"line":218,"column":4}}]},"33":{"line":219,"type":"if","locations":[{"start":{"line":219,"column":4},"end":{"line":219,"column":4}},{"start":{"line":219,"column":4},"end":{"line":219,"column":4}}]},"34":{"line":219,"type":"binary-expr","locations":[{"start":{"line":219,"column":8},"end":{"line":219,"column":26}},{"start":{"line":219,"column":30},"end":{"line":219,"column":42}}]},"35":{"line":220,"type":"binary-expr","locations":[{"start":{"line":220,"column":31},"end":{"line":220,"column":71}},{"start":{"line":220,"column":75},"end":{"line":220,"column":77}}]},"36":{"line":223,"type":"if","locations":[{"start":{"line":223,"column":8},"end":{"line":223,"column":8}},{"start":{"line":223,"column":8},"end":{"line":223,"column":8}}]},"37":{"line":226,"type":"if","locations":[{"start":{"line":226,"column":4},"end":{"line":226,"column":4}},{"start":{"line":226,"column":4},"end":{"line":226,"column":4}}]},"38":{"line":228,"type":"if","locations":[{"start":{"line":228,"column":6},"end":{"line":228,"column":6}},{"start":{"line":228,"column":6},"end":{"line":228,"column":6}}]},"39":{"line":230,"type":"cond-expr","locations":[{"start":{"line":230,"column":41},"end":{"line":230,"column":86}},{"start":{"line":230,"column":89},"end":{"line":230,"column":108}}]},"40":{"line":252,"type":"cond-expr","locations":[{"start":{"line":252,"column":34},"end":{"line":252,"column":64}},{"start":{"line":252,"column":67},"end":{"line":252,"column":71}}]},"41":{"line":261,"type":"binary-expr","locations":[{"start":{"line":261,"column":11},"end":{"line":261,"column":29}},{"start":{"line":261,"column":33},"end":{"line":261,"column":37}}]},"42":{"line":275,"type":"if","locations":[{"start":{"line":275,"column":8},"end":{"line":275,"column":8}},{"start":{"line":275,"column":8},"end":{"line":275,"column":8}}]},"43":{"line":275,"type":"binary-expr","locations":[{"start":{"line":275,"column":12},"end":{"line":275,"column":38}},{"start":{"line":275,"column":42},"end":{"line":275,"column":71}}]},"44":{"line":276,"type":"cond-expr","locations":[{"start":{"line":276,"column":45},"end":{"line":276,"column":85}},{"start":{"line":276,"column":88},"end":{"line":276,"column":93}}]},"45":{"line":280,"type":"if","locations":[{"start":{"line":280,"column":8},"end":{"line":280,"column":8}},{"start":{"line":280,"column":8},"end":{"line":280,"column":8}}]},"46":{"line":281,"type":"if","locations":[{"start":{"line":281,"column":10},"end":{"line":281,"column":10}},{"start":{"line":281,"column":10},"end":{"line":281,"column":10}}]},"47":{"line":285,"type":"if","locations":[{"start":{"line":285,"column":10},"end":{"line":285,"column":10}},{"start":{"line":285,"column":10},"end":{"line":285,"column":10}}]},"48":{"line":291,"type":"if","locations":[{"start":{"line":291,"column":8},"end":{"line":291,"column":8}},{"start":{"line":291,"column":8},"end":{"line":291,"column":8}}]},"49":{"line":295,"type":"if","locations":[{"start":{"line":295,"column":8},"end":{"line":295,"column":8}},{"start":{"line":295,"column":8},"end":{"line":295,"column":8}}]},"50":{"line":295,"type":"binary-expr","locations":[{"start":{"line":295,"column":12},"end":{"line":295,"column":38}},{"start":{"line":295,"column":42},"end":{"line":295,"column":71}}]},"51":{"line":297,"type":"if","locations":[{"start":{"line":297,"column":8},"end":{"line":297,"column":8}},{"start":{"line":297,"column":8},"end":{"line":297,"column":8}}]},"52":{"line":329,"type":"binary-expr","locations":[{"start":{"line":329,"column":11},"end":{"line":329,"column":49}},{"start":{"line":329,"column":54},"end":{"line":329,"column":64}},{"start":{"line":330,"column":6},"end":{"line":330,"column":108}}]},"53":{"line":340,"type":"binary-expr","locations":[{"start":{"line":340,"column":11},"end":{"line":340,"column":22}},{"start":{"line":341,"column":6},"end":{"line":341,"column":108}}]},"54":{"line":351,"type":"cond-expr","locations":[{"start":{"line":351,"column":29},"end":{"line":351,"column":36}},{"start":{"line":351,"column":39},"end":{"line":351,"column":43}}]},"55":{"line":351,"type":"binary-expr","locations":[{"start":{"line":351,"column":11},"end":{"line":351,"column":15}},{"start":{"line":351,"column":19},"end":{"line":351,"column":26}}]},"56":{"line":352,"type":"binary-expr","locations":[{"start":{"line":352,"column":11},"end":{"line":352,"column":40}},{"start":{"line":352,"column":44},"end":{"line":352,"column":76}},{"start":{"line":352,"column":80},"end":{"line":352,"column":109}}]},"57":{"line":362,"type":"if","locations":[{"start":{"line":362,"column":4},"end":{"line":362,"column":4}},{"start":{"line":362,"column":4},"end":{"line":362,"column":4}}]},"58":{"line":363,"type":"if","locations":[{"start":{"line":363,"column":4},"end":{"line":363,"column":4}},{"start":{"line":363,"column":4},"end":{"line":363,"column":4}}]},"59":{"line":364,"type":"if","locations":[{"start":{"line":364,"column":4},"end":{"line":364,"column":4}},{"start":{"line":364,"column":4},"end":{"line":364,"column":4}}]},"60":{"line":364,"type":"binary-expr","locations":[{"start":{"line":364,"column":8},"end":{"line":364,"column":45}},{"start":{"line":364,"column":49},"end":{"line":364,"column":102}}]},"61":{"line":387,"type":"if","locations":[{"start":{"line":387,"column":4},"end":{"line":387,"column":4}},{"start":{"line":387,"column":4},"end":{"line":387,"column":4}}]},"62":{"line":387,"type":"binary-expr","locations":[{"start":{"line":387,"column":8},"end":{"line":387,"column":16}},{"start":{"line":387,"column":20},"end":{"line":387,"column":47}}]},"63":{"line":390,"type":"if","locations":[{"start":{"line":390,"column":11},"end":{"line":390,"column":11}},{"start":{"line":390,"column":11},"end":{"line":390,"column":11}}]},"64":{"line":404,"type":"binary-expr","locations":[{"start":{"line":404,"column":30},"end":{"line":404,"column":34}},{"start":{"line":404,"column":38},"end":{"line":404,"column":40}}]},"65":{"line":430,"type":"if","locations":[{"start":{"line":430,"column":4},"end":{"line":430,"column":4}},{"start":{"line":430,"column":4},"end":{"line":430,"column":4}}]},"66":{"line":454,"type":"if","locations":[{"start":{"line":454,"column":4},"end":{"line":454,"column":4}},{"start":{"line":454,"column":4},"end":{"line":454,"column":4}}]},"67":{"line":477,"type":"cond-expr","locations":[{"start":{"line":477,"column":63},"end":{"line":477,"column":81}},{"start":{"line":477,"column":84},"end":{"line":477,"column":86}}]},"68":{"line":477,"type":"binary-expr","locations":[{"start":{"line":477,"column":17},"end":{"line":477,"column":27}},{"start":{"line":477,"column":31},"end":{"line":477,"column":60}}]},"69":{"line":486,"type":"if","locations":[{"start":{"line":486,"column":4},"end":{"line":486,"column":4}},{"start":{"line":486,"column":4},"end":{"line":486,"column":4}}]},"70":{"line":499,"type":"if","locations":[{"start":{"line":499,"column":4},"end":{"line":499,"column":4}},{"start":{"line":499,"column":4},"end":{"line":499,"column":4}}]},"71":{"line":500,"type":"binary-expr","locations":[{"start":{"line":500,"column":24},"end":{"line":500,"column":39}},{"start":{"line":500,"column":43},"end":{"line":500,"column":63}}]},"72":{"line":501,"type":"if","locations":[{"start":{"line":501,"column":4},"end":{"line":501,"column":4}},{"start":{"line":501,"column":4},"end":{"line":501,"column":4}}]},"73":{"line":501,"type":"binary-expr","locations":[{"start":{"line":501,"column":28},"end":{"line":501,"column":50}},{"start":{"line":501,"column":54},"end":{"line":501,"column":98}}]},"74":{"line":503,"type":"binary-expr","locations":[{"start":{"line":503,"column":16},"end":{"line":503,"column":38}},{"start":{"line":504,"column":8},"end":{"line":504,"column":44}},{"start":{"line":505,"column":8},"end":{"line":505,"column":40}},{"start":{"line":506,"column":8},"end":{"line":506,"column":32}},{"start":{"line":507,"column":8},"end":{"line":507,"column":36}},{"start":{"line":508,"column":8},"end":{"line":508,"column":52}},{"start":{"line":509,"column":8},"end":{"line":509,"column":62}}]},"75":{"line":511,"type":"if","locations":[{"start":{"line":511,"column":4},"end":{"line":511,"column":4}},{"start":{"line":511,"column":4},"end":{"line":511,"column":4}}]},"76":{"line":511,"type":"binary-expr","locations":[{"start":{"line":511,"column":8},"end":{"line":511,"column":13}},{"start":{"line":511,"column":17},"end":{"line":511,"column":24}}]},"77":{"line":512,"type":"binary-expr","locations":[{"start":{"line":512,"column":14},"end":{"line":512,"column":66}},{"start":{"line":513,"column":8},"end":{"line":513,"column":71}},{"start":{"line":514,"column":8},"end":{"line":514,"column":77}}]},"78":{"line":532,"type":"cond-expr","locations":[{"start":{"line":532,"column":31},"end":{"line":532,"column":58}},{"start":{"line":532,"column":61},"end":{"line":532,"column":71}}]},"79":{"line":534,"type":"if","locations":[{"start":{"line":534,"column":4},"end":{"line":534,"column":4}},{"start":{"line":534,"column":4},"end":{"line":534,"column":4}}]},"80":{"line":536,"type":"if","locations":[{"start":{"line":536,"column":6},"end":{"line":536,"column":6}},{"start":{"line":536,"column":6},"end":{"line":536,"column":6}}]},"81":{"line":541,"type":"if","locations":[{"start":{"line":541,"column":4},"end":{"line":541,"column":4}},{"start":{"line":541,"column":4},"end":{"line":541,"column":4}}]},"82":{"line":550,"type":"binary-expr","locations":[{"start":{"line":550,"column":20},"end":{"line":550,"column":28}},{"start":{"line":550,"column":32},"end":{"line":550,"column":37}}]},"83":{"line":551,"type":"if","locations":[{"start":{"line":551,"column":4},"end":{"line":551,"column":4}},{"start":{"line":551,"column":4},"end":{"line":551,"column":4}}]},"84":{"line":553,"type":"if","locations":[{"start":{"line":553,"column":6},"end":{"line":553,"column":6}},{"start":{"line":553,"column":6},"end":{"line":553,"column":6}}]},"85":{"line":556,"type":"if","locations":[{"start":{"line":556,"column":8},"end":{"line":556,"column":8}},{"start":{"line":556,"column":8},"end":{"line":556,"column":8}}]}},"code":["const Attachment = require('./MessageAttachment');","const Embed = require('./MessageEmbed');","const MessageReaction = require('./MessageReaction');","const Collection = require('../util/Collection');","const Constants = require('../util/Constants');","const escapeMarkdown = require('../util/EscapeMarkdown');","","// Done purely for GuildMember, which would cause a bad circular dependency","const Discord = require('..');","","/**"," * Represents a message on Discord"," */","class Message {","  constructor(channel, data, client) {","    /**","     * The Client that instantiated the Message","     * @name Message#client","     * @type {Client}","     * @readonly","     */","    Object.defineProperty(this, 'client', { value: client });","","    /**","     * The channel that the message was sent in","     * @type {TextChannel|DMChannel|GroupDMChannel}","     */","    this.channel = channel;","","    if (data) this.setup(data);","  }","","  setup(data) { // eslint-disable-line complexity","    /**","     * The ID of the message (unique in the channel it was sent)","     * @type {string}","     */","    this.id = data.id;","","    /**","     * The type of the message","     * @type {string}","     */","    this.type = Constants.MessageTypes[data.type];","","    /**","     * The content of the message","     * @type {string}","     */","    this.content = data.content;","","    /**","     * The author of the message","     * @type {User}","     */","    this.author = this.client.dataManager.newUser(data.author);","","    /**","     * Represents the author of the message as a guild member. Only available if the message comes from a guild","     * where the author is still a member.","     * @type {GuildMember}","     */","    this.member = this.guild ? this.guild.member(this.author) || null : null;","","    /**","     * Whether or not this message is pinned","     * @type {boolean}","     */","    this.pinned = data.pinned;","","    /**","     * Whether or not the message was Text-To-Speech","     * @type {boolean}","     */","    this.tts = data.tts;","","    /**","     * A random number used for checking message delivery","     * @type {string}","     */","    this.nonce = data.nonce;","","    /**","     * Whether or not this message was sent by Discord, not actually a user (e.g. pin notifications)","     * @type {boolean}","     */","    this.system = data.type === 6;","","    /**","     * A list of embeds in the message - e.g. YouTube Player","     * @type {MessageEmbed[]}","     */","    this.embeds = data.embeds.map(e => new Embed(this, e));","","    /**","     * A collection of attachments in the message - e.g. Pictures - mapped by their ID.","     * @type {Collection<string, MessageAttachment>}","     */","    this.attachments = new Collection();","    for (const attachment of data.attachments) this.attachments.set(attachment.id, new Attachment(this, attachment));","","    /**","     * The timestamp the message was sent at","     * @type {number}","     */","    this.createdTimestamp = new Date(data.timestamp).getTime();","","    /**","     * The timestamp the message was last edited at (if applicable)","     * @type {?number}","     */","    this.editedTimestamp = data.edited_timestamp ? new Date(data.edited_timestamp).getTime() : null;","","    /**","     * An object containing a further users, roles or channels collections","     * @type {Object}","     * @property {Collection<string, User>} mentions.users Mentioned users, maps their ID to the user object.","     * @property {Collection<string, Role>} mentions.roles Mentioned roles, maps their ID to the role object.","     * @property {Collection<string, GuildChannel>} mentions.channels Mentioned channels,","     * maps their ID to the channel object.","     * @property {boolean} mentions.everyone Whether or not @everyone was mentioned.","     */","    this.mentions = {","      users: new Collection(),","      roles: new Collection(),","      channels: new Collection(),","      everyone: data.mention_everyone,","    };","","    for (const mention of data.mentions) {","      let user = this.client.users.get(mention.id);","      if (user) {","        this.mentions.users.set(user.id, user);","      } else {","        user = this.client.dataManager.newUser(mention);","        this.mentions.users.set(user.id, user);","      }","    }","","    if (data.mention_roles) {","      for (const mention of data.mention_roles) {","        const role = this.channel.guild.roles.get(mention);","        if (role) this.mentions.roles.set(role.id, role);","      }","    }","","    if (this.channel.guild) {","      const channMentionsRaw = data.content.match(/<#([0-9]{14,20})>/g) || [];","      for (const raw of channMentionsRaw) {","        const chan = this.channel.guild.channels.get(raw.match(/([0-9]{14,20})/g)[0]);","        if (chan) this.mentions.channels.set(chan.id, chan);","      }","    }","","    this._edits = [];","","    /**","     * A collection of reactions to this message, mapped by the reaction \"id\".","     * @type {Collection<string, MessageReaction>}","     */","    this.reactions = new Collection();","","    if (data.reactions && data.reactions.length > 0) {","      for (const reaction of data.reactions) {","        const id = reaction.emoji.id ? `${reaction.emoji.name}:${reaction.emoji.id}` : reaction.emoji.name;","        this.reactions.set(id, new MessageReaction(this, reaction.emoji, reaction.count, reaction.me));","      }","    }","","    /**","     * ID of the webhook that sent the message, if applicable","     * @type {?string}","     */","    this.webhookID = data.webhook_id || null;","  }","","  patch(data) { // eslint-disable-line complexity","    if (data.author) {","      this.author = this.client.users.get(data.author.id);","      if (this.guild) this.member = this.guild.member(this.author);","    }","    if (data.content) this.content = data.content;","    if (data.timestamp) this.createdTimestamp = new Date(data.timestamp).getTime();","    if (data.edited_timestamp) {","      this.editedTimestamp = data.edited_timestamp ? new Date(data.edited_timestamp).getTime() : null;","    }","    if ('tts' in data) this.tts = data.tts;","    if ('mention_everyone' in data) this.mentions.everyone = data.mention_everyone;","    if (data.nonce) this.nonce = data.nonce;","    if (data.embeds) this.embeds = data.embeds.map(e => new Embed(this, e));","    if (data.type > -1) {","      this.system = false;","      if (data.type === 6) this.system = true;","    }","    if (data.attachments) {","      this.attachments = new Collection();","      for (const attachment of data.attachments) {","        this.attachments.set(attachment.id, new Attachment(this, attachment));","      }","    }","    if (data.mentions) {","      for (const mention of data.mentions) {","        let user = this.client.users.get(mention.id);","        if (user) {","          this.mentions.users.set(user.id, user);","        } else {","          user = this.client.dataManager.newUser(mention);","          this.mentions.users.set(user.id, user);","        }","      }","    }","    if (data.mention_roles) {","      for (const mention of data.mention_roles) {","        const role = this.channel.guild.roles.get(mention);","        if (role) this.mentions.roles.set(role.id, role);","      }","    }","    if (data.id) this.id = data.id;","    if (this.channel.guild && data.content) {","      const channMentionsRaw = data.content.match(/<#([0-9]{14,20})>/g) || [];","      for (const raw of channMentionsRaw) {","        const chan = this.channel.guild.channels.get(raw.match(/([0-9]{14,20})/g)[0]);","        if (chan) this.mentions.channels.set(chan.id, chan);","      }","    }","    if (data.reactions) {","      this.reactions = new Collection();","      if (data.reactions.length > 0) {","        for (const reaction of data.reactions) {","          const id = reaction.emoji.id ? `${reaction.emoji.name}:${reaction.emoji.id}` : reaction.emoji.name;","          this.reactions.set(id, new MessageReaction(this, data.emoji, data.count, data.me));","        }","      }","    }","  }","","  /**","   * The time the message was sent","   * @type {Date}","   * @readonly","   */","  get createdAt() {","    return new Date(this.createdTimestamp);","  }","","  /**","   * The time the message was last edited at (if applicable)","   * @type {?Date}","   * @readonly","   */","  get editedAt() {","    return this.editedTimestamp ? new Date(this.editedTimestamp) : null;","  }","","  /**","   * The guild the message was sent in (if in a guild channel)","   * @type {?Guild}","   * @readonly","   */","  get guild() {","    return this.channel.guild || null;","  }","","  /**","   * The message contents with all mentions replaced by the equivalent text. If mentions cannot be resolved to a name,","   * the relevant mention in the message content will not be converted.","   * @type {string}","   * @readonly","   */","  get cleanContent() {","    return this.content","      .replace(/@(everyone|here)/g, '@\\u200b$1')","      .replace(/<@!?[0-9]+>/g, (input) => {","        const id = input.replace(/<|!|>|@/g, '');","        if (this.channel.type === 'dm' || this.channel.type === 'group') {","          return this.client.users.has(id) ? `@${this.client.users.get(id).username}` : input;","        }","","        const member = this.channel.guild.members.get(id);","        if (member) {","          if (member.nickname) return `@${member.nickname}`;","          return `@${member.user.username}`;","        } else {","          const user = this.client.users.get(id);","          if (user) return `@${user.username}`;","          return input;","        }","      })","      .replace(/<#[0-9]+>/g, (input) => {","        const channel = this.client.channels.get(input.replace(/<|#|>/g, ''));","        if (channel) return `#${channel.name}`;","        return input;","      })","      .replace(/<@&[0-9]+>/g, (input) => {","        if (this.channel.type === 'dm' || this.channel.type === 'group') return input;","        const role = this.guild.roles.get(input.replace(/<|@|>|&/g, ''));","        if (role) return `@${role.name}`;","        return input;","      });","  }","","  /**","   * An array of cached versions of the message, including the current version.","   * Sorted from latest (first) to oldest (last).","   * @type {Message[]}","   * @readonly","   */","  get edits() {","    const copy = this._edits.slice();","    copy.unshift(this);","    return copy;","  }","","  /**","   * Whether the message is editable by the client user.","   * @type {boolean}","   * @readonly","   */","  get editable() {","    return this.author.id === this.client.user.id;","  }","","  /**","   * Whether the message is deletable by the client user.","   * @type {boolean}","   * @readonly","   */","  get deletable() {","    return this.author.id === this.client.user.id || (this.guild &&","      this.channel.permissionsFor(this.client.user).hasPermission(Constants.PermissionFlags.MANAGE_MESSAGES)","    );","  }","","  /**","   * Whether the message is pinnable by the client user.","   * @type {boolean}","   * @readonly","   */","  get pinnable() {","    return !this.guild ||","      this.channel.permissionsFor(this.client.user).hasPermission(Constants.PermissionFlags.MANAGE_MESSAGES);","  }","","  /**","   * Whether or not a user, channel or role is mentioned in this message.","   * @param {GuildChannel|User|Role|string} data either a guild channel, user or a role object, or a string representing","   * the ID of any of these.","   * @returns {boolean}","   */","  isMentioned(data) {","    data = data && data.id ? data.id : data;","    return this.mentions.users.has(data) || this.mentions.channels.has(data) || this.mentions.roles.has(data);","  }","","  /**","   * Whether or not a guild member is mentioned in this message. Takes into account","   * user mentions, role mentions, and @everyone/@here mentions.","   * @param {GuildMember|User} member Member/user to check for a mention of","   * @returns {boolean}","   */","  isMemberMentioned(member) {","    if (this.mentions.everyone) return true;","    if (this.mentions.users.has(member.id)) return true;","    if (member instanceof Discord.GuildMember && member.roles.some(r => this.mentions.roles.has(r.id))) return true;","    return false;","  }","","  /**","   * Options that can be passed into editMessage","   * @typedef {Object} MessageEditOptions","   * @property {Object} [embed] An embed to be added/edited","   * @property {string|boolean} [code] Language for optional codeblock formatting to apply","   */","","  /**","   * Edit the content of the message","   * @param {StringResolvable} [content] The new content for the message","   * @param {MessageEditOptions} [options] The options to provide","   * @returns {Promise<Message>}","   * @example","   * // update the content of a message","   * message.edit('This is my new content!')","   *  .then(msg => console.log(`Updated the content of a message from ${msg.author}`))","   *  .catch(console.error);","   */","  edit(content, options) {","    if (!options && typeof content === 'object') {","      options = content;","      content = '';","    } else if (!options) {","      options = {};","    }","    return this.client.rest.methods.updateMessage(this, content, options);","  }","","  /**","   * Edit the content of the message, with a code block","   * @param {string} lang Language for the code block","   * @param {StringResolvable} content The new content for the message","   * @returns {Promise<Message>}","   */","  editCode(lang, content) {","    content = escapeMarkdown(this.client.resolver.resolveString(content), true);","    return this.edit(`\\`\\`\\`${lang || ''}\\n${content}\\n\\`\\`\\``);","  }","","  /**","   * Pins this message to the channel's pinned messages","   * @returns {Promise<Message>}","   */","  pin() {","    return this.client.rest.methods.pinMessage(this);","  }","","  /**","   * Unpins this message from the channel's pinned messages","   * @returns {Promise<Message>}","   */","  unpin() {","    return this.client.rest.methods.unpinMessage(this);","  }","","  /**","   * Add a reaction to the message","   * @param {string|Emoji|ReactionEmoji} emoji Emoji to react with","   * @returns {Promise<MessageReaction>}","   */","  react(emoji) {","    emoji = this.client.resolver.resolveEmojiIdentifier(emoji);","    if (!emoji) throw new TypeError('Emoji must be a string or Emoji/ReactionEmoji');","","    return this.client.rest.methods.addMessageReaction(this, emoji);","  }","","  /**","   * Remove all reactions from a message","   * @returns {Promise<Message>}","   */","  clearReactions() {","    return this.client.rest.methods.removeMessageReactions(this);","  }","","  /**","   * Deletes the message","   * @param {number} [timeout=0] How long to wait to delete the message in milliseconds","   * @returns {Promise<Message>}","   * @example","   * // delete a message","   * message.delete()","   *  .then(msg => console.log(`Deleted message from ${msg.author}`))","   *  .catch(console.error);","   */","  delete(timeout = 0) {","    if (timeout <= 0) {","      return this.client.rest.methods.deleteMessage(this);","    } else {","      return new Promise(resolve => {","        this.client.setTimeout(() => {","          resolve(this.delete());","        }, timeout);","      });","    }","  }","","  /**","   * Reply to the message","   * @param {StringResolvable} content The content for the message","   * @param {MessageOptions} [options = {}] The options to provide","   * @returns {Promise<Message|Message[]>}","   * @example","   * // reply to a message","   * message.reply('Hey, I\\'m a reply!')","   *  .then(msg => console.log(`Sent a reply to ${msg.author}`))","   *  .catch(console.error);","   */","  reply(content, options = {}) {","    content = `${this.guild || this.channel.type === 'group' ? `${this.author}, ` : ''}${content}`;","    return this.channel.send(content, options);","  }","","  /**","   * Fetches the webhook used to create this message.","   * @returns {Promise<?Webhook>}","   */","  fetchWebhook() {","    if (!this.webhookID) return Promise.reject(new Error('The message was not sent by a webhook.'));","    return this.client.fetchWebhook(this.webhookID);","  }","","  /**","   * Used mainly internally. Whether two messages are identical in properties. If you want to compare messages","   * without checking all the properties, use `message.id === message2.id`, which is much more efficient. This","   * method allows you to see if there are differences in content, embeds, attachments, nonce and tts properties.","   * @param {Message} message The message to compare it to","   * @param {Object} rawData Raw data passed through the WebSocket about this message","   * @returns {boolean}","   */","  equals(message, rawData) {","    if (!message) return false;","    const embedUpdate = !message.author && !message.attachments;","    if (embedUpdate) return this.id === message.id && this.embeds.length === message.embeds.length;","","    let equal = this.id === message.id &&","        this.author.id === message.author.id &&","        this.content === message.content &&","        this.tts === message.tts &&","        this.nonce === message.nonce &&","        this.embeds.length === message.embeds.length &&","        this.attachments.length === message.attachments.length;","","    if (equal && rawData) {","      equal = this.mentions.everyone === message.mentions.everyone &&","        this.createdTimestamp === new Date(rawData.timestamp).getTime() &&","        this.editedTimestamp === new Date(rawData.edited_timestamp).getTime();","    }","","    return equal;","  }","","  /**","   * When concatenated with a string, this automatically concatenates the message's content instead of the object.","   * @returns {string}","   * @example","   * // logs: Message: This is a message!","   * console.log(`Message: ${message}`);","   */","  toString() {","    return this.content;","  }","","  _addReaction(emoji, user) {","    const emojiID = emoji.id ? `${emoji.name}:${emoji.id}` : emoji.name;","    let reaction;","    if (this.reactions.has(emojiID)) {","      reaction = this.reactions.get(emojiID);","      if (!reaction.me) reaction.me = user.id === this.client.user.id;","    } else {","      reaction = new MessageReaction(this, emoji, 0, user.id === this.client.user.id);","      this.reactions.set(emojiID, reaction);","    }","    if (!reaction.users.has(user.id)) {","      reaction.users.set(user.id, user);","      reaction.count++;","      return reaction;","    }","    return null;","  }","","  _removeReaction(emoji, user) {","    const emojiID = emoji.id || emoji;","    if (this.reactions.has(emojiID)) {","      const reaction = this.reactions.get(emojiID);","      if (reaction.users.has(user.id)) {","        reaction.users.delete(user.id);","        reaction.count--;","        if (user.id === this.client.user.id) reaction.me = false;","        return reaction;","      }","    }","    return null;","  }","","  _clearReactions() {","    this.reactions.clear();","  }","}","","module.exports = Message;",""],"l":{"1":22,"2":22,"3":22,"4":22,"5":22,"6":22,"9":22,"22":0,"28":0,"30":0,"38":0,"44":0,"50":0,"56":0,"63":0,"69":0,"75":0,"81":0,"87":0,"93":0,"99":0,"100":0,"106":0,"112":0,"123":0,"130":0,"131":0,"132":0,"133":0,"135":0,"136":0,"140":0,"141":0,"142":0,"143":0,"147":0,"148":0,"149":0,"150":0,"151":0,"155":0,"161":0,"163":0,"164":0,"165":0,"166":0,"174":0,"178":0,"179":0,"180":0,"182":0,"183":0,"184":0,"185":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"195":0,"196":0,"197":0,"198":0,"201":0,"202":0,"203":0,"204":0,"205":0,"207":0,"208":0,"212":0,"213":0,"214":0,"215":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"243":0,"252":0,"261":0,"271":0,"274":0,"275":0,"276":0,"279":0,"280":0,"281":0,"282":0,"284":0,"285":0,"286":0,"290":0,"291":0,"292":0,"295":0,"296":0,"297":0,"298":0,"309":0,"310":0,"311":0,"320":0,"329":0,"340":0,"351":0,"352":0,"362":0,"363":0,"364":0,"365":0,"387":0,"388":0,"389":0,"390":0,"391":0,"393":0,"403":0,"404":0,"412":0,"420":0,"429":0,"430":0,"432":0,"440":0,"454":0,"455":0,"457":0,"458":0,"459":0,"477":0,"478":0,"486":0,"487":0,"499":0,"500":0,"501":0,"503":0,"511":0,"512":0,"517":0,"528":0,"532":0,"533":0,"534":0,"535":0,"536":0,"538":0,"539":0,"541":0,"542":0,"543":0,"544":0,"546":0,"550":0,"551":0,"552":0,"553":0,"554":0,"555":0,"556":0,"557":0,"560":0,"564":0,"568":0}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/MessageAttachment.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/MessageAttachment.js","s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":5,"loc":{"start":{"line":5,"column":13},"end":{"line":5,"column":29}}},"2":{"name":"(anonymous_2)","line":23,"loc":{"start":{"line":23,"column":7},"end":{"line":23,"column":14}}}},"statementMap":{"1":{"start":{"line":12,"column":4},"end":{"line":12,"column":69}},"2":{"start":{"line":18,"column":4},"end":{"line":18,"column":27}},"3":{"start":{"line":20,"column":4},"end":{"line":20,"column":21}},"4":{"start":{"line":28,"column":4},"end":{"line":28,"column":22}},"5":{"start":{"line":34,"column":4},"end":{"line":34,"column":34}},"6":{"start":{"line":40,"column":4},"end":{"line":40,"column":30}},"7":{"start":{"line":46,"column":4},"end":{"line":46,"column":24}},"8":{"start":{"line":52,"column":4},"end":{"line":52,"column":35}},"9":{"start":{"line":58,"column":4},"end":{"line":58,"column":30}},"10":{"start":{"line":64,"column":4},"end":{"line":64,"column":28}},"11":{"start":{"line":68,"column":0},"end":{"line":68,"column":35}}},"branchMap":{},"code":["/**"," * Represents an attachment in a message"," */","class MessageAttachment {","  constructor(message, data) {","    /**","     * The Client that instantiated this MessageAttachment.","     * @name MessageAttachment#client","     * @type {Client}","     * @readonly","     */","    Object.defineProperty(this, 'client', { value: message.client });","","    /**","     * The message this attachment is part of.","     * @type {Message}","     */","    this.message = message;","","    this.setup(data);","  }","","  setup(data) {","    /**","     * The ID of this attachment","     * @type {string}","     */","    this.id = data.id;","","    /**","     * The file name of this attachment","     * @type {string}","     */","    this.filename = data.filename;","","    /**","     * The size of this attachment in bytes","     * @type {number}","     */","    this.filesize = data.size;","","    /**","     * The URL to this attachment","     * @type {string}","     */","    this.url = data.url;","","    /**","     * The Proxy URL to this attachment","     * @type {string}","     */","    this.proxyURL = data.proxy_url;","","    /**","     * The height of this attachment (if an image)","     * @type {?number}","     */","    this.height = data.height;","","    /**","     * The width of this attachment (if an image)","     * @type {?number}","     */","    this.width = data.width;","  }","}","","module.exports = MessageAttachment;",""],"l":{"12":0,"18":0,"20":0,"28":0,"34":0,"40":0,"46":0,"52":0,"58":0,"64":0,"68":1}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/MessageEmbed.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/MessageEmbed.js","s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},"fnMap":{"1":{"name":"(anonymous_1)","line":5,"loc":{"start":{"line":5,"column":13},"end":{"line":5,"column":29}}},"2":{"name":"(anonymous_2)","line":23,"loc":{"start":{"line":23,"column":7},"end":{"line":23,"column":14}}},"3":{"name":"(anonymous_3)","line":96,"loc":{"start":{"line":96,"column":15},"end":{"line":96,"column":18}}},"4":{"name":"(anonymous_4)","line":105,"loc":{"start":{"line":105,"column":14},"end":{"line":105,"column":17}}},"5":{"name":"(anonymous_5)","line":116,"loc":{"start":{"line":116,"column":13},"end":{"line":116,"column":27}}},"6":{"name":"(anonymous_6)","line":126,"loc":{"start":{"line":126,"column":7},"end":{"line":126,"column":14}}},"7":{"name":"(anonymous_7)","line":157,"loc":{"start":{"line":157,"column":13},"end":{"line":157,"column":27}}},"8":{"name":"(anonymous_8)","line":167,"loc":{"start":{"line":167,"column":7},"end":{"line":167,"column":14}}},"9":{"name":"(anonymous_9)","line":186,"loc":{"start":{"line":186,"column":13},"end":{"line":186,"column":27}}},"10":{"name":"(anonymous_10)","line":196,"loc":{"start":{"line":196,"column":7},"end":{"line":196,"column":14}}},"11":{"name":"(anonymous_11)","line":221,"loc":{"start":{"line":221,"column":13},"end":{"line":221,"column":27}}},"12":{"name":"(anonymous_12)","line":231,"loc":{"start":{"line":231,"column":7},"end":{"line":231,"column":14}}},"13":{"name":"(anonymous_13)","line":256,"loc":{"start":{"line":256,"column":13},"end":{"line":256,"column":27}}},"14":{"name":"(anonymous_14)","line":266,"loc":{"start":{"line":266,"column":7},"end":{"line":266,"column":14}}}},"statementMap":{"1":{"start":{"line":12,"column":4},"end":{"line":12,"column":69}},"2":{"start":{"line":18,"column":4},"end":{"line":18,"column":27}},"3":{"start":{"line":20,"column":4},"end":{"line":20,"column":21}},"4":{"start":{"line":28,"column":4},"end":{"line":28,"column":26}},"5":{"start":{"line":34,"column":4},"end":{"line":34,"column":28}},"6":{"start":{"line":40,"column":4},"end":{"line":40,"column":40}},"7":{"start":{"line":46,"column":4},"end":{"line":46,"column":24}},"8":{"start":{"line":52,"column":4},"end":{"line":52,"column":28}},"9":{"start":{"line":58,"column":4},"end":{"line":58,"column":21}},"10":{"start":{"line":59,"column":4},"end":{"line":59,"column":107}},"11":{"start":{"line":59,"column":21},"end":{"line":59,"column":107}},"12":{"start":{"line":59,"column":54},"end":{"line":59,"column":107}},"13":{"start":{"line":65,"column":4},"end":{"line":65,"column":43}},"14":{"start":{"line":71,"column":4},"end":{"line":71,"column":93}},"15":{"start":{"line":77,"column":4},"end":{"line":77,"column":81}},"16":{"start":{"line":83,"column":4},"end":{"line":83,"column":89}},"17":{"start":{"line":89,"column":4},"end":{"line":89,"column":81}},"18":{"start":{"line":97,"column":4},"end":{"line":97,"column":43}},"19":{"start":{"line":106,"column":4},"end":{"line":106,"column":38}},"20":{"start":{"line":107,"column":4},"end":{"line":107,"column":43}},"21":{"start":{"line":107,"column":27},"end":{"line":107,"column":43}},"22":{"start":{"line":108,"column":4},"end":{"line":108,"column":21}},"23":{"start":{"line":121,"column":4},"end":{"line":121,"column":23}},"24":{"start":{"line":123,"column":4},"end":{"line":123,"column":21}},"25":{"start":{"line":131,"column":4},"end":{"line":131,"column":24}},"26":{"start":{"line":137,"column":4},"end":{"line":137,"column":35}},"27":{"start":{"line":143,"column":4},"end":{"line":143,"column":30}},"28":{"start":{"line":149,"column":4},"end":{"line":149,"column":28}},"29":{"start":{"line":162,"column":4},"end":{"line":162,"column":23}},"30":{"start":{"line":164,"column":4},"end":{"line":164,"column":21}},"31":{"start":{"line":172,"column":4},"end":{"line":172,"column":26}},"32":{"start":{"line":178,"column":4},"end":{"line":178,"column":24}},"33":{"start":{"line":191,"column":4},"end":{"line":191,"column":23}},"34":{"start":{"line":193,"column":4},"end":{"line":193,"column":21}},"35":{"start":{"line":201,"column":4},"end":{"line":201,"column":26}},"36":{"start":{"line":207,"column":4},"end":{"line":207,"column":24}},"37":{"start":{"line":213,"column":4},"end":{"line":213,"column":33}},"38":{"start":{"line":226,"column":4},"end":{"line":226,"column":23}},"39":{"start":{"line":228,"column":4},"end":{"line":228,"column":21}},"40":{"start":{"line":236,"column":4},"end":{"line":236,"column":26}},"41":{"start":{"line":242,"column":4},"end":{"line":242,"column":28}},"42":{"start":{"line":248,"column":4},"end":{"line":248,"column":30}},"43":{"start":{"line":261,"column":4},"end":{"line":261,"column":23}},"44":{"start":{"line":263,"column":4},"end":{"line":263,"column":21}},"45":{"start":{"line":271,"column":4},"end":{"line":271,"column":26}},"46":{"start":{"line":277,"column":4},"end":{"line":277,"column":33}},"47":{"start":{"line":283,"column":4},"end":{"line":283,"column":44}},"48":{"start":{"line":287,"column":0},"end":{"line":287,"column":47}},"49":{"start":{"line":288,"column":0},"end":{"line":288,"column":45}},"50":{"start":{"line":289,"column":0},"end":{"line":289,"column":41}},"51":{"start":{"line":290,"column":0},"end":{"line":290,"column":39}},"52":{"start":{"line":291,"column":0},"end":{"line":291,"column":41}},"53":{"start":{"line":293,"column":0},"end":{"line":293,"column":30}}},"branchMap":{"1":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":4},"end":{"line":59,"column":4}},{"start":{"line":59,"column":4},"end":{"line":59,"column":4}}]},"2":{"line":71,"type":"cond-expr","locations":[{"start":{"line":71,"column":38},"end":{"line":71,"column":85}},{"start":{"line":71,"column":88},"end":{"line":71,"column":92}}]},"3":{"line":77,"type":"cond-expr","locations":[{"start":{"line":77,"column":32},"end":{"line":77,"column":73}},{"start":{"line":77,"column":76},"end":{"line":77,"column":80}}]},"4":{"line":83,"type":"cond-expr","locations":[{"start":{"line":83,"column":36},"end":{"line":83,"column":81}},{"start":{"line":83,"column":84},"end":{"line":83,"column":88}}]},"5":{"line":89,"type":"cond-expr","locations":[{"start":{"line":89,"column":32},"end":{"line":89,"column":73}},{"start":{"line":89,"column":76},"end":{"line":89,"column":80}}]}},"code":["/**"," * Represents an embed in a message (image/video preview, rich embed, etc.)"," */","class MessageEmbed {","  constructor(message, data) {","    /**","     * The client that instantiated this embed","     * @name MessageEmbed#client","     * @type {Client}","     * @readonly","     */","    Object.defineProperty(this, 'client', { value: message.client });","","    /**","     * The message this embed is part of","     * @type {Message}","     */","    this.message = message;","","    this.setup(data);","  }","","  setup(data) {","    /**","     * The type of this embed","     * @type {string}","     */","    this.type = data.type;","","    /**","     * The title of this embed, if there is one","     * @type {?string}","     */","    this.title = data.title;","","    /**","     * The description of this embed, if there is one","     * @type {?string}","     */","    this.description = data.description;","","    /**","     * The URL of this embed","     * @type {string}","     */","    this.url = data.url;","","    /**","     * The color of the embed","     * @type {number}","     */","    this.color = data.color;","","    /**","     * The fields of this embed","     * @type {MessageEmbedField[]}","     */","    this.fields = [];","    if (data.fields) for (const field of data.fields) this.fields.push(new MessageEmbedField(this, field));","","    /**","     * The timestamp of this embed","     * @type {number}","     */","    this.createdTimestamp = data.timestamp;","","    /**","     * The thumbnail of this embed, if there is one","     * @type {MessageEmbedThumbnail}","     */","    this.thumbnail = data.thumbnail ? new MessageEmbedThumbnail(this, data.thumbnail) : null;","","    /**","     * The author of this embed, if there is one","     * @type {MessageEmbedAuthor}","     */","    this.author = data.author ? new MessageEmbedAuthor(this, data.author) : null;","","    /**","     * The provider of this embed, if there is one","     * @type {MessageEmbedProvider}","     */","    this.provider = data.provider ? new MessageEmbedProvider(this, data.provider) : null;","","    /**","     * The footer of this embed","     * @type {MessageEmbedFooter}","     */","    this.footer = data.footer ? new MessageEmbedFooter(this, data.footer) : null;","  }","","  /**","   * The date this embed was created","   * @type {Date}","   */","  get createdAt() {","    return new Date(this.createdTimestamp);","  }","","  /**","   * The hexadecimal version of the embed color, with a leading hash.","   * @type {string}","   * @readonly","   */","  get hexColor() {","    let col = this.color.toString(16);","    while (col.length < 6) col = `0${col}`;","    return `#${col}`;","  }","}","","/**"," * Represents a thumbnail for a message embed"," */","class MessageEmbedThumbnail {","  constructor(embed, data) {","    /**","     * The embed this thumbnail is part of","     * @type {MessageEmbed}","     */","    this.embed = embed;","","    this.setup(data);","  }","","  setup(data) {","    /**","     * The URL for this thumbnail","     * @type {string}","     */","    this.url = data.url;","","    /**","     * The Proxy URL for this thumbnail","     * @type {string}","     */","    this.proxyURL = data.proxy_url;","","    /**","     * The height of the thumbnail","     * @type {number}","     */","    this.height = data.height;","","    /**","     * The width of the thumbnail","     * @type {number}","     */","    this.width = data.width;","  }","}","","/**"," * Represents a provider for a message embed"," */","class MessageEmbedProvider {","  constructor(embed, data) {","    /**","     * The embed this provider is part of","     * @type {MessageEmbed}","     */","    this.embed = embed;","","    this.setup(data);","  }","","  setup(data) {","    /**","     * The name of this provider","     * @type {string}","     */","    this.name = data.name;","","    /**","     * The URL of this provider","     * @type {string}","     */","    this.url = data.url;","  }","}","","/**"," * Represents an author for a message embed"," */","class MessageEmbedAuthor {","  constructor(embed, data) {","    /**","     * The embed this author is part of","     * @type {MessageEmbed}","     */","    this.embed = embed;","","    this.setup(data);","  }","","  setup(data) {","    /**","     * The name of this author","     * @type {string}","     */","    this.name = data.name;","","    /**","     * The URL of this author","     * @type {string}","     */","    this.url = data.url;","","    /**","     * The icon URL of this author","     * @type {string}","     */","    this.iconURL = data.icon_url;","  }","}","","/**"," * Represents a field for a message embed"," */","class MessageEmbedField {","  constructor(embed, data) {","    /**","     * The embed this footer is part of","     * @type {MessageEmbed}","     */","    this.embed = embed;","","    this.setup(data);","  }","","  setup(data) {","    /**","     * The name of this field","     * @type {string}","     */","    this.name = data.name;","","    /**","     * The value of this field","     * @type {string}","     */","    this.value = data.value;","","    /**","     * If this field is displayed inline","     * @type {boolean}","     */","    this.inline = data.inline;","  }","}","","/**"," * Represents the footer of a message embed"," */","class MessageEmbedFooter {","  constructor(embed, data) {","    /**","     * The embed this footer is part of","     * @type {MessageEmbed}","     */","    this.embed = embed;","","    this.setup(data);","  }","","  setup(data) {","    /**","     * The text in this footer","     * @type {string}","     */","    this.text = data.text;","","    /**","     * The icon URL of this footer","     * @type {string}","     */","    this.iconURL = data.icon_url;","","    /**","     * The proxy icon URL of this footer","     * @type {string}","     */","    this.proxyIconUrl = data.proxy_icon_url;","  }","}","","MessageEmbed.Thumbnail = MessageEmbedThumbnail;","MessageEmbed.Provider = MessageEmbedProvider;","MessageEmbed.Author = MessageEmbedAuthor;","MessageEmbed.Field = MessageEmbedField;","MessageEmbed.Footer = MessageEmbedFooter;","","module.exports = MessageEmbed;",""],"l":{"12":0,"18":0,"20":0,"28":0,"34":0,"40":0,"46":0,"52":0,"58":0,"59":0,"65":0,"71":0,"77":0,"83":0,"89":0,"97":0,"106":0,"107":0,"108":0,"121":0,"123":0,"131":0,"137":0,"143":0,"149":0,"162":0,"164":0,"172":0,"178":0,"191":0,"193":0,"201":0,"207":0,"213":0,"226":0,"228":0,"236":0,"242":0,"248":0,"261":0,"263":0,"271":0,"277":0,"283":0,"287":1,"288":1,"289":1,"290":1,"291":1,"293":1}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/MessageReaction.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/MessageReaction.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":9,"loc":{"start":{"line":9,"column":13},"end":{"line":9,"column":41}}},"2":{"name":"(anonymous_2)","line":43,"loc":{"start":{"line":43,"column":11},"end":{"line":43,"column":14}}},"3":{"name":"(anonymous_3)","line":62,"loc":{"start":{"line":62,"column":8},"end":{"line":62,"column":42}}},"4":{"name":"(anonymous_4)","line":76,"loc":{"start":{"line":76,"column":12},"end":{"line":76,"column":26}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":49}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":33}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":49}},"4":{"start":{"line":14,"column":4},"end":{"line":14,"column":27}},"5":{"start":{"line":20,"column":4},"end":{"line":20,"column":17}},"6":{"start":{"line":26,"column":4},"end":{"line":26,"column":28}},"7":{"start":{"line":32,"column":4},"end":{"line":32,"column":34}},"8":{"start":{"line":34,"column":4},"end":{"line":34,"column":64}},"9":{"start":{"line":44,"column":4},"end":{"line":44,"column":57}},"10":{"start":{"line":44,"column":38},"end":{"line":44,"column":57}},"11":{"start":{"line":46,"column":4},"end":{"line":53,"column":5}},"12":{"start":{"line":47,"column":6},"end":{"line":47,"column":48}},"13":{"start":{"line":48,"column":6},"end":{"line":52,"column":7}},"14":{"start":{"line":49,"column":8},"end":{"line":49,"column":49}},"15":{"start":{"line":50,"column":8},"end":{"line":50,"column":28}},"16":{"start":{"line":51,"column":8},"end":{"line":51,"column":21}},"17":{"start":{"line":54,"column":4},"end":{"line":54,"column":23}},"18":{"start":{"line":63,"column":4},"end":{"line":63,"column":33}},"19":{"start":{"line":64,"column":4},"end":{"line":64,"column":60}},"20":{"start":{"line":65,"column":4},"end":{"line":65,"column":99}},"21":{"start":{"line":65,"column":15},"end":{"line":65,"column":99}},"22":{"start":{"line":66,"column":4},"end":{"line":68,"column":6}},"23":{"start":{"line":77,"column":4},"end":{"line":77,"column":33}},"24":{"start":{"line":78,"column":4},"end":{"line":88,"column":7}},"25":{"start":{"line":81,"column":6},"end":{"line":81,"column":36}},"26":{"start":{"line":82,"column":6},"end":{"line":85,"column":7}},"27":{"start":{"line":83,"column":8},"end":{"line":83,"column":70}},"28":{"start":{"line":84,"column":8},"end":{"line":84,"column":38}},"29":{"start":{"line":86,"column":6},"end":{"line":86,"column":35}},"30":{"start":{"line":87,"column":6},"end":{"line":87,"column":19}},"31":{"start":{"line":92,"column":0},"end":{"line":92,"column":33}}},"branchMap":{"1":{"line":26,"type":"binary-expr","locations":[{"start":{"line":26,"column":17},"end":{"line":26,"column":22}},{"start":{"line":26,"column":26},"end":{"line":26,"column":27}}]},"2":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":4},"end":{"line":44,"column":4}},{"start":{"line":44,"column":4},"end":{"line":44,"column":4}}]},"3":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":4},"end":{"line":46,"column":4}},{"start":{"line":46,"column":4},"end":{"line":46,"column":4}}]},"4":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":6},"end":{"line":48,"column":6}},{"start":{"line":48,"column":6},"end":{"line":48,"column":6}}]},"5":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":4},"end":{"line":65,"column":4}},{"start":{"line":65,"column":4},"end":{"line":65,"column":4}}]}},"code":["const Collection = require('../util/Collection');","const Emoji = require('./Emoji');","const ReactionEmoji = require('./ReactionEmoji');","","/**"," * Represents a reaction to a message"," */","class MessageReaction {","  constructor(message, emoji, count, me) {","    /**","     * The message that this reaction refers to","     * @type {Message}","     */","    this.message = message;","","    /**","     * Whether the client has given this reaction","     * @type {boolean}","     */","    this.me = me;","","    /**","     * The number of people that have given the same reaction.","     * @type {number}","     */","    this.count = count || 0;","","    /**","     * The users that have given this reaction, mapped by their ID.","     * @type {Collection<string, User>}","     */","    this.users = new Collection();","","    this._emoji = new ReactionEmoji(this, emoji.name, emoji.id);","  }","","  /**","   * The emoji of this reaction, either an Emoji object for known custom emojis, or a ReactionEmoji","   * object which has fewer properties. Whatever the prototype of the emoji, it will still have","   * `name`, `id`, `identifier` and `toString()`","   * @type {Emoji|ReactionEmoji}","   */","  get emoji() {","    if (this._emoji instanceof Emoji) return this._emoji;","    // check to see if the emoji has become known to the client","    if (this._emoji.id) {","      const emojis = this.message.client.emojis;","      if (emojis.has(this._emoji.id)) {","        const emoji = emojis.get(this._emoji.id);","        this._emoji = emoji;","        return emoji;","      }","    }","    return this._emoji;","  }","","  /**","   * Removes a user from this reaction.","   * @param {UserResolvable} [user=this.message.client.user] User to remove the reaction of","   * @returns {Promise<MessageReaction>}","   */","  remove(user = this.message.client.user) {","    const message = this.message;","    user = this.message.client.resolver.resolveUserID(user);","    if (!user) return Promise.reject('Couldn\\'t resolve the user ID to remove from the reaction.');","    return message.client.rest.methods.removeMessageReaction(","      message, this.emoji.identifier, user","    );","  }","","  /**","   * Fetch all the users that gave this reaction. Resolves with a collection of users, mapped by their IDs.","   * @param {number} [limit=100] the maximum amount of users to fetch, defaults to 100","   * @returns {Promise<Collection<string, User>>}","   */","  fetchUsers(limit = 100) {","    const message = this.message;","    return message.client.rest.methods.getMessageReactionUsers(","      message, this.emoji.identifier, limit","    ).then(users => {","      this.users = new Collection();","      for (const rawUser of users) {","        const user = this.message.client.dataManager.newUser(rawUser);","        this.users.set(user.id, user);","      }","      this.count = this.users.size;","      return users;","    });","  }","}","","module.exports = MessageReaction;",""],"l":{"1":1,"2":1,"3":1,"14":0,"20":0,"26":0,"32":0,"34":0,"44":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"54":0,"63":0,"64":0,"65":0,"66":0,"77":0,"78":0,"81":0,"82":0,"83":0,"84":0,"86":0,"87":0,"92":1}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/Emoji.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/Emoji.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"(anonymous_1)","line":8,"loc":{"start":{"line":8,"column":13},"end":{"line":8,"column":27}}},"2":{"name":"(anonymous_2)","line":26,"loc":{"start":{"line":26,"column":7},"end":{"line":26,"column":14}}},"3":{"name":"(anonymous_3)","line":59,"loc":{"start":{"line":59,"column":22},"end":{"line":59,"column":25}}},"4":{"name":"(anonymous_4)","line":68,"loc":{"start":{"line":68,"column":15},"end":{"line":68,"column":18}}},"5":{"name":"(anonymous_5)","line":77,"loc":{"start":{"line":77,"column":11},"end":{"line":77,"column":14}}},"6":{"name":"(anonymous_6)","line":90,"loc":{"start":{"line":90,"column":9},"end":{"line":90,"column":12}}},"7":{"name":"(anonymous_7)","line":102,"loc":{"start":{"line":102,"column":10},"end":{"line":102,"column":13}}},"8":{"name":"(anonymous_8)","line":111,"loc":{"start":{"line":111,"column":8},"end":{"line":111,"column":16}}},"9":{"name":"(anonymous_9)","line":132,"loc":{"start":{"line":132,"column":16},"end":{"line":132,"column":19}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":47}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":49}},"3":{"start":{"line":15,"column":4},"end":{"line":15,"column":67}},"4":{"start":{"line":21,"column":4},"end":{"line":21,"column":23}},"5":{"start":{"line":23,"column":4},"end":{"line":23,"column":21}},"6":{"start":{"line":31,"column":4},"end":{"line":31,"column":22}},"7":{"start":{"line":37,"column":4},"end":{"line":37,"column":26}},"8":{"start":{"line":43,"column":4},"end":{"line":43,"column":46}},"9":{"start":{"line":49,"column":4},"end":{"line":49,"column":32}},"10":{"start":{"line":51,"column":4},"end":{"line":51,"column":29}},"11":{"start":{"line":60,"column":4},"end":{"line":60,"column":47}},"12":{"start":{"line":69,"column":4},"end":{"line":69,"column":43}},"13":{"start":{"line":78,"column":4},"end":{"line":78,"column":35}},"14":{"start":{"line":79,"column":4},"end":{"line":81,"column":5}},"15":{"start":{"line":80,"column":6},"end":{"line":80,"column":82}},"16":{"start":{"line":80,"column":38},"end":{"line":80,"column":82}},"17":{"start":{"line":82,"column":4},"end":{"line":82,"column":17}},"18":{"start":{"line":91,"column":4},"end":{"line":91,"column":46}},"19":{"start":{"line":103,"column":4},"end":{"line":103,"column":74}},"20":{"start":{"line":112,"column":4},"end":{"line":124,"column":5}},"21":{"start":{"line":113,"column":6},"end":{"line":118,"column":8}},"22":{"start":{"line":120,"column":6},"end":{"line":123,"column":8}},"23":{"start":{"line":133,"column":4},"end":{"line":135,"column":5}},"24":{"start":{"line":134,"column":6},"end":{"line":134,"column":39}},"25":{"start":{"line":136,"column":4},"end":{"line":136,"column":41}},"26":{"start":{"line":140,"column":0},"end":{"line":140,"column":23}}},"branchMap":{"1":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":6},"end":{"line":80,"column":6}},{"start":{"line":80,"column":6},"end":{"line":80,"column":6}}]},"2":{"line":103,"type":"cond-expr","locations":[{"start":{"line":103,"column":33},"end":{"line":103,"column":61}},{"start":{"line":103,"column":64},"end":{"line":103,"column":73}}]},"3":{"line":112,"type":"if","locations":[{"start":{"line":112,"column":4},"end":{"line":112,"column":4}},{"start":{"line":112,"column":4},"end":{"line":112,"column":4}}]},"4":{"line":114,"type":"binary-expr","locations":[{"start":{"line":114,"column":8},"end":{"line":114,"column":28}},{"start":{"line":115,"column":8},"end":{"line":115,"column":32}},{"start":{"line":116,"column":8},"end":{"line":116,"column":38}},{"start":{"line":117,"column":8},"end":{"line":117,"column":52}}]},"5":{"line":121,"type":"binary-expr","locations":[{"start":{"line":121,"column":8},"end":{"line":121,"column":28}},{"start":{"line":122,"column":8},"end":{"line":122,"column":32}}]},"6":{"line":133,"type":"if","locations":[{"start":{"line":133,"column":4},"end":{"line":133,"column":4}},{"start":{"line":133,"column":4},"end":{"line":133,"column":4}}]}},"code":["const Constants = require('../util/Constants');","const Collection = require('../util/Collection');","","/**"," * Represents a custom emoji"," */","class Emoji {","  constructor(guild, data) {","    /**","     * The Client that instantiated this object","     * @name Emoji#client","     * @type {Client}","     * @readonly","     */","    Object.defineProperty(this, 'client', { value: guild.client });","","    /**","     * The guild this emoji is part of","     * @type {Guild}","     */","    this.guild = guild;","","    this.setup(data);","  }","","  setup(data) {","    /**","     * The ID of the emoji","     * @type {string}","     */","    this.id = data.id;","","    /**","     * The name of the emoji","     * @type {string}","     */","    this.name = data.name;","","    /**","     * Whether or not this emoji requires colons surrounding it","     * @type {boolean}","     */","    this.requiresColons = data.require_colons;","","    /**","     * Whether this emoji is managed by an external service","     * @type {boolean}","     */","    this.managed = data.managed;","","    this._roles = data.roles;","  }","","  /**","   * The timestamp the emoji was created at","   * @type {number}","   * @readonly","   */","  get createdTimestamp() {","    return (this.id / 4194304) + 1420070400000;","  }","","  /**","   * The time the emoji was created","   * @type {Date}","   * @readonly","   */","  get createdAt() {","    return new Date(this.createdTimestamp);","  }","","  /**","   * A collection of roles this emoji is active for (empty if all), mapped by role ID.","   * @type {Collection<string, Role>}","   * @readonly","   */","  get roles() {","    const roles = new Collection();","    for (const role of this._roles) {","      if (this.guild.roles.has(role)) roles.set(role, this.guild.roles.get(role));","    }","    return roles;","  }","","  /**","   * The URL to the emoji file","   * @type {string}","   * @readonly","   */","  get url() {","    return Constants.Endpoints.emoji(this.id);","  }","","  /**","   * When concatenated with a string, this automatically returns the emoji mention rather than the object.","   * @returns {string}","   * @example","   * // send an emoji:","   * const emoji = guild.emojis.first();","   * msg.reply(`Hello! ${emoji}`);","   */","  toString() {","    return this.requiresColons ? `<:${this.name}:${this.id}>` : this.name;","  }","","  /**","   * Whether this emoji is the same as another one","   * @param {Emoji|Object} other the emoji to compare it to","   * @returns {boolean} whether the emoji is equal to the given emoji or not","   */","  equals(other) {","    if (other instanceof Emoji) {","      return (","        other.id === this.id &&","        other.name === this.name &&","        other.managed === this.managed &&","        other.requiresColons === this.requiresColons","      );","    } else {","      return (","        other.id === this.id &&","        other.name === this.name","      );","    }","  }","","  /**","   * The identifier of this emoji, used for message reactions","   * @readonly","   * @type {string}","   */","  get identifier() {","    if (this.id) {","      return `${this.name}:${this.id}`;","    }","    return encodeURIComponent(this.name);","  }","}","","module.exports = Emoji;",""],"l":{"1":1,"2":1,"15":0,"21":0,"23":0,"31":0,"37":0,"43":0,"49":0,"51":0,"60":0,"69":0,"78":0,"79":0,"80":0,"82":0,"91":0,"103":0,"112":0,"113":0,"120":0,"133":0,"134":0,"136":0,"140":1}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/ReactionEmoji.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/ReactionEmoji.js","s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":13},"end":{"line":7,"column":34}}},"2":{"name":"(anonymous_2)","line":32,"loc":{"start":{"line":32,"column":16},"end":{"line":32,"column":19}}},"3":{"name":"(anonymous_3)","line":44,"loc":{"start":{"line":44,"column":10},"end":{"line":44,"column":13}}}},"statementMap":{"1":{"start":{"line":12,"column":4},"end":{"line":12,"column":29}},"2":{"start":{"line":18,"column":4},"end":{"line":18,"column":21}},"3":{"start":{"line":24,"column":4},"end":{"line":24,"column":17}},"4":{"start":{"line":33,"column":4},"end":{"line":33,"column":50}},"5":{"start":{"line":33,"column":17},"end":{"line":33,"column":50}},"6":{"start":{"line":34,"column":4},"end":{"line":34,"column":41}},"7":{"start":{"line":45,"column":4},"end":{"line":45,"column":62}},"8":{"start":{"line":49,"column":0},"end":{"line":49,"column":31}}},"branchMap":{"1":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":4},"end":{"line":33,"column":4}},{"start":{"line":33,"column":4},"end":{"line":33,"column":4}}]},"2":{"line":45,"type":"cond-expr","locations":[{"start":{"line":45,"column":21},"end":{"line":45,"column":49}},{"start":{"line":45,"column":52},"end":{"line":45,"column":61}}]}},"code":["/**"," * Represents a limited emoji set used for both custom and unicode emojis. Custom emojis"," * will use this class opposed to the Emoji class when the client doesn't know enough"," * information about them."," */","class ReactionEmoji {","  constructor(reaction, name, id) {","    /**","     * The message reaction this emoji refers to","     * @type {MessageReaction}","     */","    this.reaction = reaction;","","    /**","     * The name of this reaction emoji.","     * @type {string}","     */","    this.name = name;","","    /**","     * The ID of this reaction emoji.","     * @type {string}","     */","    this.id = id;","  }","","  /**","   * The identifier of this emoji, used for message reactions","   * @readonly","   * @type {string}","   */","  get identifier() {","    if (this.id) return `${this.name}:${this.id}`;","    return encodeURIComponent(this.name);","  }","","  /**","   * Creates the text required to form a graphical emoji on Discord.","   * @example","   * // send the emoji used in a reaction to the channel the reaction is part of","   * reaction.message.channel.sendMessage(`The emoji used is ${reaction.emoji}`);","   * @returns {string}","   */","  toString() {","    return this.id ? `<:${this.name}:${this.id}>` : this.name;","  }","}","","module.exports = ReactionEmoji;",""],"l":{"12":0,"18":0,"24":0,"33":0,"34":0,"45":0,"49":1}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/util/EscapeMarkdown.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/util/EscapeMarkdown.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"escapeMarkdown","line":1,"loc":{"start":{"line":1,"column":17},"end":{"line":1,"column":94}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":5,"column":2}},"2":{"start":{"line":2,"column":2},"end":{"line":2,"column":62}},"3":{"start":{"line":2,"column":21},"end":{"line":2,"column":62}},"4":{"start":{"line":3,"column":2},"end":{"line":3,"column":88}},"5":{"start":{"line":3,"column":22},"end":{"line":3,"column":88}},"6":{"start":{"line":4,"column":2},"end":{"line":4,"column":82}}},"branchMap":{"1":{"line":2,"type":"if","locations":[{"start":{"line":2,"column":2},"end":{"line":2,"column":2}},{"start":{"line":2,"column":2},"end":{"line":2,"column":2}}]},"2":{"line":3,"type":"if","locations":[{"start":{"line":3,"column":2},"end":{"line":3,"column":2}},{"start":{"line":3,"column":2},"end":{"line":3,"column":2}}]}},"code":["module.exports = function escapeMarkdown(text, onlyCodeBlock = false, onlyInlineCode = false) {","  if (onlyCodeBlock) return text.replace(/```/g, '`\\u200b``');","  if (onlyInlineCode) return text.replace(/\\\\(`|\\\\)/g, '$1').replace(/(`|\\\\)/g, '\\\\$1');","  return text.replace(/\\\\(\\*|_|`|~|\\\\)/g, '$1').replace(/(\\*|_|`|~|\\\\)/g, '\\\\$1');","};",""],"l":{"1":1,"2":0,"3":0,"4":0}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/ClientDataResolver.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/ClientDataResolver.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"fnMap":{"1":{"name":"(anonymous_1)","line":24,"loc":{"start":{"line":24,"column":13},"end":{"line":24,"column":22}}},"2":{"name":"(anonymous_2)","line":43,"loc":{"start":{"line":43,"column":13},"end":{"line":43,"column":20}}},"3":{"name":"(anonymous_3)","line":57,"loc":{"start":{"line":57,"column":15},"end":{"line":57,"column":22}}},"4":{"name":"(anonymous_4)","line":77,"loc":{"start":{"line":77,"column":14},"end":{"line":77,"column":22}}},"5":{"name":"(anonymous_5)","line":96,"loc":{"start":{"line":96,"column":20},"end":{"line":96,"column":34}}},"6":{"name":"(anonymous_6)","line":118,"loc":{"start":{"line":118,"column":16},"end":{"line":118,"column":26}}},"7":{"name":"(anonymous_7)","line":138,"loc":{"start":{"line":138,"column":19},"end":{"line":138,"column":26}}},"8":{"name":"(anonymous_8)","line":190,"loc":{"start":{"line":190,"column":19},"end":{"line":190,"column":32}}},"9":{"name":"(anonymous_9)","line":201,"loc":{"start":{"line":201,"column":20},"end":{"line":201,"column":34}}},"10":{"name":"(anonymous_10)","line":220,"loc":{"start":{"line":220,"column":15},"end":{"line":220,"column":22}}},"11":{"name":"(anonymous_11)","line":238,"loc":{"start":{"line":238,"column":15},"end":{"line":238,"column":22}}},"12":{"name":"(anonymous_12)","line":256,"loc":{"start":{"line":256,"column":15},"end":{"line":256,"column":26}}},"13":{"name":"(anonymous_13)","line":300,"loc":{"start":{"line":300,"column":24},"end":{"line":300,"column":32}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":29}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":25}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":38}},"4":{"start":{"line":5,"column":0},"end":{"line":5,"column":47}},"5":{"start":{"line":6,"column":0},"end":{"line":6,"column":65}},"6":{"start":{"line":7,"column":0},"end":{"line":7,"column":43}},"7":{"start":{"line":8,"column":0},"end":{"line":8,"column":49}},"8":{"start":{"line":9,"column":0},"end":{"line":9,"column":45}},"9":{"start":{"line":10,"column":0},"end":{"line":10,"column":49}},"10":{"start":{"line":11,"column":0},"end":{"line":11,"column":57}},"11":{"start":{"line":12,"column":0},"end":{"line":12,"column":45}},"12":{"start":{"line":13,"column":0},"end":{"line":13,"column":61}},"13":{"start":{"line":25,"column":4},"end":{"line":25,"column":25}},"14":{"start":{"line":44,"column":4},"end":{"line":44,"column":42}},"15":{"start":{"line":44,"column":30},"end":{"line":44,"column":42}},"16":{"start":{"line":45,"column":4},"end":{"line":45,"column":77}},"17":{"start":{"line":45,"column":34},"end":{"line":45,"column":77}},"18":{"start":{"line":46,"column":4},"end":{"line":46,"column":54}},"19":{"start":{"line":46,"column":37},"end":{"line":46,"column":54}},"20":{"start":{"line":47,"column":4},"end":{"line":47,"column":52}},"21":{"start":{"line":47,"column":33},"end":{"line":47,"column":52}},"22":{"start":{"line":48,"column":4},"end":{"line":48,"column":49}},"23":{"start":{"line":48,"column":31},"end":{"line":48,"column":49}},"24":{"start":{"line":49,"column":4},"end":{"line":49,"column":16}},"25":{"start":{"line":58,"column":4},"end":{"line":58,"column":76}},"26":{"start":{"line":58,"column":61},"end":{"line":58,"column":76}},"27":{"start":{"line":59,"column":4},"end":{"line":59,"column":54}},"28":{"start":{"line":59,"column":34},"end":{"line":59,"column":54}},"29":{"start":{"line":60,"column":4},"end":{"line":60,"column":55}},"30":{"start":{"line":60,"column":33},"end":{"line":60,"column":55}},"31":{"start":{"line":61,"column":4},"end":{"line":61,"column":51}},"32":{"start":{"line":61,"column":31},"end":{"line":61,"column":51}},"33":{"start":{"line":62,"column":4},"end":{"line":62,"column":16}},"34":{"start":{"line":78,"column":4},"end":{"line":78,"column":45}},"35":{"start":{"line":78,"column":32},"end":{"line":78,"column":45}},"36":{"start":{"line":79,"column":4},"end":{"line":79,"column":80}},"37":{"start":{"line":79,"column":35},"end":{"line":79,"column":80}},"38":{"start":{"line":80,"column":4},"end":{"line":80,"column":16}},"39":{"start":{"line":97,"column":4},"end":{"line":97,"column":49}},"40":{"start":{"line":97,"column":37},"end":{"line":97,"column":49}},"41":{"start":{"line":98,"column":4},"end":{"line":98,"column":37}},"42":{"start":{"line":99,"column":4},"end":{"line":99,"column":34}},"43":{"start":{"line":100,"column":4},"end":{"line":100,"column":37}},"44":{"start":{"line":100,"column":25},"end":{"line":100,"column":37}},"45":{"start":{"line":101,"column":4},"end":{"line":101,"column":46}},"46":{"start":{"line":119,"column":4},"end":{"line":119,"column":51}},"47":{"start":{"line":119,"column":36},"end":{"line":119,"column":51}},"48":{"start":{"line":120,"column":4},"end":{"line":120,"column":59}},"49":{"start":{"line":120,"column":36},"end":{"line":120,"column":59}},"50":{"start":{"line":121,"column":4},"end":{"line":121,"column":82}},"51":{"start":{"line":121,"column":34},"end":{"line":121,"column":82}},"52":{"start":{"line":122,"column":4},"end":{"line":122,"column":86}},"53":{"start":{"line":122,"column":37},"end":{"line":122,"column":86}},"54":{"start":{"line":123,"column":4},"end":{"line":123,"column":16}},"55":{"start":{"line":139,"column":4},"end":{"line":139,"column":78}},"56":{"start":{"line":140,"column":4},"end":{"line":140,"column":41}},"57":{"start":{"line":141,"column":4},"end":{"line":141,"column":43}},"58":{"start":{"line":141,"column":27},"end":{"line":141,"column":43}},"59":{"start":{"line":142,"column":4},"end":{"line":142,"column":16}},"60":{"start":{"line":191,"column":4},"end":{"line":191,"column":91}},"61":{"start":{"line":191,"column":40},"end":{"line":191,"column":91}},"62":{"start":{"line":192,"column":4},"end":{"line":192,"column":109}},"63":{"start":{"line":192,"column":58},"end":{"line":192,"column":109}},"64":{"start":{"line":193,"column":4},"end":{"line":193,"column":22}},"65":{"start":{"line":202,"column":4},"end":{"line":202,"column":21}},"66":{"start":{"line":203,"column":4},"end":{"line":203,"column":89}},"67":{"start":{"line":203,"column":42},"end":{"line":203,"column":89}},"68":{"start":{"line":204,"column":4},"end":{"line":204,"column":20}},"69":{"start":{"line":221,"column":4},"end":{"line":221,"column":46}},"70":{"start":{"line":221,"column":34},"end":{"line":221,"column":46}},"71":{"start":{"line":222,"column":4},"end":{"line":222,"column":54}},"72":{"start":{"line":222,"column":31},"end":{"line":222,"column":54}},"73":{"start":{"line":223,"column":4},"end":{"line":223,"column":24}},"74":{"start":{"line":239,"column":4},"end":{"line":239,"column":90}},"75":{"start":{"line":239,"column":32},"end":{"line":239,"column":90}},"76":{"start":{"line":240,"column":4},"end":{"line":240,"column":16}},"77":{"start":{"line":257,"column":4},"end":{"line":257,"column":69}},"78":{"start":{"line":257,"column":36},"end":{"line":257,"column":69}},"79":{"start":{"line":258,"column":4},"end":{"line":258,"column":117}},"80":{"start":{"line":258,"column":64},"end":{"line":258,"column":117}},"81":{"start":{"line":260,"column":4},"end":{"line":282,"column":5}},"82":{"start":{"line":261,"column":6},"end":{"line":281,"column":9}},"83":{"start":{"line":262,"column":8},"end":{"line":280,"column":9}},"84":{"start":{"line":263,"column":10},"end":{"line":263,"column":72}},"85":{"start":{"line":264,"column":10},"end":{"line":264,"column":67}},"86":{"start":{"line":264,"column":35},"end":{"line":264,"column":67}},"87":{"start":{"line":265,"column":10},"end":{"line":270,"column":13}},"88":{"start":{"line":266,"column":12},"end":{"line":266,"column":40}},"89":{"start":{"line":266,"column":21},"end":{"line":266,"column":40}},"90":{"start":{"line":267,"column":12},"end":{"line":267,"column":90}},"91":{"start":{"line":267,"column":37},"end":{"line":267,"column":90}},"92":{"start":{"line":268,"column":12},"end":{"line":268,"column":114}},"93":{"start":{"line":268,"column":47},"end":{"line":268,"column":114}},"94":{"start":{"line":269,"column":12},"end":{"line":269,"column":37}},"95":{"start":{"line":272,"column":10},"end":{"line":272,"column":46}},"96":{"start":{"line":273,"column":10},"end":{"line":279,"column":13}},"97":{"start":{"line":274,"column":12},"end":{"line":274,"column":33}},"98":{"start":{"line":274,"column":21},"end":{"line":274,"column":33}},"99":{"start":{"line":275,"column":12},"end":{"line":275,"column":99}},"100":{"start":{"line":275,"column":43},"end":{"line":275,"column":99}},"101":{"start":{"line":276,"column":12},"end":{"line":278,"column":15}},"102":{"start":{"line":277,"column":14},"end":{"line":277,"column":57}},"103":{"start":{"line":277,"column":24},"end":{"line":277,"column":37}},"104":{"start":{"line":277,"column":43},"end":{"line":277,"column":57}},"105":{"start":{"line":284,"column":4},"end":{"line":284,"column":85}},"106":{"start":{"line":301,"column":4},"end":{"line":301,"column":90}},"107":{"start":{"line":301,"column":66},"end":{"line":301,"column":90}},"108":{"start":{"line":302,"column":4},"end":{"line":304,"column":5}},"109":{"start":{"line":303,"column":6},"end":{"line":303,"column":65}},"110":{"start":{"line":303,"column":32},"end":{"line":303,"column":65}},"111":{"start":{"line":305,"column":4},"end":{"line":305,"column":16}},"112":{"start":{"line":309,"column":0},"end":{"line":309,"column":36}}},"branchMap":{"1":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":4},"end":{"line":44,"column":4}},{"start":{"line":44,"column":4},"end":{"line":44,"column":4}}]},"2":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":4},"end":{"line":45,"column":4}},{"start":{"line":45,"column":4},"end":{"line":45,"column":4}}]},"3":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":41},"end":{"line":45,"column":68}},{"start":{"line":45,"column":72},"end":{"line":45,"column":76}}]},"4":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":4},"end":{"line":46,"column":4}},{"start":{"line":46,"column":4},"end":{"line":46,"column":4}}]},"5":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":4},"end":{"line":47,"column":4}},{"start":{"line":47,"column":4},"end":{"line":47,"column":4}}]},"6":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":4},"end":{"line":48,"column":4}},{"start":{"line":48,"column":4},"end":{"line":48,"column":4}}]},"7":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":4},"end":{"line":58,"column":4}},{"start":{"line":58,"column":4},"end":{"line":58,"column":4}}]},"8":{"line":58,"type":"binary-expr","locations":[{"start":{"line":58,"column":8},"end":{"line":58,"column":28}},{"start":{"line":58,"column":32},"end":{"line":58,"column":59}}]},"9":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":4},"end":{"line":59,"column":4}},{"start":{"line":59,"column":4},"end":{"line":59,"column":4}}]},"10":{"line":59,"type":"binary-expr","locations":[{"start":{"line":59,"column":41},"end":{"line":59,"column":45}},{"start":{"line":59,"column":49},"end":{"line":59,"column":53}}]},"11":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":4},"end":{"line":60,"column":4}},{"start":{"line":60,"column":4},"end":{"line":60,"column":4}}]},"12":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":4},"end":{"line":61,"column":4}},{"start":{"line":61,"column":4},"end":{"line":61,"column":4}}]},"13":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":4},"end":{"line":78,"column":4}},{"start":{"line":78,"column":4},"end":{"line":78,"column":4}}]},"14":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":4},"end":{"line":79,"column":4}},{"start":{"line":79,"column":4},"end":{"line":79,"column":4}}]},"15":{"line":79,"type":"binary-expr","locations":[{"start":{"line":79,"column":42},"end":{"line":79,"column":71}},{"start":{"line":79,"column":75},"end":{"line":79,"column":79}}]},"16":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":4},"end":{"line":97,"column":4}},{"start":{"line":97,"column":4},"end":{"line":97,"column":4}}]},"17":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":4},"end":{"line":100,"column":4}},{"start":{"line":100,"column":4},"end":{"line":100,"column":4}}]},"18":{"line":100,"type":"binary-expr","locations":[{"start":{"line":100,"column":8},"end":{"line":100,"column":14}},{"start":{"line":100,"column":18},"end":{"line":100,"column":23}}]},"19":{"line":101,"type":"binary-expr","locations":[{"start":{"line":101,"column":11},"end":{"line":101,"column":37}},{"start":{"line":101,"column":41},"end":{"line":101,"column":45}}]},"20":{"line":119,"type":"if","locations":[{"start":{"line":119,"column":4},"end":{"line":119,"column":4}},{"start":{"line":119,"column":4},"end":{"line":119,"column":4}}]},"21":{"line":120,"type":"if","locations":[{"start":{"line":120,"column":4},"end":{"line":120,"column":4}},{"start":{"line":120,"column":4},"end":{"line":120,"column":4}}]},"22":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":4},"end":{"line":121,"column":4}},{"start":{"line":121,"column":4},"end":{"line":121,"column":4}}]},"23":{"line":121,"type":"binary-expr","locations":[{"start":{"line":121,"column":41},"end":{"line":121,"column":73}},{"start":{"line":121,"column":77},"end":{"line":121,"column":81}}]},"24":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":4},"end":{"line":122,"column":4}},{"start":{"line":122,"column":4},"end":{"line":122,"column":4}}]},"25":{"line":122,"type":"binary-expr","locations":[{"start":{"line":122,"column":44},"end":{"line":122,"column":77}},{"start":{"line":122,"column":81},"end":{"line":122,"column":85}}]},"26":{"line":141,"type":"if","locations":[{"start":{"line":141,"column":4},"end":{"line":141,"column":4}},{"start":{"line":141,"column":4},"end":{"line":141,"column":4}}]},"27":{"line":141,"type":"binary-expr","locations":[{"start":{"line":141,"column":8},"end":{"line":141,"column":13}},{"start":{"line":141,"column":17},"end":{"line":141,"column":25}}]},"28":{"line":191,"type":"if","locations":[{"start":{"line":191,"column":4},"end":{"line":191,"column":4}},{"start":{"line":191,"column":4},"end":{"line":191,"column":4}}]},"29":{"line":192,"type":"if","locations":[{"start":{"line":192,"column":4},"end":{"line":192,"column":4}},{"start":{"line":192,"column":4},"end":{"line":192,"column":4}}]},"30":{"line":192,"type":"binary-expr","locations":[{"start":{"line":192,"column":8},"end":{"line":192,"column":38}},{"start":{"line":192,"column":42},"end":{"line":192,"column":56}}]},"31":{"line":221,"type":"if","locations":[{"start":{"line":221,"column":4},"end":{"line":221,"column":4}},{"start":{"line":221,"column":4},"end":{"line":221,"column":4}}]},"32":{"line":222,"type":"if","locations":[{"start":{"line":222,"column":4},"end":{"line":222,"column":4}},{"start":{"line":222,"column":4},"end":{"line":222,"column":4}}]},"33":{"line":239,"type":"if","locations":[{"start":{"line":239,"column":4},"end":{"line":239,"column":4}},{"start":{"line":239,"column":4},"end":{"line":239,"column":4}}]},"34":{"line":257,"type":"if","locations":[{"start":{"line":257,"column":4},"end":{"line":257,"column":4}},{"start":{"line":257,"column":4},"end":{"line":257,"column":4}}]},"35":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":4},"end":{"line":258,"column":4}},{"start":{"line":258,"column":4},"end":{"line":258,"column":4}}]},"36":{"line":258,"type":"binary-expr","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":27}},{"start":{"line":258,"column":31},"end":{"line":258,"column":62}}]},"37":{"line":260,"type":"if","locations":[{"start":{"line":260,"column":4},"end":{"line":260,"column":4}},{"start":{"line":260,"column":4},"end":{"line":260,"column":4}}]},"38":{"line":262,"type":"if","locations":[{"start":{"line":262,"column":8},"end":{"line":262,"column":8}},{"start":{"line":262,"column":8},"end":{"line":262,"column":8}}]},"39":{"line":264,"type":"if","locations":[{"start":{"line":264,"column":10},"end":{"line":264,"column":10}},{"start":{"line":264,"column":10},"end":{"line":264,"column":10}}]},"40":{"line":266,"type":"if","locations":[{"start":{"line":266,"column":12},"end":{"line":266,"column":12}},{"start":{"line":266,"column":12},"end":{"line":266,"column":12}}]},"41":{"line":267,"type":"if","locations":[{"start":{"line":267,"column":12},"end":{"line":267,"column":12}},{"start":{"line":267,"column":12},"end":{"line":267,"column":12}}]},"42":{"line":268,"type":"if","locations":[{"start":{"line":268,"column":12},"end":{"line":268,"column":12}},{"start":{"line":268,"column":12},"end":{"line":268,"column":12}}]},"43":{"line":274,"type":"if","locations":[{"start":{"line":274,"column":12},"end":{"line":274,"column":12}},{"start":{"line":274,"column":12},"end":{"line":274,"column":12}}]},"44":{"line":275,"type":"if","locations":[{"start":{"line":275,"column":12},"end":{"line":275,"column":12}},{"start":{"line":275,"column":12},"end":{"line":275,"column":12}}]},"45":{"line":275,"type":"binary-expr","locations":[{"start":{"line":275,"column":16},"end":{"line":275,"column":22}},{"start":{"line":275,"column":26},"end":{"line":275,"column":41}}]},"46":{"line":277,"type":"if","locations":[{"start":{"line":277,"column":14},"end":{"line":277,"column":14}},{"start":{"line":277,"column":14},"end":{"line":277,"column":14}}]},"47":{"line":301,"type":"if","locations":[{"start":{"line":301,"column":4},"end":{"line":301,"column":4}},{"start":{"line":301,"column":4},"end":{"line":301,"column":4}}]},"48":{"line":301,"type":"binary-expr","locations":[{"start":{"line":301,"column":8},"end":{"line":301,"column":30}},{"start":{"line":301,"column":34},"end":{"line":301,"column":64}}]},"49":{"line":302,"type":"if","locations":[{"start":{"line":302,"column":4},"end":{"line":302,"column":4}},{"start":{"line":302,"column":4},"end":{"line":302,"column":4}}]},"50":{"line":303,"type":"if","locations":[{"start":{"line":303,"column":6},"end":{"line":303,"column":6}},{"start":{"line":303,"column":6},"end":{"line":303,"column":6}}]}},"code":["const path = require('path');","const fs = require('fs');","const request = require('superagent');","","const Constants = require('../util/Constants');","const convertArrayBuffer = require('../util/ConvertArrayBuffer');","const User = require('../structures/User');","const Message = require('../structures/Message');","const Guild = require('../structures/Guild');","const Channel = require('../structures/Channel');","const GuildMember = require('../structures/GuildMember');","const Emoji = require('../structures/Emoji');","const ReactionEmoji = require('../structures/ReactionEmoji');","","/**"," * The DataResolver identifies different objects and tries to resolve a specific piece of information from them, e.g."," * extracting a User from a Message object."," * @private"," */","class ClientDataResolver {","  /**","   * @param {Client} client The client the resolver is for","   */","  constructor(client) {","    this.client = client;","  }","","  /**","   * Data that resolves to give a User object. This can be:","   * * A User object","   * * A user ID","   * * A Message object (resolves to the message author)","   * * A Guild object (owner of the guild)","   * * A GuildMember object","   * @typedef {User|string|Message|Guild|GuildMember} UserResolvable","   */","","  /**","   * Resolves a UserResolvable to a User object","   * @param {UserResolvable} user The UserResolvable to identify","   * @returns {?User}","   */","  resolveUser(user) {","    if (user instanceof User) return user;","    if (typeof user === 'string') return this.client.users.get(user) || null;","    if (user instanceof GuildMember) return user.user;","    if (user instanceof Message) return user.author;","    if (user instanceof Guild) return user.owner;","    return null;","  }","","  /**","   * Resolves a UserResolvable to a user ID string","   * @param {UserResolvable} user The UserResolvable to identify","   * @returns {?string}","   */","  resolveUserID(user) {","    if (user instanceof User || user instanceof GuildMember) return user.id;","    if (typeof user === 'string') return user || null;","    if (user instanceof Message) return user.author.id;","    if (user instanceof Guild) return user.ownerID;","    return null;","  }","","  /**","   * Data that resolves to give a Guild object. This can be:","   * * A Guild object","   * * A Guild ID","   * @typedef {Guild|string} GuildResolvable","   */","","  /**","   * Resolves a GuildResolvable to a Guild object","   * @param {GuildResolvable} guild The GuildResolvable to identify","   * @returns {?Guild}","   */","  resolveGuild(guild) {","    if (guild instanceof Guild) return guild;","    if (typeof guild === 'string') return this.client.guilds.get(guild) || null;","    return null;","  }","","  /**","   * Data that resolves to give a GuildMember object. This can be:","   * * A GuildMember object","   * * A User object","   * @typedef {Guild} GuildMemberResolvable","   */","","  /**","   * Resolves a GuildMemberResolvable to a GuildMember object","   * @param {GuildResolvable} guild The guild that the member is part of","   * @param {UserResolvable} user The user that is part of the guild","   * @returns {?GuildMember}","   */","  resolveGuildMember(guild, user) {","    if (user instanceof GuildMember) return user;","    guild = this.resolveGuild(guild);","    user = this.resolveUser(user);","    if (!guild || !user) return null;","    return guild.members.get(user.id) || null;","  }","","  /**","   * Data that can be resolved to give a Channel. This can be:","   * * A Channel object","   * * A Message object (the channel the message was sent in)","   * * A Guild object (the #general channel)","   * * A channel ID","   * @typedef {Channel|Guild|Message|string} ChannelResolvable","   */","","  /**","   * Resolves a ChannelResolvable to a Channel object","   * @param {ChannelResolvable} channel The channel resolvable to resolve","   * @returns {?Channel}","   */","  resolveChannel(channel) {","    if (channel instanceof Channel) return channel;","    if (channel instanceof Message) return channel.channel;","    if (channel instanceof Guild) return channel.channels.get(channel.id) || null;","    if (typeof channel === 'string') return this.client.channels.get(channel) || null;","    return null;","  }","","  /**","   * Data that can be resolved to give an invite code. This can be:","   * * An invite code","   * * An invite URL","   * @typedef {string} InviteResolvable","   */","","  /**","   * Resolves InviteResolvable to an invite code","   * @param {InviteResolvable} data The invite resolvable to resolve","   * @returns {string}","   */","  resolveInviteCode(data) {","    const inviteRegex = /discord(?:app)?\\.(?:gg|com\\/invite)\\/([a-z0-9]{5})/i;","    const match = inviteRegex.exec(data);","    if (match && match[1]) return match[1];","    return data;","  }","","  /**","   * Data that can be resolved to give a permission number. This can be:","   * * A string","   * * A permission number","   *","   * Possible strings:","   * ```js","   * [","   *   \"CREATE_INSTANT_INVITE\",","   *   \"KICK_MEMBERS\",","   *   \"BAN_MEMBERS\",","   *   \"ADMINISTRATOR\",","   *   \"MANAGE_CHANNELS\",","   *   \"MANAGE_GUILD\",","   *   \"ADD_REACTIONS\", // add reactions to messages","   *   \"READ_MESSAGES\",","   *   \"SEND_MESSAGES\",","   *   \"SEND_TTS_MESSAGES\",","   *   \"MANAGE_MESSAGES\",","   *   \"EMBED_LINKS\",","   *   \"ATTACH_FILES\",","   *   \"READ_MESSAGE_HISTORY\",","   *   \"MENTION_EVERYONE\",","   *   \"EXTERNAL_EMOJIS\", // use external emojis","   *   \"CONNECT\", // connect to voice","   *   \"SPEAK\", // speak on voice","   *   \"MUTE_MEMBERS\", // globally mute members on voice","   *   \"DEAFEN_MEMBERS\", // globally deafen members on voice","   *   \"MOVE_MEMBERS\", // move member's voice channels","   *   \"USE_VAD\", // use voice activity detection","   *   \"CHANGE_NICKNAME\",","   *   \"MANAGE_NICKNAMES\", // change nicknames of others","   *   \"MANAGE_ROLES_OR_PERMISSIONS\",","   *   \"MANAGE_WEBHOOKS\",","   *   \"MANAGE_EMOJIS\"","   * ]","   * ```","   * @typedef {string|number} PermissionResolvable","   */","","  /**","   * Resolves a PermissionResolvable to a permission number","   * @param {PermissionResolvable} permission The permission resolvable to resolve","   * @returns {number}","   */","  resolvePermission(permission) {","    if (typeof permission === 'string') permission = Constants.PermissionFlags[permission];","    if (typeof permission !== 'number' || permission < 1) throw new Error(Constants.Errors.NOT_A_PERMISSION);","    return permission;","  }","","  /**","   * Turn an array of permissions into a valid Discord permission bitfield","   * @param {PermissionResolvable[]} permissions Permissions to resolve together","   * @returns {number}","   */","  resolvePermissions(permissions) {","    let bitfield = 0;","    for (const permission of permissions) bitfield |= this.resolvePermission(permission);","    return bitfield;","  }","","  /**","   * Data that can be resolved to give a string. This can be:","   * * A string","   * * An array (joined with a new line delimiter to give a string)","   * * Any value","   * @typedef {string|Array|*} StringResolvable","   */","","  /**","   * Resolves a StringResolvable to a string","   * @param {StringResolvable} data The string resolvable to resolve","   * @returns {string}","   */","  resolveString(data) {","    if (typeof data === 'string') return data;","    if (data instanceof Array) return data.join('\\n');","    return String(data);","  }","","  /**","   * Data that resolves to give a Base64 string, typically for image uploading. This can be:","   * * A Buffer","   * * A base64 string","   * @typedef {Buffer|string} Base64Resolvable","   */","","  /**","   * Resolves a Base64Resolvable to a Base 64 image","   * @param {Base64Resolvable} data The base 64 resolvable you want to resolve","   * @returns {?string}","   */","  resolveBase64(data) {","    if (data instanceof Buffer) return `data:image/jpg;base64,${data.toString('base64')}`;","    return data;","  }","","  /**","   * Data that can be resolved to give a Buffer. This can be:","   * * A Buffer","   * * The path to a local file","   * * A URL","   * @typedef {string|Buffer} BufferResolvable","   */","","  /**","   * Resolves a BufferResolvable to a Buffer","   * @param {BufferResolvable} resource The buffer resolvable to resolve","   * @returns {Promise<Buffer>}","   */","  resolveBuffer(resource) {","    if (resource instanceof Buffer) return Promise.resolve(resource);","    if (this.client.browser && resource instanceof ArrayBuffer) return Promise.resolve(convertArrayBuffer(resource));","","    if (typeof resource === 'string') {","      return new Promise((resolve, reject) => {","        if (/^https?:\\/\\//.test(resource)) {","          const req = request.get(resource).set('Content-Type', 'blob');","          if (this.client.browser) req.responseType('arraybuffer');","          req.end((err, res) => {","            if (err) return reject(err);","            if (this.client.browser) return resolve(convertArrayBuffer(res.xhr.response));","            if (!(res.body instanceof Buffer)) return reject(new TypeError('The response body isn\\'t a Buffer.'));","            return resolve(res.body);","          });","        } else {","          const file = path.resolve(resource);","          fs.stat(file, (err, stats) => {","            if (err) reject(err);","            if (!stats || !stats.isFile()) throw new Error(`The file could not be found: ${file}`);","            fs.readFile(file, (err2, data) => {","              if (err2) reject(err2); else resolve(data);","            });","          });","        }","      });","    }","","    return Promise.reject(new TypeError('The resource must be a string or Buffer.'));","  }","","  /**","   * Data that can be resolved to give an emoji identifier. This can be:","   * * A string","   * * An Emoji","   * * A ReactionEmoji","   * @typedef {string|Emoji|ReactionEmoji} EmojiIdentifierResolvable","   */","","  /**","   * Resolves an EmojiResolvable to an emoji identifier","   * @param {EmojiIdentifierResolvable} emoji The emoji resolvable to resolve","   * @returns {string}","   */","  resolveEmojiIdentifier(emoji) {","    if (emoji instanceof Emoji || emoji instanceof ReactionEmoji) return emoji.identifier;","    if (typeof emoji === 'string') {","      if (!emoji.includes('%')) return encodeURIComponent(emoji);","    }","    return null;","  }","}","","module.exports = ClientDataResolver;",""],"l":{"1":2,"2":2,"3":2,"5":2,"6":2,"7":2,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"25":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"58":0,"59":0,"60":0,"61":0,"62":0,"78":0,"79":0,"80":0,"97":0,"98":0,"99":0,"100":0,"101":0,"119":0,"120":0,"121":0,"122":0,"123":0,"139":0,"140":0,"141":0,"142":0,"191":0,"192":0,"193":0,"202":0,"203":0,"204":0,"221":0,"222":0,"223":0,"239":0,"240":0,"257":0,"258":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"284":0,"301":0,"302":0,"303":0,"305":0,"309":0}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/util/ConvertArrayBuffer.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/util/ConvertArrayBuffer.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0,"16":0},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"arrayBufferToBuffer","line":1,"loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":33}}},"2":{"name":"str2ab","line":8,"loc":{"start":{"line":8,"column":0},"end":{"line":8,"column":21}}},"3":{"name":"convertArrayBuffer","line":15,"loc":{"start":{"line":15,"column":17},"end":{"line":15,"column":48}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":6,"column":1}},"2":{"start":{"line":2,"column":2},"end":{"line":2,"column":43}},"3":{"start":{"line":3,"column":2},"end":{"line":3,"column":34}},"4":{"start":{"line":4,"column":2},"end":{"line":4,"column":62}},"5":{"start":{"line":4,"column":42},"end":{"line":4,"column":62}},"6":{"start":{"line":5,"column":2},"end":{"line":5,"column":16}},"7":{"start":{"line":8,"column":0},"end":{"line":13,"column":1}},"8":{"start":{"line":9,"column":2},"end":{"line":9,"column":49}},"9":{"start":{"line":10,"column":2},"end":{"line":10,"column":39}},"10":{"start":{"line":11,"column":2},"end":{"line":11,"column":84}},"11":{"start":{"line":11,"column":56},"end":{"line":11,"column":84}},"12":{"start":{"line":12,"column":2},"end":{"line":12,"column":16}},"13":{"start":{"line":15,"column":0},"end":{"line":18,"column":2}},"14":{"start":{"line":16,"column":2},"end":{"line":16,"column":43}},"15":{"start":{"line":16,"column":29},"end":{"line":16,"column":43}},"16":{"start":{"line":17,"column":2},"end":{"line":17,"column":32}}},"branchMap":{"1":{"line":16,"type":"if","locations":[{"start":{"line":16,"column":2},"end":{"line":16,"column":2}},{"start":{"line":16,"column":2},"end":{"line":16,"column":2}}]}},"code":["function arrayBufferToBuffer(ab) {","  const buffer = new Buffer(ab.byteLength);","  const view = new Uint8Array(ab);","  for (var i = 0; i < buffer.length; ++i) buffer[i] = view[i];","  return buffer;","}","","function str2ab(str) {","  const buffer = new ArrayBuffer(str.length * 2);","  const view = new Uint16Array(buffer);","  for (var i = 0, strLen = str.length; i < strLen; i++) view[i] = str.charCodeAt(i);","  return buffer;","}","","module.exports = function convertArrayBuffer(x) {","  if (typeof x === 'string') x = str2ab(x);","  return arrayBufferToBuffer(x);","};",""],"l":{"1":1,"2":0,"3":0,"4":0,"5":0,"8":1,"9":0,"10":0,"11":0,"12":0,"15":1,"16":0,"17":0}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/ClientManager.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/ClientManager.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":8,"loc":{"start":{"line":8,"column":13},"end":{"line":8,"column":22}}},"2":{"name":"(anonymous_2)","line":28,"loc":{"start":{"line":28,"column":20},"end":{"line":28,"column":45}}},"3":{"name":"(anonymous_3)","line":50,"loc":{"start":{"line":50,"column":16},"end":{"line":50,"column":23}}},"4":{"name":"(anonymous_4)","line":54,"loc":{"start":{"line":54,"column":9},"end":{"line":54,"column":12}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":47}},"2":{"start":{"line":13,"column":4},"end":{"line":13,"column":25}},"3":{"start":{"line":19,"column":4},"end":{"line":19,"column":34}},"4":{"start":{"line":29,"column":4},"end":{"line":29,"column":83}},"5":{"start":{"line":30,"column":4},"end":{"line":30,"column":30}},"6":{"start":{"line":31,"column":4},"end":{"line":31,"column":112}},"7":{"start":{"line":31,"column":49},"end":{"line":31,"column":98}},"8":{"start":{"line":32,"column":4},"end":{"line":43,"column":15}},"9":{"start":{"line":33,"column":6},"end":{"line":33,"column":75}},"10":{"start":{"line":34,"column":6},"end":{"line":34,"column":38}},"11":{"start":{"line":35,"column":6},"end":{"line":38,"column":9}},"12":{"start":{"line":36,"column":8},"end":{"line":36,"column":79}},"13":{"start":{"line":36,"column":33},"end":{"line":36,"column":79}},"14":{"start":{"line":37,"column":8},"end":{"line":37,"column":83}},"15":{"start":{"line":37,"column":33},"end":{"line":37,"column":83}},"16":{"start":{"line":39,"column":6},"end":{"line":42,"column":9}},"17":{"start":{"line":40,"column":8},"end":{"line":40,"column":23}},"18":{"start":{"line":41,"column":8},"end":{"line":41,"column":42}},"19":{"start":{"line":51,"column":4},"end":{"line":51,"column":97}},"20":{"start":{"line":51,"column":59},"end":{"line":51,"column":89}},"21":{"start":{"line":55,"column":4},"end":{"line":55,"column":29}},"22":{"start":{"line":56,"column":4},"end":{"line":63,"column":5}},"23":{"start":{"line":57,"column":6},"end":{"line":57,"column":31}},"24":{"start":{"line":58,"column":6},"end":{"line":58,"column":31}},"25":{"start":{"line":60,"column":6},"end":{"line":62,"column":9}},"26":{"start":{"line":61,"column":8},"end":{"line":61,"column":33}},"27":{"start":{"line":67,"column":0},"end":{"line":67,"column":31}}},"branchMap":{"1":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":8},"end":{"line":36,"column":8}},{"start":{"line":36,"column":8},"end":{"line":36,"column":8}}]},"2":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":8},"end":{"line":37,"column":8}},{"start":{"line":37,"column":8},"end":{"line":37,"column":8}}]},"3":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":4},"end":{"line":56,"column":4}},{"start":{"line":56,"column":4},"end":{"line":56,"column":4}}]}},"code":["const Constants = require('../util/Constants');","","/**"," * Manages the State and Background Tasks of the Client"," * @private"," */","class ClientManager {","  constructor(client) {","    /**","     * The Client that instantiated this Manager","     * @type {Client}","     */","    this.client = client;","","    /**","     * The heartbeat interval, null if not yet set","     * @type {?number}","     */","    this.heartbeatInterval = null;","  }","","  /**","   * Connects the Client to the WebSocket","   * @param {string} token The authorization token","   * @param {Function} resolve Function to run when connection is successful","   * @param {Function} reject Function to run when connection fails","   */","  connectToWebSocket(token, resolve, reject) {","    this.client.emit(Constants.Events.DEBUG, `Authenticated using token ${token}`);","    this.client.token = token;","    const timeout = this.client.setTimeout(() => reject(new Error(Constants.Errors.TOOK_TOO_LONG)), 1000 * 300);","    this.client.rest.methods.getGateway().then(gateway => {","      this.client.emit(Constants.Events.DEBUG, `Using gateway ${gateway}`);","      this.client.ws.connect(gateway);","      this.client.ws.once('close', event => {","        if (event.code === 4004) reject(new Error(Constants.Errors.BAD_LOGIN));","        if (event.code === 4010) reject(new Error(Constants.Errors.INVALID_SHARD));","      });","      this.client.once(Constants.Events.READY, () => {","        resolve(token);","        this.client.clearTimeout(timeout);","      });","    }, reject);","  }","","  /**","   * Sets up a keep-alive interval to keep the Client's connection valid","   * @param {number} time The interval in milliseconds at which heartbeat packets should be sent","   */","  setupKeepAlive(time) {","    this.heartbeatInterval = this.client.setInterval(() => this.client.ws.heartbeat(true), time);","  }","","  destroy() {","    this.client.ws.destroy();","    if (this.client.user.bot) {","      this.client.token = null;","      return Promise.resolve();","    } else {","      return this.client.rest.methods.logout().then(() => {","        this.client.token = null;","      });","    }","  }","}","","module.exports = ClientManager;",""],"l":{"1":1,"13":0,"19":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"39":0,"40":0,"41":0,"51":0,"55":0,"56":0,"57":0,"58":0,"60":0,"61":0,"67":1}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/WebhookClient.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/WebhookClient.js","s":{"1":2,"2":2,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":21,"loc":{"start":{"line":21,"column":13},"end":{"line":21,"column":34}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":49}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":50}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":59}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":53}},"5":{"start":{"line":5,"column":0},"end":{"line":5,"column":47}},"6":{"start":{"line":22,"column":4},"end":{"line":22,"column":27}},"7":{"start":{"line":28,"column":4},"end":{"line":28,"column":67}},"8":{"start":{"line":35,"column":4},"end":{"line":35,"column":38}},"9":{"start":{"line":42,"column":4},"end":{"line":42,"column":49}},"10":{"start":{"line":46,"column":0},"end":{"line":46,"column":31}}},"branchMap":{},"code":["const Webhook = require('../structures/Webhook');","const RESTManager = require('./rest/RESTManager');","const ClientDataResolver = require('./ClientDataResolver');","const mergeDefault = require('../util/MergeDefault');","const Constants = require('../util/Constants');","","/**"," * The Webhook Client"," * @extends {Webhook}"," */","class WebhookClient extends Webhook {","  /**","   * @param {string} id The id of the webhook.","   * @param {string} token the token of the webhook.","   * @param {ClientOptions} [options] Options for the client","   * @example","   * // create a new webhook and send a message","   * let hook = new Discord.WebhookClient('1234', 'abcdef')","   * hook.sendMessage('This will send a message').catch(console.error)","   */","  constructor(id, token, options) {","    super(null, id, token);","","    /**","     * The options the client was instantiated with","     * @type {ClientOptions}","     */","    this.options = mergeDefault(Constants.DefaultOptions, options);","","    /**","     * The REST manager of the client","     * @type {RESTManager}","     * @private","     */","    this.rest = new RESTManager(this);","","    /**","     * The Data Resolver of the Client","     * @type {ClientDataResolver}","     * @private","     */","    this.resolver = new ClientDataResolver(this);","  }","}","","module.exports = WebhookClient;",""],"l":{"1":2,"2":2,"3":0,"4":0,"5":0,"22":0,"28":0,"35":0,"42":0,"46":0}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/Webhook.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/Webhook.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"(anonymous_1)","line":8,"loc":{"start":{"line":8,"column":13},"end":{"line":8,"column":39}}},"2":{"name":"(anonymous_2)","line":25,"loc":{"start":{"line":25,"column":7},"end":{"line":25,"column":14}}},"3":{"name":"(anonymous_3)","line":88,"loc":{"start":{"line":88,"column":13},"end":{"line":88,"column":37}}},"4":{"name":"(anonymous_4)","line":109,"loc":{"start":{"line":109,"column":18},"end":{"line":109,"column":25}}},"5":{"name":"(anonymous_5)","line":124,"loc":{"start":{"line":124,"column":16},"end":{"line":124,"column":40}}},"6":{"name":"(anonymous_6)","line":137,"loc":{"start":{"line":137,"column":10},"end":{"line":137,"column":56}}},"7":{"name":"(anonymous_7)","line":162,"loc":{"start":{"line":162,"column":10},"end":{"line":162,"column":40}}},"8":{"name":"(anonymous_8)","line":178,"loc":{"start":{"line":178,"column":6},"end":{"line":178,"column":33}}},"9":{"name":"(anonymous_9)","line":195,"loc":{"start":{"line":195,"column":8},"end":{"line":195,"column":11}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":29}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":57}},"3":{"start":{"line":9,"column":4},"end":{"line":22,"column":5}},"4":{"start":{"line":16,"column":6},"end":{"line":16,"column":63}},"5":{"start":{"line":17,"column":6},"end":{"line":17,"column":41}},"6":{"start":{"line":17,"column":20},"end":{"line":17,"column":41}},"7":{"start":{"line":19,"column":6},"end":{"line":19,"column":25}},"8":{"start":{"line":20,"column":6},"end":{"line":20,"column":25}},"9":{"start":{"line":21,"column":6},"end":{"line":21,"column":61}},"10":{"start":{"line":30,"column":4},"end":{"line":30,"column":26}},"11":{"start":{"line":36,"column":4},"end":{"line":36,"column":28}},"12":{"start":{"line":42,"column":4},"end":{"line":42,"column":30}},"13":{"start":{"line":48,"column":4},"end":{"line":48,"column":22}},"14":{"start":{"line":54,"column":4},"end":{"line":54,"column":33}},"15":{"start":{"line":60,"column":4},"end":{"line":60,"column":37}},"16":{"start":{"line":66,"column":4},"end":{"line":66,"column":42}},"17":{"start":{"line":66,"column":19},"end":{"line":66,"column":42}},"18":{"start":{"line":89,"column":4},"end":{"line":89,"column":79}},"19":{"start":{"line":110,"column":4},"end":{"line":110,"column":72}},"20":{"start":{"line":125,"column":4},"end":{"line":125,"column":42}},"21":{"start":{"line":126,"column":4},"end":{"line":126,"column":79}},"22":{"start":{"line":138,"column":4},"end":{"line":146,"column":5}},"23":{"start":{"line":139,"column":6},"end":{"line":145,"column":7}},"24":{"start":{"line":140,"column":8},"end":{"line":140,"column":45}},"25":{"start":{"line":141,"column":13},"end":{"line":145,"column":7}},"26":{"start":{"line":142,"column":8},"end":{"line":142,"column":50}},"27":{"start":{"line":144,"column":8},"end":{"line":144,"column":30}},"28":{"start":{"line":147,"column":4},"end":{"line":152,"column":6}},"29":{"start":{"line":148,"column":6},"end":{"line":151,"column":8}},"30":{"start":{"line":163,"column":4},"end":{"line":167,"column":5}},"31":{"start":{"line":164,"column":6},"end":{"line":164,"column":64}},"32":{"start":{"line":164,"column":45},"end":{"line":164,"column":64}},"33":{"start":{"line":165,"column":6},"end":{"line":165,"column":82}},"34":{"start":{"line":165,"column":34},"end":{"line":165,"column":82}},"35":{"start":{"line":166,"column":6},"end":{"line":166,"column":64}},"36":{"start":{"line":166,"column":33},"end":{"line":166,"column":64}},"37":{"start":{"line":168,"column":4},"end":{"line":168,"column":80}},"38":{"start":{"line":169,"column":4},"end":{"line":169,"column":80}},"39":{"start":{"line":179,"column":4},"end":{"line":184,"column":5}},"40":{"start":{"line":180,"column":6},"end":{"line":183,"column":9}},"41":{"start":{"line":181,"column":8},"end":{"line":181,"column":65}},"42":{"start":{"line":182,"column":8},"end":{"line":182,"column":73}},"43":{"start":{"line":185,"column":4},"end":{"line":188,"column":7}},"44":{"start":{"line":186,"column":6},"end":{"line":186,"column":23}},"45":{"start":{"line":187,"column":6},"end":{"line":187,"column":18}},"46":{"start":{"line":196,"column":4},"end":{"line":196,"column":56}},"47":{"start":{"line":200,"column":0},"end":{"line":200,"column":25}}},"branchMap":{"1":{"line":9,"type":"if","locations":[{"start":{"line":9,"column":4},"end":{"line":9,"column":4}},{"start":{"line":9,"column":4},"end":{"line":9,"column":4}}]},"2":{"line":17,"type":"if","locations":[{"start":{"line":17,"column":6},"end":{"line":17,"column":6}},{"start":{"line":17,"column":6},"end":{"line":17,"column":6}}]},"3":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":4},"end":{"line":66,"column":4}},{"start":{"line":66,"column":4},"end":{"line":66,"column":4}}]},"4":{"line":138,"type":"if","locations":[{"start":{"line":138,"column":4},"end":{"line":138,"column":4}},{"start":{"line":138,"column":4},"end":{"line":138,"column":4}}]},"5":{"line":139,"type":"if","locations":[{"start":{"line":139,"column":6},"end":{"line":139,"column":6}},{"start":{"line":139,"column":6},"end":{"line":139,"column":6}}]},"6":{"line":141,"type":"if","locations":[{"start":{"line":141,"column":13},"end":{"line":141,"column":13}},{"start":{"line":141,"column":13},"end":{"line":141,"column":13}}]},"7":{"line":141,"type":"binary-expr","locations":[{"start":{"line":141,"column":17},"end":{"line":141,"column":27}},{"start":{"line":141,"column":31},"end":{"line":141,"column":46}}]},"8":{"line":163,"type":"if","locations":[{"start":{"line":163,"column":4},"end":{"line":163,"column":4}},{"start":{"line":163,"column":4},"end":{"line":163,"column":4}}]},"9":{"line":164,"type":"if","locations":[{"start":{"line":164,"column":6},"end":{"line":164,"column":6}},{"start":{"line":164,"column":6},"end":{"line":164,"column":6}}]},"10":{"line":165,"type":"if","locations":[{"start":{"line":165,"column":6},"end":{"line":165,"column":6}},{"start":{"line":165,"column":6},"end":{"line":165,"column":6}}]},"11":{"line":165,"type":"binary-expr","locations":[{"start":{"line":165,"column":67},"end":{"line":165,"column":71}},{"start":{"line":165,"column":75},"end":{"line":165,"column":77}}]},"12":{"line":166,"type":"if","locations":[{"start":{"line":166,"column":6},"end":{"line":166,"column":6}},{"start":{"line":166,"column":6},"end":{"line":166,"column":6}}]},"13":{"line":169,"type":"binary-expr","locations":[{"start":{"line":169,"column":37},"end":{"line":169,"column":41}},{"start":{"line":169,"column":45},"end":{"line":169,"column":47}}]},"14":{"line":179,"type":"if","locations":[{"start":{"line":179,"column":4},"end":{"line":179,"column":4}},{"start":{"line":179,"column":4},"end":{"line":179,"column":4}}]}},"code":["const path = require('path');","const escapeMarkdown = require('../util/EscapeMarkdown');","","/**"," * Represents a webhook"," */","class Webhook {","  constructor(client, dataOrID, token) {","    if (client) {","      /**","       * The Client that instantiated the Webhook","       * @name Webhook#client","       * @type {Client}","       * @readonly","       */","      Object.defineProperty(this, 'client', { value: client });","      if (dataOrID) this.setup(dataOrID);","    } else {","      this.id = dataOrID;","      this.token = token;","      Object.defineProperty(this, 'client', { value: this });","    }","  }","","  setup(data) {","    /**","     * The name of the webhook","     * @type {string}","     */","    this.name = data.name;","","    /**","     * The token for the webhook","     * @type {string}","     */","    this.token = data.token;","","    /**","     * The avatar for the webhook","     * @type {string}","     */","    this.avatar = data.avatar;","","    /**","     * The ID of the webhook","     * @type {string}","     */","    this.id = data.id;","","    /**","     * The guild the webhook belongs to","     * @type {string}","     */","    this.guildID = data.guild_id;","","    /**","     * The channel the webhook belongs to","     * @type {string}","     */","    this.channelID = data.channel_id;","","    /**","     * The owner of the webhook","     * @type {User}","     */","    if (data.user) this.owner = data.user;","  }","","  /**","   * Options that can be passed into sendMessage, sendTTSMessage, sendFile, sendCode","   * @typedef {Object} WebhookMessageOptions","   * @property {boolean} [tts=false] Whether or not the message should be spoken aloud","   * @property {boolean} [disableEveryone=this.options.disableEveryone] Whether or not @everyone and @here","   * should be replaced with plain-text","   */","","  /**","   * Send a message with this webhook","   * @param {StringResolvable} content The content to send.","   * @param {WebhookMessageOptions} [options={}] The options to provide.","   * @returns {Promise<Message|Message[]>}","   * @example","   * // send a message","   * webhook.sendMessage('hello!')","   *  .then(message => console.log(`Sent message: ${message.content}`))","   *  .catch(console.error);","   */","  sendMessage(content, options = {}) {","    return this.client.rest.methods.sendWebhookMessage(this, content, options);","  }","","  /**","   * Send a raw slack message with this webhook","   * @param {Object} body The raw body to send.","   * @returns {Promise}","   * @example","   * // send a slack message","   * webhook.sendSlackMessage({","   *   'username': 'Wumpus',","   *   'attachments': [{","   *     'pretext': 'this looks pretty cool',","   *     'color': '#F0F',","   *     'footer_icon': 'http://snek.s3.amazonaws.com/topSnek.png',","   *     'footer': 'Powered by sneks',","   *     'ts': Date.now() / 1000","   *   }]","   * }).catch(console.error);","   */","  sendSlackMessage(body) {","    return this.client.rest.methods.sendSlackWebhookMessage(this, body);","  }","","  /**","   * Send a text-to-speech message with this webhook","   * @param {StringResolvable} content The content to send","   * @param {WebhookMessageOptions} [options={}] The options to provide","   * @returns {Promise<Message|Message[]>}","   * @example","   * // send a TTS message","   * webhook.sendTTSMessage('hello!')","   *  .then(message => console.log(`Sent tts message: ${message.content}`))","   *  .catch(console.error);","   */","  sendTTSMessage(content, options = {}) {","    Object.assign(options, { tts: true });","    return this.client.rest.methods.sendWebhookMessage(this, content, options);","  }","","  /**","   * Send a file with this webhook","   * @param {BufferResolvable} attachment The file to send","   * @param {string} [fileName=\"file.jpg\"] The name and extension of the file","   * @param {StringResolvable} [content] Text message to send with the attachment","   * @param {WebhookMessageOptions} [options] The options to provide","   * @returns {Promise<Message>}","   */","  sendFile(attachment, fileName, content, options = {}) {","    if (!fileName) {","      if (typeof attachment === 'string') {","        fileName = path.basename(attachment);","      } else if (attachment && attachment.path) {","        fileName = path.basename(attachment.path);","      } else {","        fileName = 'file.jpg';","      }","    }","    return this.client.resolver.resolveBuffer(attachment).then(file =>","      this.client.rest.methods.sendWebhookMessage(this, content, options, {","        file,","        name: fileName,","      })","    );","  }","","  /**","   * Send a code block with this webhook","   * @param {string} lang Language for the code block","   * @param {StringResolvable} content Content of the code block","   * @param {WebhookMessageOptions} options The options to provide","   * @returns {Promise<Message|Message[]>}","   */","  sendCode(lang, content, options = {}) {","    if (options.split) {","      if (typeof options.split !== 'object') options.split = {};","      if (!options.split.prepend) options.split.prepend = `\\`\\`\\`${lang || ''}\\n`;","      if (!options.split.append) options.split.append = '\\n```';","    }","    content = escapeMarkdown(this.client.resolver.resolveString(content), true);","    return this.sendMessage(`\\`\\`\\`${lang || ''}\\n${content}\\n\\`\\`\\``, options);","  }","","  /**","   * Edit the webhook.","   * @param {string} name The new name for the Webhook","   * @param {BufferResolvable} avatar The new avatar for the Webhook.","   * @returns {Promise<Webhook>}","   */","  edit(name = this.name, avatar) {","    if (avatar) {","      return this.client.resolver.resolveBuffer(avatar).then(file => {","        const dataURI = this.client.resolver.resolveBase64(file);","        return this.client.rest.methods.editWebhook(this, name, dataURI);","      });","    }","    return this.client.rest.methods.editWebhook(this, name).then(data => {","      this.setup(data);","      return this;","    });","  }","","  /**","   * Delete the webhook","   * @returns {Promise}","   */","  delete() {","    return this.client.rest.methods.deleteWebhook(this);","  }","}","","module.exports = Webhook;",""],"l":{"1":1,"2":1,"9":0,"16":0,"17":0,"19":0,"20":0,"21":0,"30":0,"36":0,"42":0,"48":0,"54":0,"60":0,"66":0,"89":0,"110":0,"125":0,"126":0,"138":0,"139":0,"140":0,"141":0,"142":0,"144":0,"147":0,"148":0,"163":0,"164":0,"165":0,"166":0,"168":0,"169":0,"179":0,"180":0,"181":0,"182":0,"185":0,"186":0,"187":0,"196":0,"200":1}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/sharding/ShardClientUtil.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/sharding/ShardClientUtil.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"(anonymous_1)","line":11,"loc":{"start":{"line":11,"column":13},"end":{"line":11,"column":22}}},"2":{"name":"(anonymous_2)","line":21,"loc":{"start":{"line":21,"column":8},"end":{"line":21,"column":11}}},"3":{"name":"(anonymous_3)","line":30,"loc":{"start":{"line":30,"column":11},"end":{"line":30,"column":14}}},"4":{"name":"(anonymous_4)","line":39,"loc":{"start":{"line":39,"column":6},"end":{"line":39,"column":16}}},"5":{"name":"(anonymous_5)","line":57,"loc":{"start":{"line":57,"column":19},"end":{"line":57,"column":26}}},"6":{"name":"(anonymous_6)","line":78,"loc":{"start":{"line":78,"column":15},"end":{"line":78,"column":24}}},"7":{"name":"(anonymous_7)","line":99,"loc":{"start":{"line":99,"column":16},"end":{"line":99,"column":26}}},"8":{"name":"(anonymous_8)","line":121,"loc":{"start":{"line":121,"column":10},"end":{"line":121,"column":26}}},"9":{"name":"(anonymous_9)","line":133,"loc":{"start":{"line":133,"column":18},"end":{"line":133,"column":27}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":47}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":57}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":25}},"4":{"start":{"line":13,"column":4},"end":{"line":13,"column":58}},"5":{"start":{"line":22,"column":4},"end":{"line":22,"column":39}},"6":{"start":{"line":31,"column":4},"end":{"line":31,"column":42}},"7":{"start":{"line":40,"column":4},"end":{"line":45,"column":7}},"8":{"start":{"line":41,"column":6},"end":{"line":43,"column":9}},"9":{"start":{"line":42,"column":8},"end":{"line":42,"column":45}},"10":{"start":{"line":42,"column":17},"end":{"line":42,"column":29}},"11":{"start":{"line":42,"column":35},"end":{"line":42,"column":45}},"12":{"start":{"line":44,"column":6},"end":{"line":44,"column":78}},"13":{"start":{"line":44,"column":17},"end":{"line":44,"column":78}},"14":{"start":{"line":58,"column":4},"end":{"line":70,"column":7}},"15":{"start":{"line":59,"column":6},"end":{"line":63,"column":8}},"16":{"start":{"line":60,"column":8},"end":{"line":60,"column":61}},"17":{"start":{"line":60,"column":54},"end":{"line":60,"column":61}},"18":{"start":{"line":61,"column":8},"end":{"line":61,"column":52}},"19":{"start":{"line":62,"column":8},"end":{"line":62,"column":94}},"20":{"start":{"line":62,"column":29},"end":{"line":62,"column":54}},"21":{"start":{"line":62,"column":60},"end":{"line":62,"column":94}},"22":{"start":{"line":64,"column":6},"end":{"line":64,"column":38}},"23":{"start":{"line":66,"column":6},"end":{"line":69,"column":9}},"24":{"start":{"line":67,"column":8},"end":{"line":67,"column":52}},"25":{"start":{"line":68,"column":8},"end":{"line":68,"column":20}},"26":{"start":{"line":79,"column":4},"end":{"line":91,"column":7}},"27":{"start":{"line":80,"column":6},"end":{"line":84,"column":8}},"28":{"start":{"line":81,"column":8},"end":{"line":81,"column":58}},"29":{"start":{"line":81,"column":51},"end":{"line":81,"column":58}},"30":{"start":{"line":82,"column":8},"end":{"line":82,"column":52}},"31":{"start":{"line":83,"column":8},"end":{"line":83,"column":94}},"32":{"start":{"line":83,"column":29},"end":{"line":83,"column":54}},"33":{"start":{"line":83,"column":60},"end":{"line":83,"column":94}},"34":{"start":{"line":85,"column":6},"end":{"line":85,"column":38}},"35":{"start":{"line":87,"column":6},"end":{"line":90,"column":9}},"36":{"start":{"line":88,"column":8},"end":{"line":88,"column":52}},"37":{"start":{"line":89,"column":8},"end":{"line":89,"column":20}},"38":{"start":{"line":100,"column":4},"end":{"line":100,"column":25}},"39":{"start":{"line":100,"column":18},"end":{"line":100,"column":25}},"40":{"start":{"line":101,"column":4},"end":{"line":112,"column":5}},"41":{"start":{"line":102,"column":6},"end":{"line":102,"column":50}},"42":{"start":{"line":103,"column":6},"end":{"line":103,"column":30}},"43":{"start":{"line":104,"column":6},"end":{"line":104,"column":52}},"44":{"start":{"line":104,"column":32},"end":{"line":104,"column":52}},"45":{"start":{"line":105,"column":6},"end":{"line":105,"column":85}},"46":{"start":{"line":106,"column":11},"end":{"line":112,"column":5}},"47":{"start":{"line":107,"column":6},"end":{"line":111,"column":7}},"48":{"start":{"line":108,"column":8},"end":{"line":108,"column":99}},"49":{"start":{"line":110,"column":8},"end":{"line":110,"column":85}},"50":{"start":{"line":122,"column":4},"end":{"line":125,"column":7}},"51":{"start":{"line":123,"column":6},"end":{"line":123,"column":92}},"52":{"start":{"line":124,"column":6},"end":{"line":124,"column":37}},"53":{"start":{"line":134,"column":4},"end":{"line":138,"column":5}},"54":{"start":{"line":135,"column":6},"end":{"line":135,"column":41}},"55":{"start":{"line":137,"column":6},"end":{"line":137,"column":117}},"56":{"start":{"line":139,"column":4},"end":{"line":139,"column":27}},"57":{"start":{"line":143,"column":0},"end":{"line":143,"column":33}}},"branchMap":{"1":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":8},"end":{"line":42,"column":8}},{"start":{"line":42,"column":8},"end":{"line":42,"column":8}}]},"2":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":6},"end":{"line":44,"column":6}},{"start":{"line":44,"column":6},"end":{"line":44,"column":6}}]},"3":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":8},"end":{"line":60,"column":8}},{"start":{"line":60,"column":8},"end":{"line":60,"column":8}}]},"4":{"line":60,"type":"binary-expr","locations":[{"start":{"line":60,"column":12},"end":{"line":60,"column":20}},{"start":{"line":60,"column":24},"end":{"line":60,"column":52}}]},"5":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":8},"end":{"line":62,"column":8}},{"start":{"line":62,"column":8},"end":{"line":62,"column":8}}]},"6":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":8},"end":{"line":81,"column":8}},{"start":{"line":81,"column":8},"end":{"line":81,"column":8}}]},"7":{"line":81,"type":"binary-expr","locations":[{"start":{"line":81,"column":12},"end":{"line":81,"column":20}},{"start":{"line":81,"column":24},"end":{"line":81,"column":49}}]},"8":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":8},"end":{"line":83,"column":8}},{"start":{"line":83,"column":8},"end":{"line":83,"column":8}}]},"9":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":4},"end":{"line":100,"column":4}},{"start":{"line":100,"column":4},"end":{"line":100,"column":4}}]},"10":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":4},"end":{"line":101,"column":4}},{"start":{"line":101,"column":4},"end":{"line":101,"column":4}}]},"11":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":11},"end":{"line":106,"column":11}},{"start":{"line":106,"column":11},"end":{"line":106,"column":11}}]},"12":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":4},"end":{"line":134,"column":4}},{"start":{"line":134,"column":4},"end":{"line":134,"column":4}}]}},"code":["const makeError = require('../util/MakeError');","const makePlainError = require('../util/MakePlainError');","","/**"," * Helper class for sharded clients spawned as a child process, such as from a ShardingManager"," */","class ShardClientUtil {","  /**","   * @param {Client} client Client of the current shard","   */","  constructor(client) {","    this.client = client;","    process.on('message', this._handleMessage.bind(this));","  }","","  /**","   * ID of this shard","   * @type {number}","   * @readonly","   */","  get id() {","    return this.client.options.shardId;","  }","","  /**","   * Total number of shards","   * @type {number}","   * @readonly","   */","  get count() {","    return this.client.options.shardCount;","  }","","  /**","   * Sends a message to the master process","   * @param {*} message Message to send","   * @returns {Promise<void>}","   */","  send(message) {","    return new Promise((resolve, reject) => {","      const sent = process.send(message, err => {","        if (err) reject(err); else resolve();","      });","      if (!sent) throw new Error('Failed to send message to master process.');","    });","  }","","  /**","   * Fetches a Client property value of each shard.","   * @param {string} prop Name of the Client property to get, using periods for nesting","   * @returns {Promise<Array>}","   * @example","   * client.shard.fetchClientValues('guilds.size').then(results => {","   *   console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`);","   * }).catch(console.error);","   */","  fetchClientValues(prop) {","    return new Promise((resolve, reject) => {","      const listener = message => {","        if (!message || message._sFetchProp !== prop) return;","        process.removeListener('message', listener);","        if (!message._error) resolve(message._result); else reject(makeError(message._error));","      };","      process.on('message', listener);","","      this.send({ _sFetchProp: prop }).catch(err => {","        process.removeListener('message', listener);","        reject(err);","      });","    });","  }","","  /**","   * Evaluates a script on all shards, in the context of the Clients.","   * @param {string} script JavaScript to run on each shard","   * @returns {Promise<Array>} Results of the script execution","   */","  broadcastEval(script) {","    return new Promise((resolve, reject) => {","      const listener = message => {","        if (!message || message._sEval !== script) return;","        process.removeListener('message', listener);","        if (!message._error) resolve(message._result); else reject(makeError(message._error));","      };","      process.on('message', listener);","","      this.send({ _sEval: script }).catch(err => {","        process.removeListener('message', listener);","        reject(err);","      });","    });","  }","","  /**","   * Handles an IPC message","   * @param {*} message Message received","   * @private","   */","  _handleMessage(message) {","    if (!message) return;","    if (message._fetchProp) {","      const props = message._fetchProp.split('.');","      let value = this.client;","      for (const prop of props) value = value[prop];","      this._respond('fetchProp', { _fetchProp: message._fetchProp, _result: value });","    } else if (message._eval) {","      try {","        this._respond('eval', { _eval: message._eval, _result: this.client._eval(message._eval) });","      } catch (err) {","        this._respond('eval', { _eval: message._eval, _error: makePlainError(err) });","      }","    }","  }","","  /**","   * Sends a message to the master process, emitting an error from the client upon failure","   * @param {string} type Type of response to send","   * @param {*} message Message to send","   * @private","   */","  _respond(type, message) {","    this.send(message).catch(err => {","      err.message = `Error when sending ${type} response to master process: ${err.message}`;","      this.client.emit('error', err);","    });","  }","","  /**","   * Creates/gets the singleton of this class","   * @param {Client} client Client to use","   * @returns {ShardClientUtil}","   */","  static singleton(client) {","    if (!this._singleton) {","      this._singleton = new this(client);","    } else {","      client.emit('warn', 'Multiple clients created in child process; only the first will handle sharding helpers.');","    }","    return this._singleton;","  }","}","","module.exports = ShardClientUtil;",""],"l":{"1":1,"2":1,"12":0,"13":0,"22":0,"31":0,"40":0,"41":0,"42":0,"44":0,"58":0,"59":0,"60":0,"61":0,"62":0,"64":0,"66":0,"67":0,"68":0,"79":0,"80":0,"81":0,"82":0,"83":0,"85":0,"87":0,"88":0,"89":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"110":0,"122":0,"123":0,"124":0,"134":0,"135":0,"137":0,"139":0,"143":1}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/util/MakeError.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/util/MakeError.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"makeError","line":1,"loc":{"start":{"line":1,"column":17},"end":{"line":1,"column":41}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":6,"column":2}},"2":{"start":{"line":2,"column":2},"end":{"line":2,"column":37}},"3":{"start":{"line":3,"column":2},"end":{"line":3,"column":22}},"4":{"start":{"line":4,"column":2},"end":{"line":4,"column":24}},"5":{"start":{"line":5,"column":2},"end":{"line":5,"column":13}}},"branchMap":{},"code":["module.exports = function makeError(obj) {","  const err = new Error(obj.message);","  err.name = obj.name;","  err.stack = obj.stack;","  return err;","};",""],"l":{"1":1,"2":0,"3":0,"4":0,"5":0}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/util/MakePlainError.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/util/MakePlainError.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"makePlainError","line":1,"loc":{"start":{"line":1,"column":17},"end":{"line":1,"column":46}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":7,"column":2}},"2":{"start":{"line":2,"column":2},"end":{"line":2,"column":17}},"3":{"start":{"line":3,"column":2},"end":{"line":3,"column":22}},"4":{"start":{"line":4,"column":2},"end":{"line":4,"column":28}},"5":{"start":{"line":5,"column":2},"end":{"line":5,"column":24}},"6":{"start":{"line":6,"column":2},"end":{"line":6,"column":13}}},"branchMap":{},"code":["module.exports = function makePlainError(err) {","  const obj = {};","  obj.name = err.name;","  obj.message = err.message;","  obj.stack = err.stack;","  return obj;","};",""],"l":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/sharding/ShardingManager.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/sharding/ShardingManager.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"(anonymous_1)","line":24,"loc":{"start":{"line":24,"column":13},"end":{"line":24,"column":34}}},"2":{"name":"(anonymous_2)","line":88,"loc":{"start":{"line":88,"column":13},"end":{"line":88,"column":37}}},"3":{"name":"(anonymous_3)","line":106,"loc":{"start":{"line":106,"column":7},"end":{"line":106,"column":49}}},"4":{"name":"(anonymous_4)","line":127,"loc":{"start":{"line":127,"column":8},"end":{"line":127,"column":24}}},"5":{"name":"(anonymous_5)","line":158,"loc":{"start":{"line":158,"column":11},"end":{"line":158,"column":21}}},"6":{"name":"(anonymous_6)","line":169,"loc":{"start":{"line":169,"column":15},"end":{"line":169,"column":24}}},"7":{"name":"(anonymous_7)","line":184,"loc":{"start":{"line":184,"column":19},"end":{"line":184,"column":26}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":29}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":25}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":52}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":53}},"5":{"start":{"line":5,"column":0},"end":{"line":5,"column":33}},"6":{"start":{"line":6,"column":0},"end":{"line":6,"column":49}},"7":{"start":{"line":7,"column":0},"end":{"line":7,"column":73}},"8":{"start":{"line":25,"column":4},"end":{"line":25,"column":12}},"9":{"start":{"line":26,"column":4},"end":{"line":31,"column":16}},"10":{"start":{"line":37,"column":4},"end":{"line":37,"column":21}},"11":{"start":{"line":38,"column":4},"end":{"line":38,"column":58}},"12":{"start":{"line":38,"column":15},"end":{"line":38,"column":58}},"13":{"start":{"line":39,"column":4},"end":{"line":39,"column":78}},"14":{"start":{"line":39,"column":32},"end":{"line":39,"column":78}},"15":{"start":{"line":40,"column":4},"end":{"line":40,"column":41}},"16":{"start":{"line":41,"column":4},"end":{"line":41,"column":80}},"17":{"start":{"line":41,"column":25},"end":{"line":41,"column":80}},"18":{"start":{"line":47,"column":4},"end":{"line":47,"column":43}},"19":{"start":{"line":48,"column":4},"end":{"line":56,"column":5}},"20":{"start":{"line":49,"column":6},"end":{"line":51,"column":7}},"21":{"start":{"line":50,"column":8},"end":{"line":50,"column":66}},"22":{"start":{"line":52,"column":6},"end":{"line":52,"column":93}},"23":{"start":{"line":52,"column":32},"end":{"line":52,"column":93}},"24":{"start":{"line":53,"column":6},"end":{"line":55,"column":7}},"25":{"start":{"line":54,"column":8},"end":{"line":54,"column":69}},"26":{"start":{"line":62,"column":4},"end":{"line":62,"column":35}},"27":{"start":{"line":68,"column":4},"end":{"line":68,"column":39}},"28":{"start":{"line":74,"column":4},"end":{"line":74,"column":78}},"29":{"start":{"line":80,"column":4},"end":{"line":80,"column":35}},"30":{"start":{"line":89,"column":4},"end":{"line":89,"column":54}},"31":{"start":{"line":90,"column":4},"end":{"line":90,"column":31}},"32":{"start":{"line":96,"column":4},"end":{"line":96,"column":31}},"33":{"start":{"line":97,"column":4},"end":{"line":97,"column":34}},"34":{"start":{"line":107,"column":4},"end":{"line":117,"column":5}},"35":{"start":{"line":108,"column":6},"end":{"line":111,"column":9}},"36":{"start":{"line":109,"column":8},"end":{"line":109,"column":33}},"37":{"start":{"line":110,"column":8},"end":{"line":110,"column":41}},"38":{"start":{"line":113,"column":6},"end":{"line":113,"column":113}},"39":{"start":{"line":113,"column":55},"end":{"line":113,"column":113}},"40":{"start":{"line":114,"column":6},"end":{"line":114,"column":83}},"41":{"start":{"line":114,"column":22},"end":{"line":114,"column":83}},"42":{"start":{"line":115,"column":6},"end":{"line":115,"column":101}},"43":{"start":{"line":115,"column":41},"end":{"line":115,"column":101}},"44":{"start":{"line":116,"column":6},"end":{"line":116,"column":40}},"45":{"start":{"line":128,"column":4},"end":{"line":150,"column":7}},"46":{"start":{"line":129,"column":6},"end":{"line":129,"column":101}},"47":{"start":{"line":129,"column":38},"end":{"line":129,"column":101}},"48":{"start":{"line":130,"column":6},"end":{"line":130,"column":32}},"49":{"start":{"line":132,"column":6},"end":{"line":132,"column":25}},"50":{"start":{"line":133,"column":6},"end":{"line":136,"column":7}},"51":{"start":{"line":134,"column":8},"end":{"line":134,"column":29}},"52":{"start":{"line":135,"column":8},"end":{"line":135,"column":15}},"53":{"start":{"line":138,"column":6},"end":{"line":149,"column":7}},"54":{"start":{"line":139,"column":8},"end":{"line":139,"column":71}},"55":{"start":{"line":139,"column":52},"end":{"line":139,"column":71}},"56":{"start":{"line":140,"column":8},"end":{"line":140,"column":29}},"57":{"start":{"line":142,"column":8},"end":{"line":148,"column":18}},"58":{"start":{"line":143,"column":10},"end":{"line":143,"column":29}},"59":{"start":{"line":144,"column":10},"end":{"line":147,"column":11}},"60":{"start":{"line":145,"column":12},"end":{"line":145,"column":36}},"61":{"start":{"line":146,"column":12},"end":{"line":146,"column":33}},"62":{"start":{"line":159,"column":4},"end":{"line":159,"column":24}},"63":{"start":{"line":160,"column":4},"end":{"line":160,"column":81}},"64":{"start":{"line":160,"column":46},"end":{"line":160,"column":81}},"65":{"start":{"line":161,"column":4},"end":{"line":161,"column":33}},"66":{"start":{"line":170,"column":4},"end":{"line":170,"column":24}},"67":{"start":{"line":171,"column":4},"end":{"line":171,"column":80}},"68":{"start":{"line":171,"column":46},"end":{"line":171,"column":80}},"69":{"start":{"line":172,"column":4},"end":{"line":172,"column":33}},"70":{"start":{"line":185,"column":4},"end":{"line":185,"column":97}},"71":{"start":{"line":185,"column":32},"end":{"line":185,"column":97}},"72":{"start":{"line":186,"column":4},"end":{"line":186,"column":106}},"73":{"start":{"line":186,"column":47},"end":{"line":186,"column":106}},"74":{"start":{"line":187,"column":4},"end":{"line":187,"column":24}},"75":{"start":{"line":188,"column":4},"end":{"line":188,"column":90}},"76":{"start":{"line":188,"column":46},"end":{"line":188,"column":90}},"77":{"start":{"line":189,"column":4},"end":{"line":189,"column":33}},"78":{"start":{"line":193,"column":0},"end":{"line":193,"column":33}}},"branchMap":{"1":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":4},"end":{"line":38,"column":4}},{"start":{"line":38,"column":4},"end":{"line":38,"column":4}}]},"2":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":4},"end":{"line":39,"column":4}},{"start":{"line":39,"column":4},"end":{"line":39,"column":4}}]},"3":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":4},"end":{"line":41,"column":4}},{"start":{"line":41,"column":4},"end":{"line":41,"column":4}}]},"4":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":4},"end":{"line":48,"column":4}},{"start":{"line":48,"column":4},"end":{"line":48,"column":4}}]},"5":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":6},"end":{"line":49,"column":6}},{"start":{"line":49,"column":6},"end":{"line":49,"column":6}}]},"6":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":10},"end":{"line":49,"column":46}},{"start":{"line":49,"column":50},"end":{"line":49,"column":73}}]},"7":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":6},"end":{"line":52,"column":6}},{"start":{"line":52,"column":6},"end":{"line":52,"column":6}}]},"8":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":6},"end":{"line":53,"column":6}},{"start":{"line":53,"column":6},"end":{"line":53,"column":6}}]},"9":{"line":74,"type":"cond-expr","locations":[{"start":{"line":74,"column":33},"end":{"line":74,"column":70}},{"start":{"line":74,"column":73},"end":{"line":74,"column":77}}]},"10":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":4},"end":{"line":107,"column":4}},{"start":{"line":107,"column":4},"end":{"line":107,"column":4}}]},"11":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":6},"end":{"line":113,"column":6}},{"start":{"line":113,"column":6},"end":{"line":113,"column":6}}]},"12":{"line":113,"type":"binary-expr","locations":[{"start":{"line":113,"column":10},"end":{"line":113,"column":36}},{"start":{"line":113,"column":40},"end":{"line":113,"column":53}}]},"13":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":6},"end":{"line":114,"column":6}},{"start":{"line":114,"column":6},"end":{"line":114,"column":6}}]},"14":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":6},"end":{"line":115,"column":6}},{"start":{"line":115,"column":6},"end":{"line":115,"column":6}}]},"15":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":6},"end":{"line":129,"column":6}},{"start":{"line":129,"column":6},"end":{"line":129,"column":6}}]},"16":{"line":133,"type":"if","locations":[{"start":{"line":133,"column":6},"end":{"line":133,"column":6}},{"start":{"line":133,"column":6},"end":{"line":133,"column":6}}]},"17":{"line":138,"type":"if","locations":[{"start":{"line":138,"column":6},"end":{"line":138,"column":6}},{"start":{"line":138,"column":6},"end":{"line":138,"column":6}}]},"18":{"line":144,"type":"if","locations":[{"start":{"line":144,"column":10},"end":{"line":144,"column":10}},{"start":{"line":144,"column":10},"end":{"line":144,"column":10}}]},"19":{"line":185,"type":"if","locations":[{"start":{"line":185,"column":4},"end":{"line":185,"column":4}},{"start":{"line":185,"column":4},"end":{"line":185,"column":4}}]},"20":{"line":186,"type":"if","locations":[{"start":{"line":186,"column":4},"end":{"line":186,"column":4}},{"start":{"line":186,"column":4},"end":{"line":186,"column":4}}]}},"code":["const path = require('path');","const fs = require('fs');","const EventEmitter = require('events').EventEmitter;","const mergeDefault = require('../util/MergeDefault');","const Shard = require('./Shard');","const Collection = require('../util/Collection');","const fetchRecommendedShards = require('../util/FetchRecommendedShards');","","/**"," * This is a utility class that can be used to help you spawn shards of your Client. Each shard is completely separate"," * from the other. The Shard Manager takes a path to a file and spawns it under the specified amount of shards safely."," * If you do not select an amount of shards, the manager will automatically decide the best amount."," * @extends {EventEmitter}"," */","class ShardingManager extends EventEmitter {","  /**","   * @param {string} file Path to your shard script file","   * @param {Object} [options] Options for the sharding manager","   * @param {number|string} [options.totalShards='auto'] Number of shards to spawn, or \"auto\"","   * @param {boolean} [options.respawn=true] Whether shards should automatically respawn upon exiting","   * @param {string[]} [options.shardArgs=[]] Arguments to pass to the shard script when spawning","   * @param {string} [options.token] Token to use for automatic shard count and passing to shards","   */","  constructor(file, options = {}) {","    super();","    options = mergeDefault({","      totalShards: 'auto',","      respawn: true,","      shardArgs: [],","      token: null,","    }, options);","","    /**","     * Path to the shard script file","     * @type {string}","     */","    this.file = file;","    if (!file) throw new Error('File must be specified.');","    if (!path.isAbsolute(file)) this.file = path.resolve(process.cwd(), file);","    const stats = fs.statSync(this.file);","    if (!stats.isFile()) throw new Error('File path does not point to a file.');","","    /**","     * Amount of shards that this manager is going to spawn","     * @type {number|string}","     */","    this.totalShards = options.totalShards;","    if (this.totalShards !== 'auto') {","      if (typeof this.totalShards !== 'number' || isNaN(this.totalShards)) {","        throw new TypeError('Amount of shards must be a number.');","      }","      if (this.totalShards < 1) throw new RangeError('Amount of shards must be at least 1.');","      if (this.totalShards !== Math.floor(this.totalShards)) {","        throw new RangeError('Amount of shards must be an integer.');","      }","    }","","    /**","     * Whether shards should automatically respawn upon exiting","     * @type {boolean}","     */","    this.respawn = options.respawn;","","    /**","     * An array of arguments to pass to shards.","     * @type {string[]}","     */","    this.shardArgs = options.shardArgs;","","    /**","     * Token to use for obtaining the automatic shard count, and passing to shards","     * @type {?string}","     */","    this.token = options.token ? options.token.replace(/^Bot\\s*/i, '') : null;","","    /**","     * A collection of shards that this manager has spawned","     * @type {Collection<number, Shard>}","     */","    this.shards = new Collection();","  }","","  /**","   * Spawns a single shard.","   * @param {number} id The ID of the shard to spawn. **This is usually not necessary.**","   * @returns {Promise<Shard>}","   */","  createShard(id = this.shards.size) {","    const shard = new Shard(this, id, this.shardArgs);","    this.shards.set(id, shard);","    /**","     * Emitted upon launching a shard","     * @event ShardingManager#launch","     * @param {Shard} shard Shard that was launched","     */","    this.emit('launch', shard);","    return Promise.resolve(shard);","  }","","  /**","   * Spawns multiple shards.","   * @param {number} [amount=this.totalShards] Number of shards to spawn","   * @param {number} [delay=5500] How long to wait in between spawning each shard (in milliseconds)","   * @returns {Promise<Collection<number, Shard>>}","   */","  spawn(amount = this.totalShards, delay = 5500) {","    if (amount === 'auto') {","      return fetchRecommendedShards(this.token).then(count => {","        this.totalShards = count;","        return this._spawn(count, delay);","      });","    } else {","      if (typeof amount !== 'number' || isNaN(amount)) throw new TypeError('Amount of shards must be a number.');","      if (amount < 1) throw new RangeError('Amount of shards must be at least 1.');","      if (amount !== Math.floor(amount)) throw new TypeError('Amount of shards must be an integer.');","      return this._spawn(amount, delay);","    }","  }","","  /**","   * Actually spawns shards, unlike that poser above >:(","   * @param {number} amount Number of shards to spawn","   * @param {number} delay How long to wait in between spawning each shard (in milliseconds)","   * @returns {Promise<Collection<number, Shard>>}","   * @private","   */","  _spawn(amount, delay) {","    return new Promise(resolve => {","      if (this.shards.size >= amount) throw new Error(`Already spawned ${this.shards.size} shards.`);","      this.totalShards = amount;","","      this.createShard();","      if (this.shards.size >= this.totalShards) {","        resolve(this.shards);","        return;","      }","","      if (delay <= 0) {","        while (this.shards.size < this.totalShards) this.createShard();","        resolve(this.shards);","      } else {","        const interval = setInterval(() => {","          this.createShard();","          if (this.shards.size >= this.totalShards) {","            clearInterval(interval);","            resolve(this.shards);","          }","        }, delay);","      }","    });","  }","","  /**","   * Send a message to all shards.","   * @param {*} message Message to be sent to the shards","   * @returns {Promise<Shard[]>}","   */","  broadcast(message) {","    const promises = [];","    for (const shard of this.shards.values()) promises.push(shard.send(message));","    return Promise.all(promises);","  }","","  /**","   * Evaluates a script on all shards, in the context of the Clients.","   * @param {string} script JavaScript to run on each shard","   * @returns {Promise<Array>} Results of the script execution","   */","  broadcastEval(script) {","    const promises = [];","    for (const shard of this.shards.values()) promises.push(shard.eval(script));","    return Promise.all(promises);","  }","","  /**","   * Fetches a Client property value of each shard.","   * @param {string} prop Name of the Client property to get, using periods for nesting","   * @returns {Promise<Array>}","   * @example","   * manager.fetchClientValues('guilds.size').then(results => {","   *   console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`);","   * }).catch(console.error);","   */","  fetchClientValues(prop) {","    if (this.shards.size === 0) return Promise.reject(new Error('No shards have been spawned.'));","    if (this.shards.size !== this.totalShards) return Promise.reject(new Error('Still spawning shards.'));","    const promises = [];","    for (const shard of this.shards.values()) promises.push(shard.fetchClientValue(prop));","    return Promise.all(promises);","  }","}","","module.exports = ShardingManager;",""],"l":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"25":0,"26":0,"37":0,"38":0,"39":0,"40":0,"41":0,"47":0,"48":0,"49":0,"50":0,"52":0,"53":0,"54":0,"62":0,"68":0,"74":0,"80":0,"89":0,"90":0,"96":0,"97":0,"107":0,"108":0,"109":0,"110":0,"113":0,"114":0,"115":0,"116":0,"128":0,"129":0,"130":0,"132":0,"133":0,"134":0,"135":0,"138":0,"139":0,"140":0,"142":0,"143":0,"144":0,"145":0,"146":0,"159":0,"160":0,"161":0,"170":0,"171":0,"172":0,"185":0,"186":0,"187":0,"188":0,"189":0,"193":1}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/sharding/Shard.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/sharding/Shard.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":13},"end":{"line":15,"column":38}}},"2":{"name":"(anonymous_2)","line":59,"loc":{"start":{"line":59,"column":6},"end":{"line":59,"column":16}}},"3":{"name":"(anonymous_3)","line":77,"loc":{"start":{"line":77,"column":18},"end":{"line":77,"column":25}}},"4":{"name":"(anonymous_4)","line":105,"loc":{"start":{"line":105,"column":6},"end":{"line":105,"column":15}}},"5":{"name":"(anonymous_5)","line":133,"loc":{"start":{"line":133,"column":16},"end":{"line":133,"column":26}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":46}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":29}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":47}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":57}},"5":{"start":{"line":20,"column":4},"end":{"line":20,"column":27}},"6":{"start":{"line":26,"column":4},"end":{"line":26,"column":17}},"7":{"start":{"line":32,"column":4},"end":{"line":36,"column":7}},"8":{"start":{"line":42,"column":4},"end":{"line":44,"column":7}},"9":{"start":{"line":45,"column":4},"end":{"line":45,"column":63}},"10":{"start":{"line":46,"column":4},"end":{"line":48,"column":7}},"11":{"start":{"line":47,"column":6},"end":{"line":47,"column":66}},"12":{"start":{"line":47,"column":32},"end":{"line":47,"column":66}},"13":{"start":{"line":50,"column":4},"end":{"line":50,"column":28}},"14":{"start":{"line":51,"column":4},"end":{"line":51,"column":30}},"15":{"start":{"line":60,"column":4},"end":{"line":65,"column":7}},"16":{"start":{"line":61,"column":6},"end":{"line":63,"column":9}},"17":{"start":{"line":62,"column":8},"end":{"line":62,"column":49}},"18":{"start":{"line":62,"column":17},"end":{"line":62,"column":29}},"19":{"start":{"line":62,"column":35},"end":{"line":62,"column":49}},"20":{"start":{"line":64,"column":6},"end":{"line":64,"column":80}},"21":{"start":{"line":64,"column":17},"end":{"line":64,"column":80}},"22":{"start":{"line":78,"column":4},"end":{"line":78,"column":64}},"23":{"start":{"line":78,"column":33},"end":{"line":78,"column":64}},"24":{"start":{"line":80,"column":4},"end":{"line":94,"column":7}},"25":{"start":{"line":81,"column":6},"end":{"line":86,"column":8}},"26":{"start":{"line":82,"column":8},"end":{"line":82,"column":60}},"27":{"start":{"line":82,"column":53},"end":{"line":82,"column":60}},"28":{"start":{"line":83,"column":8},"end":{"line":83,"column":57}},"29":{"start":{"line":84,"column":8},"end":{"line":84,"column":35}},"30":{"start":{"line":85,"column":8},"end":{"line":85,"column":33}},"31":{"start":{"line":87,"column":6},"end":{"line":87,"column":43}},"32":{"start":{"line":89,"column":6},"end":{"line":93,"column":9}},"33":{"start":{"line":90,"column":8},"end":{"line":90,"column":57}},"34":{"start":{"line":91,"column":8},"end":{"line":91,"column":35}},"35":{"start":{"line":92,"column":8},"end":{"line":92,"column":20}},"36":{"start":{"line":96,"column":4},"end":{"line":96,"column":37}},"37":{"start":{"line":97,"column":4},"end":{"line":97,"column":19}},"38":{"start":{"line":106,"column":4},"end":{"line":106,"column":64}},"39":{"start":{"line":106,"column":33},"end":{"line":106,"column":64}},"40":{"start":{"line":108,"column":4},"end":{"line":122,"column":7}},"41":{"start":{"line":109,"column":6},"end":{"line":114,"column":8}},"42":{"start":{"line":110,"column":8},"end":{"line":110,"column":57}},"43":{"start":{"line":110,"column":50},"end":{"line":110,"column":57}},"44":{"start":{"line":111,"column":8},"end":{"line":111,"column":57}},"45":{"start":{"line":112,"column":8},"end":{"line":112,"column":35}},"46":{"start":{"line":113,"column":8},"end":{"line":113,"column":94}},"47":{"start":{"line":113,"column":29},"end":{"line":113,"column":54}},"48":{"start":{"line":113,"column":60},"end":{"line":113,"column":94}},"49":{"start":{"line":115,"column":6},"end":{"line":115,"column":43}},"50":{"start":{"line":117,"column":6},"end":{"line":121,"column":9}},"51":{"start":{"line":118,"column":8},"end":{"line":118,"column":57}},"52":{"start":{"line":119,"column":8},"end":{"line":119,"column":35}},"53":{"start":{"line":120,"column":8},"end":{"line":120,"column":20}},"54":{"start":{"line":124,"column":4},"end":{"line":124,"column":37}},"55":{"start":{"line":125,"column":4},"end":{"line":125,"column":19}},"56":{"start":{"line":134,"column":4},"end":{"line":152,"column":5}},"57":{"start":{"line":136,"column":6},"end":{"line":142,"column":7}},"58":{"start":{"line":137,"column":8},"end":{"line":140,"column":10}},"59":{"start":{"line":138,"column":21},"end":{"line":138,"column":86}},"60":{"start":{"line":139,"column":17},"end":{"line":139,"column":93}},"61":{"start":{"line":141,"column":8},"end":{"line":141,"column":15}},"62":{"start":{"line":145,"column":6},"end":{"line":151,"column":7}},"63":{"start":{"line":146,"column":8},"end":{"line":149,"column":10}},"64":{"start":{"line":147,"column":21},"end":{"line":147,"column":76}},"65":{"start":{"line":148,"column":17},"end":{"line":148,"column":83}},"66":{"start":{"line":150,"column":8},"end":{"line":150,"column":15}},"67":{"start":{"line":160,"column":4},"end":{"line":160,"column":48}},"68":{"start":{"line":164,"column":0},"end":{"line":164,"column":23}}},"branchMap":{"1":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":6},"end":{"line":47,"column":6}},{"start":{"line":47,"column":6},"end":{"line":47,"column":6}}]},"2":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":8},"end":{"line":62,"column":8}},{"start":{"line":62,"column":8},"end":{"line":62,"column":8}}]},"3":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":6},"end":{"line":64,"column":6}},{"start":{"line":64,"column":6},"end":{"line":64,"column":6}}]},"4":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":4},"end":{"line":78,"column":4}},{"start":{"line":78,"column":4},"end":{"line":78,"column":4}}]},"5":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":8},"end":{"line":82,"column":8}},{"start":{"line":82,"column":8},"end":{"line":82,"column":8}}]},"6":{"line":82,"type":"binary-expr","locations":[{"start":{"line":82,"column":12},"end":{"line":82,"column":20}},{"start":{"line":82,"column":24},"end":{"line":82,"column":51}}]},"7":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":4},"end":{"line":106,"column":4}},{"start":{"line":106,"column":4},"end":{"line":106,"column":4}}]},"8":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":8},"end":{"line":110,"column":8}},{"start":{"line":110,"column":8},"end":{"line":110,"column":8}}]},"9":{"line":110,"type":"binary-expr","locations":[{"start":{"line":110,"column":12},"end":{"line":110,"column":20}},{"start":{"line":110,"column":24},"end":{"line":110,"column":48}}]},"10":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":8},"end":{"line":113,"column":8}},{"start":{"line":113,"column":8},"end":{"line":113,"column":8}}]},"11":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":4},"end":{"line":134,"column":4}},{"start":{"line":134,"column":4},"end":{"line":134,"column":4}}]},"12":{"line":136,"type":"if","locations":[{"start":{"line":136,"column":6},"end":{"line":136,"column":6}},{"start":{"line":136,"column":6},"end":{"line":136,"column":6}}]},"13":{"line":145,"type":"if","locations":[{"start":{"line":145,"column":6},"end":{"line":145,"column":6}},{"start":{"line":145,"column":6},"end":{"line":145,"column":6}}]}},"code":["const childProcess = require('child_process');","const path = require('path');","const makeError = require('../util/MakeError');","const makePlainError = require('../util/MakePlainError');","","/**"," * Represents a Shard spawned by the ShardingManager."," */","class Shard {","  /**","   * @param {ShardingManager} manager The sharding manager","   * @param {number} id The ID of this shard","   * @param {Array} [args=[]] Command line arguments to pass to the script","   */","  constructor(manager, id, args = []) {","    /**","     * Manager that created the shard","     * @type {ShardingManager}","     */","    this.manager = manager;","","    /**","     * ID of the shard","     * @type {number}","     */","    this.id = id;","","    /**","     * The environment variables for the shard","     * @type {Object}","     */","    this.env = Object.assign({}, process.env, {","      SHARD_ID: this.id,","      SHARD_COUNT: this.manager.totalShards,","      CLIENT_TOKEN: this.manager.token,","    });","","    /**","     * Process of the shard","     * @type {ChildProcess}","     */","    this.process = childProcess.fork(path.resolve(this.manager.file), args, {","      env: this.env,","    });","    this.process.on('message', this._handleMessage.bind(this));","    this.process.once('exit', () => {","      if (this.manager.respawn) this.manager.createShard(this.id);","    });","","    this._evals = new Map();","    this._fetches = new Map();","  }","","  /**","   * Sends a message to the shard's process.","   * @param {*} message Message to send to the shard","   * @returns {Promise<Shard>}","   */","  send(message) {","    return new Promise((resolve, reject) => {","      const sent = this.process.send(message, err => {","        if (err) reject(err); else resolve(this);","      });","      if (!sent) throw new Error('Failed to send message to shard\\'s process.');","    });","  }","","  /**","   * Fetches a Client property value of the shard.","   * @param {string} prop Name of the Client property to get, using periods for nesting","   * @returns {Promise<*>}","   * @example","   * shard.fetchClientValue('guilds.size').then(count => {","   *   console.log(`${count} guilds in shard ${shard.id}`);","   * }).catch(console.error);","   */","  fetchClientValue(prop) {","    if (this._fetches.has(prop)) return this._fetches.get(prop);","","    const promise = new Promise((resolve, reject) => {","      const listener = message => {","        if (!message || message._fetchProp !== prop) return;","        this.process.removeListener('message', listener);","        this._fetches.delete(prop);","        resolve(message._result);","      };","      this.process.on('message', listener);","","      this.send({ _fetchProp: prop }).catch(err => {","        this.process.removeListener('message', listener);","        this._fetches.delete(prop);","        reject(err);","      });","    });","","    this._fetches.set(prop, promise);","    return promise;","  }","","  /**","   * Evaluates a script on the shard, in the context of the Client.","   * @param {string} script JavaScript to run on the shard","   * @returns {Promise<*>} Result of the script execution","   */","  eval(script) {","    if (this._evals.has(script)) return this._evals.get(script);","","    const promise = new Promise((resolve, reject) => {","      const listener = message => {","        if (!message || message._eval !== script) return;","        this.process.removeListener('message', listener);","        this._evals.delete(script);","        if (!message._error) resolve(message._result); else reject(makeError(message._error));","      };","      this.process.on('message', listener);","","      this.send({ _eval: script }).catch(err => {","        this.process.removeListener('message', listener);","        this._evals.delete(script);","        reject(err);","      });","    });","","    this._evals.set(script, promise);","    return promise;","  }","","  /**","   * Handles an IPC message","   * @param {*} message Message received","   * @private","   */","  _handleMessage(message) {","    if (message) {","      // Shard is requesting a property fetch","      if (message._sFetchProp) {","        this.manager.fetchClientValues(message._sFetchProp).then(","          results => this.send({ _sFetchProp: message._sFetchProp, _result: results }),","          err => this.send({ _sFetchProp: message._sFetchProp, _error: makePlainError(err) })","        );","        return;","      }","","      // Shard is requesting an eval broadcast","      if (message._sEval) {","        this.manager.broadcastEval(message._sEval).then(","          results => this.send({ _sEval: message._sEval, _result: results }),","          err => this.send({ _sEval: message._sEval, _error: makePlainError(err) })","        );","        return;","      }","    }","","    /**","     * Emitted upon recieving a message from a shard","     * @event ShardingManager#message","     * @param {Shard} shard Shard that sent the message","     * @param {*} message Message that was received","     */","    this.manager.emit('message', this, message);","  }","}","","module.exports = Shard;",""],"l":{"1":1,"2":1,"3":1,"4":1,"20":0,"26":0,"32":0,"42":0,"45":0,"46":0,"47":0,"50":0,"51":0,"60":0,"61":0,"62":0,"64":0,"78":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"87":0,"89":0,"90":0,"91":0,"92":0,"96":0,"97":0,"106":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"115":0,"117":0,"118":0,"119":0,"120":0,"124":0,"125":0,"134":0,"136":0,"137":0,"138":0,"139":0,"141":0,"145":0,"146":0,"147":0,"148":0,"150":0,"160":0,"164":1}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/util/FetchRecommendedShards.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/util/FetchRecommendedShards.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"fetchRecommendedShards","line":9,"loc":{"start":{"line":9,"column":17},"end":{"line":9,"column":56}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":41}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":63}},"3":{"start":{"line":9,"column":0},"end":{"line":19,"column":2}},"4":{"start":{"line":10,"column":2},"end":{"line":18,"column":5}},"5":{"start":{"line":11,"column":4},"end":{"line":11,"column":61}},"6":{"start":{"line":11,"column":16},"end":{"line":11,"column":61}},"7":{"start":{"line":12,"column":4},"end":{"line":17,"column":9}},"8":{"start":{"line":15,"column":8},"end":{"line":15,"column":29}},"9":{"start":{"line":15,"column":17},"end":{"line":15,"column":29}},"10":{"start":{"line":16,"column":8},"end":{"line":16,"column":33}}},"branchMap":{"1":{"line":11,"type":"if","locations":[{"start":{"line":11,"column":4},"end":{"line":11,"column":4}},{"start":{"line":11,"column":4},"end":{"line":11,"column":4}}]},"2":{"line":15,"type":"if","locations":[{"start":{"line":15,"column":8},"end":{"line":15,"column":8}},{"start":{"line":15,"column":8},"end":{"line":15,"column":8}}]}},"code":["const superagent = require('superagent');","const botGateway = require('./Constants').Endpoints.botGateway;","","/**"," * Gets the recommended shard count from Discord"," * @param {number} token Discord auth token"," * @returns {Promise<number>} the recommended number of shards"," */","module.exports = function fetchRecommendedShards(token) {","  return new Promise((resolve, reject) => {","    if (!token) throw new Error('A token must be provided.');","    superagent.get(botGateway)","      .set('Authorization', `Bot ${token.replace(/^Bot\\s*/i, '')}`)","      .end((err, res) => {","        if (err) reject(err);","        resolve(res.body.shards);","      });","  });","};",""],"l":{"1":1,"2":1,"9":1,"10":0,"11":0,"12":0,"15":0,"16":0}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/Channel.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/Channel.js","s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":5,"loc":{"start":{"line":5,"column":13},"end":{"line":5,"column":28}}},"2":{"name":"(anonymous_2)","line":27,"loc":{"start":{"line":27,"column":7},"end":{"line":27,"column":14}}},"3":{"name":"(anonymous_3)","line":40,"loc":{"start":{"line":40,"column":22},"end":{"line":40,"column":25}}},"4":{"name":"(anonymous_4)","line":49,"loc":{"start":{"line":49,"column":15},"end":{"line":49,"column":18}}},"5":{"name":"(anonymous_5)","line":62,"loc":{"start":{"line":62,"column":8},"end":{"line":62,"column":11}}}},"statementMap":{"1":{"start":{"line":12,"column":4},"end":{"line":12,"column":61}},"2":{"start":{"line":22,"column":4},"end":{"line":22,"column":21}},"3":{"start":{"line":24,"column":4},"end":{"line":24,"column":31}},"4":{"start":{"line":24,"column":14},"end":{"line":24,"column":31}},"5":{"start":{"line":32,"column":4},"end":{"line":32,"column":22}},"6":{"start":{"line":41,"column":4},"end":{"line":41,"column":47}},"7":{"start":{"line":50,"column":4},"end":{"line":50,"column":43}},"8":{"start":{"line":63,"column":4},"end":{"line":63,"column":56}},"9":{"start":{"line":67,"column":0},"end":{"line":67,"column":25}}},"branchMap":{"1":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":4},"end":{"line":24,"column":4}},{"start":{"line":24,"column":4},"end":{"line":24,"column":4}}]}},"code":["/**"," * Represents any channel on Discord"," */","class Channel {","  constructor(client, data) {","    /**","     * The client that instantiated the Channel","     * @name Channel#client","     * @type {Client}","     * @readonly","     */","    Object.defineProperty(this, 'client', { value: client });","","    /**","     * The type of the channel, either:","     * * `dm` - a DM channel","     * * `group` - a Group DM channel","     * * `text` - a guild text channel","     * * `voice` - a guild voice channel","     * @type {string}","     */","    this.type = null;","","    if (data) this.setup(data);","  }","","  setup(data) {","    /**","     * The unique ID of the channel","     * @type {string}","     */","    this.id = data.id;","  }","","  /**","   * The timestamp the channel was created at","   * @type {number}","   * @readonly","   */","  get createdTimestamp() {","    return (this.id / 4194304) + 1420070400000;","  }","","  /**","   * The time the channel was created","   * @type {Date}","   * @readonly","   */","  get createdAt() {","    return new Date(this.createdTimestamp);","  }","","  /**","   * Deletes the channel","   * @returns {Promise<Channel>}","   * @example","   * // delete the channel","   * channel.delete()","   *  .then() // success","   *  .catch(console.error); // log error","   */","  delete() {","    return this.client.rest.methods.deleteChannel(this);","  }","}","","module.exports = Channel;",""],"l":{"12":0,"22":0,"24":0,"32":0,"41":0,"50":0,"63":0,"67":1}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/ClientOAuth2Application.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/ClientOAuth2Application.js","s":{"1":2,"2":0,"3":0,"4":0,"5":0,"6":0},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":9,"loc":{"start":{"line":9,"column":7},"end":{"line":9,"column":14}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":31}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":57}},"3":{"start":{"line":10,"column":4},"end":{"line":10,"column":22}},"4":{"start":{"line":16,"column":4},"end":{"line":16,"column":28}},"5":{"start":{"line":22,"column":4},"end":{"line":22,"column":51}},"6":{"start":{"line":26,"column":0},"end":{"line":26,"column":41}}},"branchMap":{},"code":["const User = require('./User');","const OAuth2Application = require('./OAuth2Application');","","/**"," * Represents the client's OAuth2 Application"," * @extends {OAuth2Application}"," */","class ClientOAuth2Application extends OAuth2Application {","  setup(data) {","    super.setup(data);","","    /**","     * The app's flags","     * @type {number}","     */","    this.flags = data.flags;","","    /**","     * The app's owner","     * @type {User}","     */","    this.owner = new User(this.client, data.owner);","  }","}","","module.exports = ClientOAuth2Application;",""],"l":{"1":2,"2":0,"10":0,"16":0,"22":0,"26":0}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/ClientUser.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/ClientUser.js","s":{"1":2,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},"fnMap":{"1":{"name":"(anonymous_1)","line":9,"loc":{"start":{"line":9,"column":7},"end":{"line":9,"column":14}}},"2":{"name":"(anonymous_2)","line":48,"loc":{"start":{"line":48,"column":6},"end":{"line":48,"column":13}}},"3":{"name":"(anonymous_3)","line":65,"loc":{"start":{"line":65,"column":13},"end":{"line":65,"column":34}}},"4":{"name":"(anonymous_4)","line":81,"loc":{"start":{"line":81,"column":10},"end":{"line":81,"column":28}}},"5":{"name":"(anonymous_5)","line":97,"loc":{"start":{"line":97,"column":13},"end":{"line":97,"column":40}}},"6":{"name":"(anonymous_6)","line":111,"loc":{"start":{"line":111,"column":11},"end":{"line":111,"column":20}}},"7":{"name":"(anonymous_7)","line":136,"loc":{"start":{"line":136,"column":13},"end":{"line":136,"column":20}}},"8":{"name":"(anonymous_8)","line":193,"loc":{"start":{"line":193,"column":11},"end":{"line":193,"column":20}}},"9":{"name":"(anonymous_9)","line":203,"loc":{"start":{"line":203,"column":9},"end":{"line":203,"column":30}}},"10":{"name":"(anonymous_10)","line":215,"loc":{"start":{"line":215,"column":8},"end":{"line":215,"column":14}}},"11":{"name":"(anonymous_11)","line":228,"loc":{"start":{"line":228,"column":15},"end":{"line":228,"column":83}}},"12":{"name":"(anonymous_12)","line":238,"loc":{"start":{"line":238,"column":11},"end":{"line":238,"column":18}}},"13":{"name":"(anonymous_13)","line":249,"loc":{"start":{"line":249,"column":14},"end":{"line":249,"column":21}}},"14":{"name":"(anonymous_14)","line":262,"loc":{"start":{"line":262,"column":13},"end":{"line":262,"column":41}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":31}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":49}},"3":{"start":{"line":10,"column":4},"end":{"line":10,"column":22}},"4":{"start":{"line":16,"column":4},"end":{"line":16,"column":34}},"5":{"start":{"line":22,"column":4},"end":{"line":22,"column":28}},"6":{"start":{"line":23,"column":4},"end":{"line":23,"column":28}},"7":{"start":{"line":24,"column":4},"end":{"line":24,"column":29}},"8":{"start":{"line":31,"column":4},"end":{"line":31,"column":36}},"9":{"start":{"line":38,"column":4},"end":{"line":38,"column":36}},"10":{"start":{"line":45,"column":4},"end":{"line":45,"column":34}},"11":{"start":{"line":49,"column":4},"end":{"line":49,"column":60}},"12":{"start":{"line":66,"column":4},"end":{"line":66,"column":78}},"13":{"start":{"line":82,"column":4},"end":{"line":82,"column":75}},"14":{"start":{"line":98,"column":4},"end":{"line":98,"column":94}},"15":{"start":{"line":112,"column":4},"end":{"line":118,"column":5}},"16":{"start":{"line":113,"column":6},"end":{"line":113,"column":68}},"17":{"start":{"line":115,"column":6},"end":{"line":117,"column":8}},"18":{"start":{"line":116,"column":8},"end":{"line":116,"column":68}},"19":{"start":{"line":138,"column":4},"end":{"line":176,"column":7}},"20":{"start":{"line":139,"column":6},"end":{"line":139,"column":69}},"21":{"start":{"line":140,"column":6},"end":{"line":140,"column":41}},"22":{"start":{"line":141,"column":6},"end":{"line":141,"column":60}},"23":{"start":{"line":143,"column":6},"end":{"line":149,"column":7}},"24":{"start":{"line":144,"column":8},"end":{"line":148,"column":10}},"25":{"start":{"line":151,"column":6},"end":{"line":154,"column":7}},"26":{"start":{"line":152,"column":8},"end":{"line":152,"column":92}},"27":{"start":{"line":152,"column":45},"end":{"line":152,"column":92}},"28":{"start":{"line":153,"column":8},"end":{"line":153,"column":29}},"29":{"start":{"line":156,"column":6},"end":{"line":159,"column":7}},"30":{"start":{"line":157,"column":8},"end":{"line":157,"column":25}},"31":{"start":{"line":158,"column":8},"end":{"line":158,"column":36}},"32":{"start":{"line":158,"column":22},"end":{"line":158,"column":36}},"33":{"start":{"line":161,"column":6},"end":{"line":161,"column":58}},"34":{"start":{"line":161,"column":43},"end":{"line":161,"column":58}},"35":{"start":{"line":162,"column":6},"end":{"line":162,"column":25}},"36":{"start":{"line":164,"column":6},"end":{"line":164,"column":49}},"37":{"start":{"line":165,"column":6},"end":{"line":165,"column":35}},"38":{"start":{"line":166,"column":6},"end":{"line":166,"column":64}},"39":{"start":{"line":168,"column":6},"end":{"line":171,"column":9}},"40":{"start":{"line":173,"column":6},"end":{"line":173,"column":60}},"41":{"start":{"line":175,"column":6},"end":{"line":175,"column":20}},"42":{"start":{"line":194,"column":4},"end":{"line":194,"column":40}},"43":{"start":{"line":204,"column":4},"end":{"line":207,"column":9}},"44":{"start":{"line":216,"column":4},"end":{"line":216,"column":37}},"45":{"start":{"line":229,"column":4},"end":{"line":229,"column":59}},"46":{"start":{"line":239,"column":4},"end":{"line":239,"column":50}},"47":{"start":{"line":240,"column":4},"end":{"line":240,"column":52}},"48":{"start":{"line":250,"column":4},"end":{"line":250,"column":50}},"49":{"start":{"line":251,"column":4},"end":{"line":251,"column":55}},"50":{"start":{"line":263,"column":4},"end":{"line":263,"column":83}},"51":{"start":{"line":263,"column":15},"end":{"line":263,"column":83}},"52":{"start":{"line":264,"column":4},"end":{"line":270,"column":5}},"53":{"start":{"line":265,"column":6},"end":{"line":265,"column":74}},"54":{"start":{"line":267,"column":6},"end":{"line":269,"column":8}},"55":{"start":{"line":268,"column":8},"end":{"line":268,"column":74}},"56":{"start":{"line":274,"column":0},"end":{"line":274,"column":28}}},"branchMap":{"1":{"line":112,"type":"if","locations":[{"start":{"line":112,"column":4},"end":{"line":112,"column":4}},{"start":{"line":112,"column":4},"end":{"line":112,"column":4}}]},"2":{"line":139,"type":"binary-expr","locations":[{"start":{"line":139,"column":19},"end":{"line":139,"column":44}},{"start":{"line":139,"column":48},"end":{"line":139,"column":68}}]},"3":{"line":141,"type":"binary-expr","locations":[{"start":{"line":141,"column":16},"end":{"line":141,"column":38}},{"start":{"line":141,"column":42},"end":{"line":141,"column":59}}]},"4":{"line":143,"type":"if","locations":[{"start":{"line":143,"column":6},"end":{"line":143,"column":6}},{"start":{"line":143,"column":6},"end":{"line":143,"column":6}}]},"5":{"line":143,"type":"binary-expr","locations":[{"start":{"line":143,"column":10},"end":{"line":143,"column":15}},{"start":{"line":143,"column":19},"end":{"line":143,"column":37}}]},"6":{"line":151,"type":"if","locations":[{"start":{"line":151,"column":6},"end":{"line":151,"column":6}},{"start":{"line":151,"column":6},"end":{"line":151,"column":6}}]},"7":{"line":152,"type":"if","locations":[{"start":{"line":152,"column":8},"end":{"line":152,"column":8}},{"start":{"line":152,"column":8},"end":{"line":152,"column":8}}]},"8":{"line":156,"type":"if","locations":[{"start":{"line":156,"column":6},"end":{"line":156,"column":6}},{"start":{"line":156,"column":6},"end":{"line":156,"column":6}}]},"9":{"line":158,"type":"if","locations":[{"start":{"line":158,"column":8},"end":{"line":158,"column":8}},{"start":{"line":158,"column":8},"end":{"line":158,"column":8}}]},"10":{"line":161,"type":"if","locations":[{"start":{"line":161,"column":6},"end":{"line":161,"column":6}},{"start":{"line":161,"column":6},"end":{"line":161,"column":6}}]},"11":{"line":166,"type":"binary-expr","locations":[{"start":{"line":166,"column":32},"end":{"line":166,"column":55}},{"start":{"line":166,"column":59},"end":{"line":166,"column":63}}]},"12":{"line":263,"type":"if","locations":[{"start":{"line":263,"column":4},"end":{"line":263,"column":4}},{"start":{"line":263,"column":4},"end":{"line":263,"column":4}}]},"13":{"line":264,"type":"if","locations":[{"start":{"line":264,"column":4},"end":{"line":264,"column":4}},{"start":{"line":264,"column":4},"end":{"line":264,"column":4}}]}},"code":["const User = require('./User');","const Collection = require('../util/Collection');","","/**"," * Represents the logged in client's Discord user"," * @extends {User}"," */","class ClientUser extends User {","  setup(data) {","    super.setup(data);","","    /**","     * Whether or not this account has been verified","     * @type {boolean}","     */","    this.verified = data.verified;","","    /**","     * The email of this account","     * @type {string}","     */","    this.email = data.email;","    this.localPresence = {};","    this._typing = new Map();","","    /**","     * A Collection of friends for the logged in user.","     * <warn>This is only filled when using a user account.</warn>","     * @type {Collection<string, User>}","     */","    this.friends = new Collection();","","    /**","     * A Collection of blocked users for the logged in user.","     * <warn>This is only filled when using a user account.</warn>","     * @type {Collection<string, User>}","     */","    this.blocked = new Collection();","","    /**","     * A Collection of notes for the logged in user.","     * <warn>This is only filled when using a user account.</warn>","     * @type {Collection<string, string>}","     */","    this.notes = new Collection();","  }","","  edit(data) {","    return this.client.rest.methods.updateCurrentUser(data);","  }","","  /**","   * Set the username of the logged in Client.","   * <info>Changing usernames in Discord is heavily rate limited, with only 2 requests","   * every hour. Use this sparingly!</info>","   * @param {string} username The new username","   * @param {string} [password] Current password (only for user accounts)","   * @returns {Promise<ClientUser>}","   * @example","   * // set username","   * client.user.setUsername('discordjs')","   *  .then(user => console.log(`My new username is ${user.username}`))","   *  .catch(console.error);","   */","  setUsername(username, password) {","    return this.client.rest.methods.updateCurrentUser({ username }, password);","  }","","  /**","   * Changes the email for the client user's account.","   * <warn>This is only available when using a user account.</warn>","   * @param {string} email New email to change to","   * @param {string} password Current password","   * @returns {Promise<ClientUser>}","   * @example","   * // set email","   * client.user.setEmail('bob@gmail.com', 'some amazing password 123')","   *  .then(user => console.log(`My new email is ${user.email}`))","   *  .catch(console.error);","   */","  setEmail(email, password) {","    return this.client.rest.methods.updateCurrentUser({ email }, password);","  }","","  /**","   * Changes the password for the client user's account.","   * <warn>This is only available when using a user account.</warn>","   * @param {string} newPassword New password to change to","   * @param {string} oldPassword Current password","   * @returns {Promise<ClientUser>}","   * @example","   * // set password","   * client.user.setPassword('some new amazing password 456', 'some amazing password 123')","   *  .then(user => console.log('New password set!'))","   *  .catch(console.error);","   */","  setPassword(newPassword, oldPassword) {","    return this.client.rest.methods.updateCurrentUser({ password: newPassword }, oldPassword);","  }","","  /**","   * Set the avatar of the logged in Client.","   * @param {BufferResolvable|Base64Resolvable} avatar The new avatar","   * @returns {Promise<ClientUser>}","   * @example","   * // set avatar","   * client.user.setAvatar('./avatar.png')","   *  .then(user => console.log(`New avatar set!`))","   *  .catch(console.error);","   */","  setAvatar(avatar) {","    if (avatar.startsWith('data:')) {","      return this.client.rest.methods.updateCurrentUser({ avatar });","    } else {","      return this.client.resolver.resolveBuffer(avatar).then(data =>","        this.client.rest.methods.updateCurrentUser({ avatar: data })","      );","    }","  }","","  /**","   * Data resembling a raw Discord presence","   * @typedef {Object} PresenceData","   * @property {PresenceStatus} [status] Status of the user","   * @property {boolean} [afk] Whether the user is AFK","   * @property {Object} [game] Game the user is playing","   * @property {string} [game.name] Name of the game","   * @property {string} [game.url] Twitch stream URL","   */","","  /**","   * Sets the full presence of the client user.","   * @param {PresenceData} data Data for the presence","   * @returns {Promise<ClientUser>}","   */","  setPresence(data) {","    // {\"op\":3,\"d\":{\"status\":\"dnd\",\"since\":0,\"game\":null,\"afk\":false}}","    return new Promise(resolve => {","      let status = this.localPresence.status || this.presence.status;","      let game = this.localPresence.game;","      let afk = this.localPresence.afk || this.presence.afk;","","      if (!game && this.presence.game) {","        game = {","          name: this.presence.game.name,","          type: this.presence.game.type,","          url: this.presence.game.url,","        };","      }","","      if (data.status) {","        if (typeof data.status !== 'string') throw new TypeError('Status must be a string');","        status = data.status;","      }","","      if (data.game) {","        game = data.game;","        if (game.url) game.type = 1;","      }","","      if (typeof data.afk !== 'undefined') afk = data.afk;","      afk = Boolean(afk);","","      this.localPresence = { status, game, afk };","      this.localPresence.since = 0;","      this.localPresence.game = this.localPresence.game || null;","","      this.client.ws.send({","        op: 3,","        d: this.localPresence,","      });","","      this.client._setPresence(this.id, this.localPresence);","","      resolve(this);","    });","  }","","  /**","   * A user's status. Must be one of:","   * - `online`","   * - `idle`","   * - `invisible`","   * - `dnd` (do not disturb)","   * @typedef {string} PresenceStatus","   */","","  /**","   * Sets the status of the client user.","   * @param {PresenceStatus} status Status to change to","   * @returns {Promise<ClientUser>}","   */","  setStatus(status) {","    return this.setPresence({ status });","  }","","  /**","   * Sets the game the client user is playing.","   * @param {string} game Game being played","   * @param {string} [streamingURL] Twitch stream URL","   * @returns {Promise<ClientUser>}","   */","  setGame(game, streamingURL) {","    return this.setPresence({ game: {","      name: game,","      url: streamingURL,","    } });","  }","","  /**","   * Sets/removes the AFK flag for the client user.","   * @param {boolean} afk Whether or not the user is AFK","   * @returns {Promise<ClientUser>}","   */","  setAFK(afk) {","    return this.setPresence({ afk });","  }","","  /**","   * Fetches messages that mentioned the client's user","   * @param {Object} [options] Options for the fetch","   * @param {number} [options.limit=25] Maximum number of mentions to retrieve","   * @param {boolean} [options.roles=true] Whether to include role mentions","   * @param {boolean} [options.everyone=true] Whether to include everyone/here mentions","   * @param {Guild|string} [options.guild] Limit the search to a specific guild","   * @returns {Promise<Message[]>}","   */","  fetchMentions(options = { limit: 25, roles: true, everyone: true, guild: null }) {","    return this.client.rest.methods.fetchMentions(options);","  }","","  /**","   * Send a friend request","   * <warn>This is only available when using a user account.</warn>","   * @param {UserResolvable} user The user to send the friend request to.","   * @returns {Promise<User>} The user the friend request was sent to.","   */","  addFriend(user) {","    user = this.client.resolver.resolveUser(user);","    return this.client.rest.methods.addFriend(user);","  }","","  /**","   * Remove a friend","   * <warn>This is only available when using a user account.</warn>","   * @param {UserResolvable} user The user to remove from your friends","   * @returns {Promise<User>} The user that was removed","   */","  removeFriend(user) {","    user = this.client.resolver.resolveUser(user);","    return this.client.rest.methods.removeFriend(user);","  }","","  /**","   * Creates a guild","   * <warn>This is only available when using a user account.</warn>","   * @param {string} name The name of the guild","   * @param {string} region The region for the server","   * @param {BufferResolvable|Base64Resolvable} [icon=null] The icon for the guild","   * @returns {Promise<Guild>} The guild that was created","   */","  createGuild(name, region, icon = null) {","    if (!icon) return this.client.rest.methods.createGuild({ name, icon, region });","    if (icon.startsWith('data:')) {","      return this.client.rest.methods.createGuild({ name, icon, region });","    } else {","      return this.client.resolver.resolveBuffer(icon).then(data =>","        this.client.rest.methods.createGuild({ name, icon: data, region })","      );","    }","  }","}","","module.exports = ClientUser;",""],"l":{"1":2,"2":0,"10":0,"16":0,"22":0,"23":0,"24":0,"31":0,"38":0,"45":0,"49":0,"66":0,"82":0,"98":0,"112":0,"113":0,"115":0,"116":0,"138":0,"139":0,"140":0,"141":0,"143":0,"144":0,"151":0,"152":0,"153":0,"156":0,"157":0,"158":0,"161":0,"162":0,"164":0,"165":0,"166":0,"168":0,"173":0,"175":0,"194":0,"204":0,"216":0,"229":0,"239":0,"240":0,"250":0,"251":0,"263":0,"264":0,"265":0,"267":0,"268":0,"274":0}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/DMChannel.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/DMChannel.js","s":{"1":2,"2":2,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},"fnMap":{"1":{"name":"(anonymous_1)","line":11,"loc":{"start":{"line":11,"column":13},"end":{"line":11,"column":28}}},"2":{"name":"(anonymous_2)","line":18,"loc":{"start":{"line":18,"column":7},"end":{"line":18,"column":14}}},"3":{"name":"(anonymous_3)","line":35,"loc":{"start":{"line":35,"column":10},"end":{"line":35,"column":13}}},"4":{"name":"(anonymous_4)","line":40,"loc":{"start":{"line":40,"column":6},"end":{"line":40,"column":9}}},"5":{"name":"(anonymous_5)","line":41,"loc":{"start":{"line":41,"column":13},"end":{"line":41,"column":16}}},"6":{"name":"(anonymous_6)","line":42,"loc":{"start":{"line":42,"column":11},"end":{"line":42,"column":14}}},"7":{"name":"(anonymous_7)","line":43,"loc":{"start":{"line":43,"column":10},"end":{"line":43,"column":13}}},"8":{"name":"(anonymous_8)","line":44,"loc":{"start":{"line":44,"column":10},"end":{"line":44,"column":13}}},"9":{"name":"(anonymous_9)","line":45,"loc":{"start":{"line":45,"column":14},"end":{"line":45,"column":17}}},"10":{"name":"(anonymous_10)","line":46,"loc":{"start":{"line":46,"column":15},"end":{"line":46,"column":18}}},"11":{"name":"(anonymous_11)","line":47,"loc":{"start":{"line":47,"column":21},"end":{"line":47,"column":24}}},"12":{"name":"(anonymous_12)","line":48,"loc":{"start":{"line":48,"column":13},"end":{"line":48,"column":16}}},"13":{"name":"(anonymous_13)","line":49,"loc":{"start":{"line":49,"column":12},"end":{"line":49,"column":15}}},"14":{"name":"(anonymous_14)","line":50,"loc":{"start":{"line":50,"column":12},"end":{"line":50,"column":15}}},"15":{"name":"(anonymous_15)","line":51,"loc":{"start":{"line":51,"column":17},"end":{"line":51,"column":20}}},"16":{"name":"(anonymous_16)","line":52,"loc":{"start":{"line":52,"column":17},"end":{"line":52,"column":20}}},"17":{"name":"(anonymous_17)","line":53,"loc":{"start":{"line":53,"column":15},"end":{"line":53,"column":18}}},"18":{"name":"(anonymous_18)","line":54,"loc":{"start":{"line":54,"column":12},"end":{"line":54,"column":15}}},"19":{"name":"(anonymous_19)","line":55,"loc":{"start":{"line":55,"column":15},"end":{"line":55,"column":18}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":37}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":65}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":49}},"4":{"start":{"line":12,"column":4},"end":{"line":12,"column":24}},"5":{"start":{"line":13,"column":4},"end":{"line":13,"column":21}},"6":{"start":{"line":14,"column":4},"end":{"line":14,"column":37}},"7":{"start":{"line":15,"column":4},"end":{"line":15,"column":29}},"8":{"start":{"line":19,"column":4},"end":{"line":19,"column":22}},"9":{"start":{"line":25,"column":4},"end":{"line":25,"column":73}},"10":{"start":{"line":27,"column":4},"end":{"line":27,"column":46}},"11":{"start":{"line":36,"column":4},"end":{"line":36,"column":37}},"12":{"start":{"line":40,"column":11},"end":{"line":40,"column":18}},"13":{"start":{"line":41,"column":18},"end":{"line":41,"column":25}},"14":{"start":{"line":42,"column":16},"end":{"line":42,"column":23}},"15":{"start":{"line":43,"column":15},"end":{"line":43,"column":22}},"16":{"start":{"line":44,"column":15},"end":{"line":44,"column":22}},"17":{"start":{"line":45,"column":19},"end":{"line":45,"column":26}},"18":{"start":{"line":46,"column":20},"end":{"line":46,"column":27}},"19":{"start":{"line":47,"column":26},"end":{"line":47,"column":33}},"20":{"start":{"line":48,"column":18},"end":{"line":48,"column":25}},"21":{"start":{"line":49,"column":17},"end":{"line":49,"column":24}},"22":{"start":{"line":50,"column":17},"end":{"line":50,"column":24}},"23":{"start":{"line":51,"column":22},"end":{"line":51,"column":29}},"24":{"start":{"line":52,"column":22},"end":{"line":52,"column":29}},"25":{"start":{"line":53,"column":20},"end":{"line":53,"column":27}},"26":{"start":{"line":54,"column":17},"end":{"line":54,"column":24}},"27":{"start":{"line":55,"column":20},"end":{"line":55,"column":27}},"28":{"start":{"line":58,"column":0},"end":{"line":58,"column":47}},"29":{"start":{"line":60,"column":0},"end":{"line":60,"column":27}}},"branchMap":{},"code":["const Channel = require('./Channel');","const TextBasedChannel = require('./interface/TextBasedChannel');","const Collection = require('../util/Collection');","","/**"," * Represents a direct message channel between two users."," * @extends {Channel}"," * @implements {TextBasedChannel}"," */","class DMChannel extends Channel {","  constructor(client, data) {","    super(client, data);","    this.type = 'dm';","    this.messages = new Collection();","    this._typing = new Map();","  }","","  setup(data) {","    super.setup(data);","","    /**","     * The recipient on the other end of the DM","     * @type {User}","     */","    this.recipient = this.client.dataManager.newUser(data.recipients[0]);","","    this.lastMessageID = data.last_message_id;","  }","","  /**","   * When concatenated with a string, this automatically concatenates the recipient's mention instead of the","   * DM channel object.","   * @returns {string}","   */","  toString() {","    return this.recipient.toString();","  }","","  // These are here only for documentation purposes - they are implemented by TextBasedChannel","  send() { return; }","  sendMessage() { return; }","  sendEmbed() { return; }","  sendFile() { return; }","  sendCode() { return; }","  fetchMessage() { return; }","  fetchMessages() { return; }","  fetchPinnedMessages() { return; }","  startTyping() { return; }","  stopTyping() { return; }","  get typing() { return; }","  get typingCount() { return; }","  createCollector() { return; }","  awaitMessages() { return; }","  bulkDelete() { return; }","  _cacheMessage() { return; }","}","","TextBasedChannel.applyToClass(DMChannel, true);","","module.exports = DMChannel;",""],"l":{"1":2,"2":2,"3":0,"12":0,"13":0,"14":0,"15":0,"19":0,"25":0,"27":0,"36":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"58":0,"60":0}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/EvaluatedPermissions.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/EvaluatedPermissions.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":13},"end":{"line":7,"column":27}}},"2":{"name":"(anonymous_2)","line":26,"loc":{"start":{"line":26,"column":11},"end":{"line":26,"column":14}}},"3":{"name":"(anonymous_3)","line":40,"loc":{"start":{"line":40,"column":15},"end":{"line":40,"column":46}}},"4":{"name":"(anonymous_4)","line":52,"loc":{"start":{"line":52,"column":16},"end":{"line":52,"column":48}}},"5":{"name":"(anonymous_5)","line":62,"loc":{"start":{"line":62,"column":20},"end":{"line":62,"column":52}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":47}},"2":{"start":{"line":12,"column":4},"end":{"line":12,"column":25}},"3":{"start":{"line":18,"column":4},"end":{"line":18,"column":19}},"4":{"start":{"line":27,"column":4},"end":{"line":27,"column":37}},"5":{"start":{"line":28,"column":4},"end":{"line":30,"column":5}},"6":{"start":{"line":29,"column":6},"end":{"line":29,"column":81}},"7":{"start":{"line":31,"column":4},"end":{"line":31,"column":33}},"8":{"start":{"line":41,"column":4},"end":{"line":41,"column":75}},"9":{"start":{"line":42,"column":4},"end":{"line":42,"column":91}},"10":{"start":{"line":42,"column":79},"end":{"line":42,"column":91}},"11":{"start":{"line":43,"column":4},"end":{"line":43,"column":39}},"12":{"start":{"line":53,"column":4},"end":{"line":53,"column":67}},"13":{"start":{"line":53,"column":34},"end":{"line":53,"column":65}},"14":{"start":{"line":63,"column":4},"end":{"line":63,"column":69}},"15":{"start":{"line":63,"column":35},"end":{"line":63,"column":67}},"16":{"start":{"line":67,"column":0},"end":{"line":67,"column":38}}},"branchMap":{"1":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":4},"end":{"line":42,"column":4}},{"start":{"line":42,"column":4},"end":{"line":42,"column":4}}]},"2":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":8},"end":{"line":42,"column":17}},{"start":{"line":42,"column":21},"end":{"line":42,"column":77}}]}},"code":["const Constants = require('../util/Constants');","","/**"," * The final evaluated permissions for a member in a channel"," */","class EvaluatedPermissions {","  constructor(member, raw) {","    /**","     * The member this permissions refer to","     * @type {GuildMember}","     */","    this.member = member;","","    /**","     * A number representing the packed permissions","     * @type {number}","     */","    this.raw = raw;","  }","","  /**","   * Get an object mapping permission name, e.g. `READ_MESSAGES` to a boolean - whether the user","   * can perform this or not.","   * @returns {Object<string, boolean>}","   */","  serialize() {","    const serializedPermissions = {};","    for (const permissionName in Constants.PermissionFlags) {","      serializedPermissions[permissionName] = this.hasPermission(permissionName);","    }","    return serializedPermissions;","  }","","  /**","   * Checks whether the user has a certain permission, e.g. `READ_MESSAGES`.","   * @param {PermissionResolvable} permission The permission to check for","   * @param {boolean} [explicit=false] Whether to require the user to explicitly have the exact permission","   * @returns {boolean}","   */","  hasPermission(permission, explicit = false) {","    permission = this.member.client.resolver.resolvePermission(permission);","    if (!explicit && (this.raw & Constants.PermissionFlags.ADMINISTRATOR) > 0) return true;","    return (this.raw & permission) > 0;","  }","","  /**","   * Checks whether the user has all specified permissions.","   * @param {PermissionResolvable[]} permissions The permissions to check for","   * @param {boolean} [explicit=false] Whether to require the user to explicitly have the exact permissions","   * @returns {boolean}","   */","  hasPermissions(permissions, explicit = false) {","    return permissions.every(p => this.hasPermission(p, explicit));","  }","","  /**","   * Checks whether the user has all specified permissions, and lists any missing permissions.","   * @param {PermissionResolvable[]} permissions The permissions to check for","   * @param {boolean} [explicit=false] Whether to require the user to explicitly have the exact permissions","   * @returns {PermissionResolvable[]}","   */","  missingPermissions(permissions, explicit = false) {","    return permissions.filter(p => !this.hasPermission(p, explicit));","  }","}","","module.exports = EvaluatedPermissions;",""],"l":{"1":1,"12":0,"18":0,"27":0,"28":0,"29":0,"31":0,"41":0,"42":0,"43":0,"53":0,"63":0,"67":1}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/GroupDMChannel.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/GroupDMChannel.js","s":{"1":2,"2":2,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0,0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},"fnMap":{"1":{"name":"(anonymous_1)","line":33,"loc":{"start":{"line":33,"column":13},"end":{"line":33,"column":28}}},"2":{"name":"(anonymous_2)","line":40,"loc":{"start":{"line":40,"column":7},"end":{"line":40,"column":14}}},"3":{"name":"(anonymous_3)","line":84,"loc":{"start":{"line":84,"column":11},"end":{"line":84,"column":14}}},"4":{"name":"(anonymous_4)","line":95,"loc":{"start":{"line":95,"column":8},"end":{"line":95,"column":18}}},"5":{"name":"(anonymous_5)","line":119,"loc":{"start":{"line":119,"column":10},"end":{"line":119,"column":13}}},"6":{"name":"(anonymous_6)","line":124,"loc":{"start":{"line":124,"column":6},"end":{"line":124,"column":9}}},"7":{"name":"(anonymous_7)","line":125,"loc":{"start":{"line":125,"column":13},"end":{"line":125,"column":16}}},"8":{"name":"(anonymous_8)","line":126,"loc":{"start":{"line":126,"column":11},"end":{"line":126,"column":14}}},"9":{"name":"(anonymous_9)","line":127,"loc":{"start":{"line":127,"column":10},"end":{"line":127,"column":13}}},"10":{"name":"(anonymous_10)","line":128,"loc":{"start":{"line":128,"column":10},"end":{"line":128,"column":13}}},"11":{"name":"(anonymous_11)","line":129,"loc":{"start":{"line":129,"column":14},"end":{"line":129,"column":17}}},"12":{"name":"(anonymous_12)","line":130,"loc":{"start":{"line":130,"column":15},"end":{"line":130,"column":18}}},"13":{"name":"(anonymous_13)","line":131,"loc":{"start":{"line":131,"column":21},"end":{"line":131,"column":24}}},"14":{"name":"(anonymous_14)","line":132,"loc":{"start":{"line":132,"column":13},"end":{"line":132,"column":16}}},"15":{"name":"(anonymous_15)","line":133,"loc":{"start":{"line":133,"column":12},"end":{"line":133,"column":15}}},"16":{"name":"(anonymous_16)","line":134,"loc":{"start":{"line":134,"column":12},"end":{"line":134,"column":15}}},"17":{"name":"(anonymous_17)","line":135,"loc":{"start":{"line":135,"column":17},"end":{"line":135,"column":20}}},"18":{"name":"(anonymous_18)","line":136,"loc":{"start":{"line":136,"column":17},"end":{"line":136,"column":20}}},"19":{"name":"(anonymous_19)","line":137,"loc":{"start":{"line":137,"column":15},"end":{"line":137,"column":18}}},"20":{"name":"(anonymous_20)","line":138,"loc":{"start":{"line":138,"column":12},"end":{"line":138,"column":15}}},"21":{"name":"(anonymous_21)","line":139,"loc":{"start":{"line":139,"column":15},"end":{"line":139,"column":18}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":37}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":65}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":49}},"4":{"start":{"line":34,"column":4},"end":{"line":34,"column":24}},"5":{"start":{"line":35,"column":4},"end":{"line":35,"column":24}},"6":{"start":{"line":36,"column":4},"end":{"line":36,"column":37}},"7":{"start":{"line":37,"column":4},"end":{"line":37,"column":29}},"8":{"start":{"line":41,"column":4},"end":{"line":41,"column":22}},"9":{"start":{"line":47,"column":4},"end":{"line":47,"column":26}},"10":{"start":{"line":53,"column":4},"end":{"line":53,"column":26}},"11":{"start":{"line":59,"column":4},"end":{"line":59,"column":33}},"12":{"start":{"line":61,"column":4},"end":{"line":67,"column":5}},"13":{"start":{"line":66,"column":6},"end":{"line":66,"column":41}},"14":{"start":{"line":69,"column":4},"end":{"line":74,"column":5}},"15":{"start":{"line":70,"column":6},"end":{"line":73,"column":7}},"16":{"start":{"line":71,"column":8},"end":{"line":71,"column":64}},"17":{"start":{"line":72,"column":8},"end":{"line":72,"column":43}},"18":{"start":{"line":76,"column":4},"end":{"line":76,"column":46}},"19":{"start":{"line":85,"column":4},"end":{"line":85,"column":47}},"20":{"start":{"line":96,"column":4},"end":{"line":100,"column":39}},"21":{"start":{"line":102,"column":4},"end":{"line":104,"column":5}},"22":{"start":{"line":103,"column":6},"end":{"line":103,"column":56}},"23":{"start":{"line":106,"column":4},"end":{"line":106,"column":17}},"24":{"start":{"line":120,"column":4},"end":{"line":120,"column":21}},"25":{"start":{"line":124,"column":11},"end":{"line":124,"column":18}},"26":{"start":{"line":125,"column":18},"end":{"line":125,"column":25}},"27":{"start":{"line":126,"column":16},"end":{"line":126,"column":23}},"28":{"start":{"line":127,"column":15},"end":{"line":127,"column":22}},"29":{"start":{"line":128,"column":15},"end":{"line":128,"column":22}},"30":{"start":{"line":129,"column":19},"end":{"line":129,"column":26}},"31":{"start":{"line":130,"column":20},"end":{"line":130,"column":27}},"32":{"start":{"line":131,"column":26},"end":{"line":131,"column":33}},"33":{"start":{"line":132,"column":18},"end":{"line":132,"column":25}},"34":{"start":{"line":133,"column":17},"end":{"line":133,"column":24}},"35":{"start":{"line":134,"column":17},"end":{"line":134,"column":24}},"36":{"start":{"line":135,"column":22},"end":{"line":135,"column":29}},"37":{"start":{"line":136,"column":22},"end":{"line":136,"column":29}},"38":{"start":{"line":137,"column":20},"end":{"line":137,"column":27}},"39":{"start":{"line":138,"column":17},"end":{"line":138,"column":24}},"40":{"start":{"line":139,"column":20},"end":{"line":139,"column":27}},"41":{"start":{"line":142,"column":0},"end":{"line":142,"column":52}},"42":{"start":{"line":144,"column":0},"end":{"line":144,"column":32}}},"branchMap":{"1":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":4},"end":{"line":61,"column":4}},{"start":{"line":61,"column":4},"end":{"line":61,"column":4}}]},"2":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":4},"end":{"line":69,"column":4}},{"start":{"line":69,"column":4},"end":{"line":69,"column":4}}]},"3":{"line":96,"type":"binary-expr","locations":[{"start":{"line":96,"column":18},"end":{"line":96,"column":25}},{"start":{"line":97,"column":6},"end":{"line":97,"column":28}},{"start":{"line":98,"column":6},"end":{"line":98,"column":32}},{"start":{"line":99,"column":6},"end":{"line":99,"column":32}},{"start":{"line":100,"column":6},"end":{"line":100,"column":38}}]},"4":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":4},"end":{"line":102,"column":4}},{"start":{"line":102,"column":4},"end":{"line":102,"column":4}}]}},"code":["const Channel = require('./Channel');","const TextBasedChannel = require('./interface/TextBasedChannel');","const Collection = require('../util/Collection');","","/*","{ type: 3,","  recipients:","   [ { username: 'Charlie',","       id: '123',","       discriminator: '6631',","       avatar: '123' },","     { username: 'Ben',","       id: '123',","       discriminator: '2055',","       avatar: '123' },","     { username: 'Adam',","       id: '123',","       discriminator: '2406',","       avatar: '123' } ],","  owner_id: '123',","  name: null,","  last_message_id: '123',","  id: '123',","  icon: null }","*/","","/**"," * Represents a Group DM on Discord"," * @extends {Channel}"," * @implements {TextBasedChannel}"," */","class GroupDMChannel extends Channel {","  constructor(client, data) {","    super(client, data);","    this.type = 'group';","    this.messages = new Collection();","    this._typing = new Map();","  }","","  setup(data) {","    super.setup(data);","","    /**","     * The name of this Group DM, can be null if one isn't set.","     * @type {string}","     */","    this.name = data.name;","","    /**","     * A hash of the Group DM icon.","     * @type {string}","     */","    this.icon = data.icon;","","    /**","     * The user ID of this Group DM's owner.","     * @type {string}","     */","    this.ownerID = data.owner_id;","","    if (!this.recipients) {","      /**","       * A collection of the recipients of this DM, mapped by their ID.","       * @type {Collection<string, User>}","       */","      this.recipients = new Collection();","    }","","    if (data.recipients) {","      for (const recipient of data.recipients) {","        const user = this.client.dataManager.newUser(recipient);","        this.recipients.set(user.id, user);","      }","    }","","    this.lastMessageID = data.last_message_id;","  }","","  /**","   * The owner of this Group DM.","   * @type {User}","   * @readonly","   */","  get owner() {","    return this.client.users.get(this.ownerID);","  }","","  /**","   * Whether this channel equals another channel. It compares all properties, so for most operations","   * it is advisable to just compare `channel.id === channel2.id` as it is much faster and is often","   * what most users need.","   * @param {GroupDMChannel} channel Channel to compare with","   * @returns {boolean}","   */","  equals(channel) {","    const equal = channel &&","      this.id === channel.id &&","      this.name === channel.name &&","      this.icon === channel.icon &&","      this.ownerID === channel.ownerID;","","    if (equal) {","      return this.recipients.equals(channel.recipients);","    }","","    return equal;","  }","","  /**","   * When concatenated with a string, this automatically concatenates the channel's name instead of the Channel object.","   * @returns {string}","   * @example","   * // logs: Hello from My Group DM!","   * console.log(`Hello from ${channel}!`);","   * @example","   * // logs: Hello from My Group DM!","   * console.log(`Hello from ' + channel + '!');","   */","  toString() {","    return this.name;","  }","","  // These are here only for documentation purposes - they are implemented by TextBasedChannel","  send() { return; }","  sendMessage() { return; }","  sendEmbed() { return; }","  sendFile() { return; }","  sendCode() { return; }","  fetchMessage() { return; }","  fetchMessages() { return; }","  fetchPinnedMessages() { return; }","  startTyping() { return; }","  stopTyping() { return; }","  get typing() { return; }","  get typingCount() { return; }","  createCollector() { return; }","  awaitMessages() { return; }","  bulkDelete() { return; }","  _cacheMessage() { return; }","}","","TextBasedChannel.applyToClass(GroupDMChannel, true);","","module.exports = GroupDMChannel;",""],"l":{"1":2,"2":2,"3":0,"34":0,"35":0,"36":0,"37":0,"41":0,"47":0,"53":0,"59":0,"61":0,"66":0,"69":0,"70":0,"71":0,"72":0,"76":0,"85":0,"96":0,"102":0,"103":0,"106":0,"120":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"142":0,"144":0}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/GuildChannel.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/GuildChannel.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0,0,0,0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"fnMap":{"1":{"name":"(anonymous_1)","line":13,"loc":{"start":{"line":13,"column":13},"end":{"line":13,"column":27}}},"2":{"name":"(anonymous_2)","line":23,"loc":{"start":{"line":23,"column":7},"end":{"line":23,"column":14}}},"3":{"name":"(anonymous_3)","line":56,"loc":{"start":{"line":56,"column":16},"end":{"line":56,"column":25}}},"4":{"name":"(anonymous_4)","line":78,"loc":{"start":{"line":78,"column":15},"end":{"line":78,"column":56}}},"5":{"name":"(anonymous_5)","line":124,"loc":{"start":{"line":124,"column":22},"end":{"line":124,"column":44}}},"6":{"name":"(anonymous_6)","line":186,"loc":{"start":{"line":186,"column":6},"end":{"line":186,"column":13}}},"7":{"name":"(anonymous_7)","line":200,"loc":{"start":{"line":200,"column":9},"end":{"line":200,"column":16}}},"8":{"name":"(anonymous_8)","line":214,"loc":{"start":{"line":214,"column":13},"end":{"line":214,"column":24}}},"9":{"name":"(anonymous_9)","line":228,"loc":{"start":{"line":228,"column":10},"end":{"line":228,"column":18}}},"10":{"name":"(anonymous_10)","line":245,"loc":{"start":{"line":245,"column":14},"end":{"line":245,"column":29}}},"11":{"name":"(anonymous_11)","line":255,"loc":{"start":{"line":255,"column":7},"end":{"line":255,"column":50}}},"12":{"name":"(anonymous_12)","line":265,"loc":{"start":{"line":265,"column":8},"end":{"line":265,"column":18}}},"13":{"name":"(anonymous_13)","line":294,"loc":{"start":{"line":294,"column":10},"end":{"line":294,"column":13}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":37}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":31}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":63}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":63}},"5":{"start":{"line":5,"column":0},"end":{"line":5,"column":47}},"6":{"start":{"line":6,"column":0},"end":{"line":6,"column":49}},"7":{"start":{"line":14,"column":4},"end":{"line":14,"column":30}},"8":{"start":{"line":20,"column":4},"end":{"line":20,"column":23}},"9":{"start":{"line":24,"column":4},"end":{"line":24,"column":22}},"10":{"start":{"line":30,"column":4},"end":{"line":30,"column":26}},"11":{"start":{"line":36,"column":4},"end":{"line":36,"column":34}},"12":{"start":{"line":42,"column":4},"end":{"line":42,"column":49}},"13":{"start":{"line":43,"column":4},"end":{"line":47,"column":5}},"14":{"start":{"line":44,"column":6},"end":{"line":46,"column":7}},"15":{"start":{"line":45,"column":8},"end":{"line":45,"column":95}},"16":{"start":{"line":57,"column":4},"end":{"line":57,"column":73}},"17":{"start":{"line":58,"column":4},"end":{"line":58,"column":29}},"18":{"start":{"line":58,"column":17},"end":{"line":58,"column":29}},"19":{"start":{"line":59,"column":4},"end":{"line":59,"column":109}},"20":{"start":{"line":59,"column":42},"end":{"line":59,"column":109}},"21":{"start":{"line":61,"column":4},"end":{"line":61,"column":24}},"22":{"start":{"line":63,"column":4},"end":{"line":63,"column":31}},"23":{"start":{"line":64,"column":4},"end":{"line":64,"column":71}},"24":{"start":{"line":64,"column":39},"end":{"line":64,"column":71}},"25":{"start":{"line":66,"column":4},"end":{"line":66,"column":63}},"26":{"start":{"line":67,"column":4},"end":{"line":70,"column":5}},"27":{"start":{"line":68,"column":6},"end":{"line":68,"column":37}},"28":{"start":{"line":69,"column":6},"end":{"line":69,"column":37}},"29":{"start":{"line":72,"column":4},"end":{"line":72,"column":81}},"30":{"start":{"line":73,"column":4},"end":{"line":73,"column":55}},"31":{"start":{"line":73,"column":15},"end":{"line":73,"column":55}},"32":{"start":{"line":75,"column":4},"end":{"line":75,"column":57}},"33":{"start":{"line":79,"column":4},"end":{"line":79,"column":88}},"34":{"start":{"line":79,"column":19},"end":{"line":79,"column":88}},"35":{"start":{"line":80,"column":4},"end":{"line":80,"column":27}},"36":{"start":{"line":80,"column":17},"end":{"line":80,"column":27}},"37":{"start":{"line":82,"column":4},"end":{"line":82,"column":34}},"38":{"start":{"line":83,"column":4},"end":{"line":83,"column":30}},"39":{"start":{"line":84,"column":4},"end":{"line":84,"column":32}},"40":{"start":{"line":86,"column":4},"end":{"line":92,"column":5}},"41":{"start":{"line":87,"column":6},"end":{"line":91,"column":7}},"42":{"start":{"line":88,"column":8},"end":{"line":88,"column":41}},"43":{"start":{"line":89,"column":13},"end":{"line":91,"column":7}},"44":{"start":{"line":90,"column":8},"end":{"line":90,"column":39}},"45":{"start":{"line":94,"column":4},"end":{"line":97,"column":6}},"46":{"start":{"line":125,"column":4},"end":{"line":128,"column":6}},"47":{"start":{"line":130,"column":4},"end":{"line":139,"column":5}},"48":{"start":{"line":131,"column":6},"end":{"line":131,"column":28}},"49":{"start":{"line":132,"column":11},"end":{"line":139,"column":5}},"50":{"start":{"line":133,"column":6},"end":{"line":133,"column":52}},"51":{"start":{"line":134,"column":6},"end":{"line":134,"column":28}},"52":{"start":{"line":136,"column":6},"end":{"line":136,"column":64}},"53":{"start":{"line":137,"column":6},"end":{"line":137,"column":30}},"54":{"start":{"line":138,"column":6},"end":{"line":138,"column":113}},"55":{"start":{"line":138,"column":23},"end":{"line":138,"column":113}},"56":{"start":{"line":141,"column":4},"end":{"line":141,"column":31}},"57":{"start":{"line":143,"column":4},"end":{"line":143,"column":71}},"58":{"start":{"line":145,"column":4},"end":{"line":148,"column":5}},"59":{"start":{"line":146,"column":6},"end":{"line":146,"column":42}},"60":{"start":{"line":147,"column":6},"end":{"line":147,"column":40}},"61":{"start":{"line":150,"column":4},"end":{"line":161,"column":5}},"62":{"start":{"line":151,"column":6},"end":{"line":160,"column":7}},"63":{"start":{"line":152,"column":8},"end":{"line":152,"column":62}},"64":{"start":{"line":153,"column":8},"end":{"line":153,"column":64}},"65":{"start":{"line":154,"column":13},"end":{"line":160,"column":7}},"66":{"start":{"line":155,"column":8},"end":{"line":155,"column":65}},"67":{"start":{"line":156,"column":8},"end":{"line":156,"column":61}},"68":{"start":{"line":157,"column":13},"end":{"line":160,"column":7}},"69":{"start":{"line":158,"column":8},"end":{"line":158,"column":65}},"70":{"start":{"line":159,"column":8},"end":{"line":159,"column":64}},"71":{"start":{"line":163,"column":4},"end":{"line":163,"column":71}},"72":{"start":{"line":187,"column":4},"end":{"line":187,"column":62}},"73":{"start":{"line":201,"column":4},"end":{"line":201,"column":31}},"74":{"start":{"line":215,"column":4},"end":{"line":215,"column":70}},"75":{"start":{"line":229,"column":4},"end":{"line":229,"column":67}},"76":{"start":{"line":246,"column":4},"end":{"line":246,"column":71}},"77":{"start":{"line":256,"column":4},"end":{"line":256,"column":103}},"78":{"start":{"line":266,"column":4},"end":{"line":271,"column":33}},"79":{"start":{"line":273,"column":4},"end":{"line":279,"column":5}},"80":{"start":{"line":274,"column":6},"end":{"line":278,"column":7}},"81":{"start":{"line":275,"column":8},"end":{"line":275,"column":79}},"82":{"start":{"line":277,"column":8},"end":{"line":277,"column":76}},"83":{"start":{"line":281,"column":4},"end":{"line":281,"column":17}},"84":{"start":{"line":295,"column":4},"end":{"line":295,"column":27}},"85":{"start":{"line":299,"column":0},"end":{"line":299,"column":30}}},"branchMap":{"1":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":4},"end":{"line":43,"column":4}},{"start":{"line":43,"column":4},"end":{"line":43,"column":4}}]},"2":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":4},"end":{"line":58,"column":4}},{"start":{"line":58,"column":4},"end":{"line":58,"column":4}}]},"3":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":4},"end":{"line":59,"column":4}},{"start":{"line":59,"column":4},"end":{"line":59,"column":4}}]},"4":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":4},"end":{"line":73,"column":4}},{"start":{"line":73,"column":4},"end":{"line":73,"column":4}}]},"5":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":4},"end":{"line":79,"column":4}},{"start":{"line":79,"column":4},"end":{"line":79,"column":4}}]},"6":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":4},"end":{"line":80,"column":4}},{"start":{"line":80,"column":4},"end":{"line":80,"column":4}}]},"7":{"line":82,"type":"binary-expr","locations":[{"start":{"line":82,"column":12},"end":{"line":82,"column":17}},{"start":{"line":82,"column":21},"end":{"line":82,"column":33}}]},"8":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":6},"end":{"line":87,"column":6}},{"start":{"line":87,"column":6},"end":{"line":87,"column":6}}]},"9":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":13},"end":{"line":89,"column":13}},{"start":{"line":89,"column":13},"end":{"line":89,"column":13}}]},"10":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":4},"end":{"line":130,"column":4}},{"start":{"line":130,"column":4},"end":{"line":130,"column":4}}]},"11":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":11},"end":{"line":132,"column":11}},{"start":{"line":132,"column":11},"end":{"line":132,"column":11}}]},"12":{"line":138,"type":"if","locations":[{"start":{"line":138,"column":6},"end":{"line":138,"column":6}},{"start":{"line":138,"column":6},"end":{"line":138,"column":6}}]},"13":{"line":145,"type":"if","locations":[{"start":{"line":145,"column":4},"end":{"line":145,"column":4}},{"start":{"line":145,"column":4},"end":{"line":145,"column":4}}]},"14":{"line":151,"type":"if","locations":[{"start":{"line":151,"column":6},"end":{"line":151,"column":6}},{"start":{"line":151,"column":6},"end":{"line":151,"column":6}}]},"15":{"line":152,"type":"binary-expr","locations":[{"start":{"line":152,"column":25},"end":{"line":152,"column":56}},{"start":{"line":152,"column":60},"end":{"line":152,"column":61}}]},"16":{"line":153,"type":"binary-expr","locations":[{"start":{"line":153,"column":26},"end":{"line":153,"column":57}},{"start":{"line":153,"column":61},"end":{"line":153,"column":62}}]},"17":{"line":154,"type":"if","locations":[{"start":{"line":154,"column":13},"end":{"line":154,"column":13}},{"start":{"line":154,"column":13},"end":{"line":154,"column":13}}]},"18":{"line":155,"type":"binary-expr","locations":[{"start":{"line":155,"column":27},"end":{"line":155,"column":58}},{"start":{"line":155,"column":62},"end":{"line":155,"column":63}}]},"19":{"line":156,"type":"binary-expr","locations":[{"start":{"line":156,"column":24},"end":{"line":156,"column":55}},{"start":{"line":156,"column":59},"end":{"line":156,"column":60}}]},"20":{"line":157,"type":"if","locations":[{"start":{"line":157,"column":13},"end":{"line":157,"column":13}},{"start":{"line":157,"column":13},"end":{"line":157,"column":13}}]},"21":{"line":158,"type":"binary-expr","locations":[{"start":{"line":158,"column":27},"end":{"line":158,"column":58}},{"start":{"line":158,"column":62},"end":{"line":158,"column":63}}]},"22":{"line":159,"type":"binary-expr","locations":[{"start":{"line":159,"column":26},"end":{"line":159,"column":57}},{"start":{"line":159,"column":61},"end":{"line":159,"column":62}}]},"23":{"line":256,"type":"cond-expr","locations":[{"start":{"line":256,"column":71},"end":{"line":256,"column":96}},{"start":{"line":256,"column":99},"end":{"line":256,"column":101}}]},"24":{"line":266,"type":"binary-expr","locations":[{"start":{"line":266,"column":16},"end":{"line":266,"column":23}},{"start":{"line":267,"column":6},"end":{"line":267,"column":28}},{"start":{"line":268,"column":6},"end":{"line":268,"column":32}},{"start":{"line":269,"column":6},"end":{"line":269,"column":34}},{"start":{"line":270,"column":6},"end":{"line":270,"column":40}},{"start":{"line":271,"column":6},"end":{"line":271,"column":32}}]},"25":{"line":273,"type":"if","locations":[{"start":{"line":273,"column":4},"end":{"line":273,"column":4}},{"start":{"line":273,"column":4},"end":{"line":273,"column":4}}]},"26":{"line":274,"type":"if","locations":[{"start":{"line":274,"column":6},"end":{"line":274,"column":6}},{"start":{"line":274,"column":6},"end":{"line":274,"column":6}}]},"27":{"line":274,"type":"binary-expr","locations":[{"start":{"line":274,"column":10},"end":{"line":274,"column":35}},{"start":{"line":274,"column":39},"end":{"line":274,"column":67}}]},"28":{"line":277,"type":"binary-expr","locations":[{"start":{"line":277,"column":16},"end":{"line":277,"column":42}},{"start":{"line":277,"column":46},"end":{"line":277,"column":75}}]}},"code":["const Channel = require('./Channel');","const Role = require('./Role');","const PermissionOverwrites = require('./PermissionOverwrites');","const EvaluatedPermissions = require('./EvaluatedPermissions');","const Constants = require('../util/Constants');","const Collection = require('../util/Collection');","","/**"," * Represents a guild channel (i.e. text channels and voice channels)"," * @extends {Channel}"," */","class GuildChannel extends Channel {","  constructor(guild, data) {","    super(guild.client, data);","","    /**","     * The guild the channel is in","     * @type {Guild}","     */","    this.guild = guild;","  }","","  setup(data) {","    super.setup(data);","","    /**","     * The name of the guild channel","     * @type {string}","     */","    this.name = data.name;","","    /**","     * The position of the channel in the list.","     * @type {number}","     */","    this.position = data.position;","","    /**","     * A map of permission overwrites in this channel for roles and users.","     * @type {Collection<string, PermissionOverwrites>}","     */","    this.permissionOverwrites = new Collection();","    if (data.permission_overwrites) {","      for (const overwrite of data.permission_overwrites) {","        this.permissionOverwrites.set(overwrite.id, new PermissionOverwrites(this, overwrite));","      }","    }","  }","","  /**","   * Gets the overall set of permissions for a user in this channel, taking into account roles and permission","   * overwrites.","   * @param {GuildMemberResolvable} member The user that you want to obtain the overall permissions for","   * @returns {?EvaluatedPermissions}","   */","  permissionsFor(member) {","    member = this.client.resolver.resolveGuildMember(this.guild, member);","    if (!member) return null;","    if (member.id === this.guild.ownerID) return new EvaluatedPermissions(member, Constants.ALL_PERMISSIONS);","","    let permissions = 0;","","    const roles = member.roles;","    for (const role of roles.values()) permissions |= role.permissions;","","    const overwrites = this.overwritesFor(member, true, roles);","    for (const overwrite of overwrites.role.concat(overwrites.member)) {","      permissions &= ~overwrite.deny;","      permissions |= overwrite.allow;","    }","","    const admin = Boolean(permissions & Constants.PermissionFlags.ADMINISTRATOR);","    if (admin) permissions = Constants.ALL_PERMISSIONS;","","    return new EvaluatedPermissions(member, permissions);","  }","","  overwritesFor(member, verified = false, roles = null) {","    if (!verified) member = this.client.resolver.resolveGuildMember(this.guild, member);","    if (!member) return [];","","    roles = roles || member.roles;","    const roleOverwrites = [];","    const memberOverwrites = [];","","    for (const overwrite of this.permissionOverwrites.values()) {","      if (overwrite.id === member.id) {","        memberOverwrites.push(overwrite);","      } else if (roles.has(overwrite.id)) {","        roleOverwrites.push(overwrite);","      }","    }","","    return {","      role: roleOverwrites,","      member: memberOverwrites,","    };","  }","","  /**","   * An object mapping permission flags to `true` (enabled) or `false` (disabled)","   * ```js","   * {","   *  'SEND_MESSAGES': true,","   *  'ATTACH_FILES': false,","   * }","   * ```","   * @typedef {Object} PermissionOverwriteOptions","   */","","  /**","   * Overwrites the permissions for a user or role in this channel.","   * @param {RoleResolvable|UserResolvable} userOrRole The user or role to update","   * @param {PermissionOverwriteOptions} options The configuration for the update","   * @returns {Promise}","   * @example","   * // overwrite permissions for a message author","   * message.channel.overwritePermissions(message.author, {","   *  SEND_MESSAGES: false","   * })","   * .then(() => console.log('Done!'))","   * .catch(console.error);","   */","  overwritePermissions(userOrRole, options) {","    const payload = {","      allow: 0,","      deny: 0,","    };","","    if (userOrRole instanceof Role) {","      payload.type = 'role';","    } else if (this.guild.roles.has(userOrRole)) {","      userOrRole = this.guild.roles.get(userOrRole);","      payload.type = 'role';","    } else {","      userOrRole = this.client.resolver.resolveUser(userOrRole);","      payload.type = 'member';","      if (!userOrRole) return Promise.reject(new TypeError('Supplied parameter was neither a User nor a Role.'));","    }","","    payload.id = userOrRole.id;","","    const prevOverwrite = this.permissionOverwrites.get(userOrRole.id);","","    if (prevOverwrite) {","      payload.allow = prevOverwrite.allow;","      payload.deny = prevOverwrite.deny;","    }","","    for (const perm in options) {","      if (options[perm] === true) {","        payload.allow |= Constants.PermissionFlags[perm] || 0;","        payload.deny &= ~(Constants.PermissionFlags[perm] || 0);","      } else if (options[perm] === false) {","        payload.allow &= ~(Constants.PermissionFlags[perm] || 0);","        payload.deny |= Constants.PermissionFlags[perm] || 0;","      } else if (options[perm] === null) {","        payload.allow &= ~(Constants.PermissionFlags[perm] || 0);","        payload.deny &= ~(Constants.PermissionFlags[perm] || 0);","      }","    }","","    return this.client.rest.methods.setChannelOverwrite(this, payload);","  }","","  /**","   * The data for a guild channel","   * @typedef {Object} ChannelData","   * @property {string} [name] The name of the channel","   * @property {number} [position] The position of the channel","   * @property {string} [topic] The topic of the text channel","   * @property {number} [bitrate] The bitrate of the voice channel","   * @property {number} [userLimit] The user limit of the channel","   */","","  /**","   * Edits the channel","   * @param {ChannelData} data The new data for the channel","   * @returns {Promise<GuildChannel>}","   * @example","   * // edit a channel","   * channel.edit({name: 'new-channel'})","   *  .then(c => console.log(`Edited channel ${c}`))","   *  .catch(console.error);","   */","  edit(data) {","    return this.client.rest.methods.updateChannel(this, data);","  }","","  /**","   * Set a new name for the guild channel","   * @param {string} name The new name for the guild channel","   * @returns {Promise<GuildChannel>}","   * @example","   * // set a new channel name","   * channel.setName('not_general')","   *  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))","   *  .catch(console.error);","   */","  setName(name) {","    return this.edit({ name });","  }","","  /**","   * Set a new position for the guild channel","   * @param {number} position The new position for the guild channel","   * @returns {Promise<GuildChannel>}","   * @example","   * // set a new channel position","   * channel.setPosition(2)","   *  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))","   *  .catch(console.error);","   */","  setPosition(position) {","    return this.client.rest.methods.updateChannel(this, { position });","  }","","  /**","   * Set a new topic for the guild channel","   * @param {string} topic The new topic for the guild channel","   * @returns {Promise<GuildChannel>}","   * @example","   * // set a new channel topic","   * channel.setTopic('needs more rate limiting')","   *  .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))","   *  .catch(console.error);","   */","  setTopic(topic) {","    return this.client.rest.methods.updateChannel(this, { topic });","  }","","  /**","   * Options given when creating a guild channel invite","   * @typedef {Object} InviteOptions","   * @property {boolean} [temporary=false] Whether the invite should kick users after 24hrs if they are not given a role","   * @property {number} [maxAge=0] Time in seconds the invite expires in","   * @property {number} [maxUses=0] Maximum amount of uses for this invite","   */","","  /**","   * Create an invite to this guild channel","   * @param {InviteOptions} [options={}] The options for the invite","   * @returns {Promise<Invite>}","   */","  createInvite(options = {}) {","    return this.client.rest.methods.createChannelInvite(this, options);","  }","","  /**","   * Clone this channel","   * @param {string} [name=this.name] Optional name for the new channel, otherwise it has the name of this channel","   * @param {boolean} [withPermissions=true] Whether to clone the channel with this channel's permission overwrites","   * @returns {Promise<GuildChannel>}","   */","  clone(name = this.name, withPermissions = true) {","    return this.guild.createChannel(name, this.type, withPermissions ? this.permissionOverwrites : []);","  }","","  /**","   * Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.","   * In most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","   * @param {GuildChannel} channel Channel to compare with","   * @returns {boolean}","   */","  equals(channel) {","    let equal = channel &&","      this.id === channel.id &&","      this.type === channel.type &&","      this.topic === channel.topic &&","      this.position === channel.position &&","      this.name === channel.name;","","    if (equal) {","      if (this.permissionOverwrites && channel.permissionOverwrites) {","        equal = this.permissionOverwrites.equals(channel.permissionOverwrites);","      } else {","        equal = !this.permissionOverwrites && !channel.permissionOverwrites;","      }","    }","","    return equal;","  }","","  /**","   * When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","   * @returns {string}","   * @example","   * // Outputs: Hello from #general","   * console.log(`Hello from ${channel}`);","   * @example","   * // Outputs: Hello from #general","   * console.log('Hello from ' + channel);","   */","  toString() {","    return `<#${this.id}>`;","  }","}","","module.exports = GuildChannel;",""],"l":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"14":0,"20":0,"24":0,"30":0,"36":0,"42":0,"43":0,"44":0,"45":0,"57":0,"58":0,"59":0,"61":0,"63":0,"64":0,"66":0,"67":0,"68":0,"69":0,"72":0,"73":0,"75":0,"79":0,"80":0,"82":0,"83":0,"84":0,"86":0,"87":0,"88":0,"89":0,"90":0,"94":0,"125":0,"130":0,"131":0,"132":0,"133":0,"134":0,"136":0,"137":0,"138":0,"141":0,"143":0,"145":0,"146":0,"147":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"163":0,"187":0,"201":0,"215":0,"229":0,"246":0,"256":0,"266":0,"273":0,"274":0,"275":0,"277":0,"281":0,"295":0,"299":1}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/Role.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/Role.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0,0,0,0,0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":13},"end":{"line":7,"column":27}}},"2":{"name":"(anonymous_2)","line":25,"loc":{"start":{"line":25,"column":7},"end":{"line":25,"column":14}}},"3":{"name":"(anonymous_3)","line":80,"loc":{"start":{"line":80,"column":22},"end":{"line":80,"column":25}}},"4":{"name":"(anonymous_4)","line":89,"loc":{"start":{"line":89,"column":15},"end":{"line":89,"column":18}}},"5":{"name":"(anonymous_5)","line":98,"loc":{"start":{"line":98,"column":14},"end":{"line":98,"column":17}}},"6":{"name":"(anonymous_6)","line":109,"loc":{"start":{"line":109,"column":13},"end":{"line":109,"column":16}}},"7":{"name":"(anonymous_7)","line":118,"loc":{"start":{"line":118,"column":14},"end":{"line":118,"column":17}}},"8":{"name":"(anonymous_8)","line":132,"loc":{"start":{"line":132,"column":11},"end":{"line":132,"column":14}}},"9":{"name":"(anonymous_9)","line":153,"loc":{"start":{"line":153,"column":15},"end":{"line":153,"column":46}}},"10":{"name":"(anonymous_10)","line":165,"loc":{"start":{"line":165,"column":16},"end":{"line":165,"column":48}}},"11":{"name":"(anonymous_11)","line":175,"loc":{"start":{"line":175,"column":19},"end":{"line":175,"column":26}}},"12":{"name":"(anonymous_12)","line":200,"loc":{"start":{"line":200,"column":6},"end":{"line":200,"column":13}}},"13":{"name":"(anonymous_13)","line":214,"loc":{"start":{"line":214,"column":9},"end":{"line":214,"column":16}}},"14":{"name":"(anonymous_14)","line":228,"loc":{"start":{"line":228,"column":10},"end":{"line":228,"column":18}}},"15":{"name":"(anonymous_15)","line":242,"loc":{"start":{"line":242,"column":10},"end":{"line":242,"column":18}}},"16":{"name":"(anonymous_16)","line":256,"loc":{"start":{"line":256,"column":13},"end":{"line":256,"column":24}}},"17":{"name":"(anonymous_17)","line":270,"loc":{"start":{"line":270,"column":16},"end":{"line":270,"column":30}}},"18":{"name":"(anonymous_18)","line":284,"loc":{"start":{"line":284,"column":16},"end":{"line":284,"column":30}}},"19":{"name":"(anonymous_19)","line":297,"loc":{"start":{"line":297,"column":8},"end":{"line":297,"column":11}}},"20":{"name":"(anonymous_20)","line":308,"loc":{"start":{"line":308,"column":8},"end":{"line":308,"column":15}}},"21":{"name":"(anonymous_21)","line":323,"loc":{"start":{"line":323,"column":10},"end":{"line":323,"column":13}}},"22":{"name":"(anonymous_22)","line":335,"loc":{"start":{"line":335,"column":25},"end":{"line":335,"column":40}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":47}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":67}},"3":{"start":{"line":20,"column":4},"end":{"line":20,"column":23}},"4":{"start":{"line":22,"column":4},"end":{"line":22,"column":31}},"5":{"start":{"line":22,"column":14},"end":{"line":22,"column":31}},"6":{"start":{"line":30,"column":4},"end":{"line":30,"column":22}},"7":{"start":{"line":36,"column":4},"end":{"line":36,"column":26}},"8":{"start":{"line":42,"column":4},"end":{"line":42,"column":28}},"9":{"start":{"line":48,"column":4},"end":{"line":48,"column":28}},"10":{"start":{"line":54,"column":4},"end":{"line":54,"column":34}},"11":{"start":{"line":60,"column":4},"end":{"line":60,"column":40}},"12":{"start":{"line":66,"column":4},"end":{"line":66,"column":32}},"13":{"start":{"line":72,"column":4},"end":{"line":72,"column":40}},"14":{"start":{"line":81,"column":4},"end":{"line":81,"column":47}},"15":{"start":{"line":90,"column":4},"end":{"line":90,"column":43}},"16":{"start":{"line":99,"column":4},"end":{"line":99,"column":38}},"17":{"start":{"line":100,"column":4},"end":{"line":100,"column":43}},"18":{"start":{"line":100,"column":27},"end":{"line":100,"column":43}},"19":{"start":{"line":101,"column":4},"end":{"line":101,"column":21}},"20":{"start":{"line":110,"column":4},"end":{"line":110,"column":64}},"21":{"start":{"line":110,"column":42},"end":{"line":110,"column":62}},"22":{"start":{"line":119,"column":4},"end":{"line":119,"column":35}},"23":{"start":{"line":119,"column":22},"end":{"line":119,"column":35}},"24":{"start":{"line":120,"column":4},"end":{"line":120,"column":61}},"25":{"start":{"line":121,"column":4},"end":{"line":121,"column":105}},"26":{"start":{"line":121,"column":92},"end":{"line":121,"column":105}},"27":{"start":{"line":122,"column":4},"end":{"line":122,"column":64}},"28":{"start":{"line":133,"column":4},"end":{"line":133,"column":37}},"29":{"start":{"line":134,"column":4},"end":{"line":136,"column":5}},"30":{"start":{"line":135,"column":6},"end":{"line":135,"column":81}},"31":{"start":{"line":137,"column":4},"end":{"line":137,"column":33}},"32":{"start":{"line":154,"column":4},"end":{"line":154,"column":68}},"33":{"start":{"line":155,"column":4},"end":{"line":155,"column":99}},"34":{"start":{"line":155,"column":87},"end":{"line":155,"column":99}},"35":{"start":{"line":156,"column":4},"end":{"line":156,"column":47}},"36":{"start":{"line":166,"column":4},"end":{"line":166,"column":67}},"37":{"start":{"line":166,"column":34},"end":{"line":166,"column":65}},"38":{"start":{"line":176,"column":4},"end":{"line":176,"column":57}},"39":{"start":{"line":201,"column":4},"end":{"line":201,"column":64}},"40":{"start":{"line":215,"column":4},"end":{"line":215,"column":31}},"41":{"start":{"line":229,"column":4},"end":{"line":229,"column":32}},"42":{"start":{"line":243,"column":4},"end":{"line":243,"column":32}},"43":{"start":{"line":257,"column":4},"end":{"line":257,"column":71}},"44":{"start":{"line":257,"column":65},"end":{"line":257,"column":69}},"45":{"start":{"line":271,"column":4},"end":{"line":271,"column":38}},"46":{"start":{"line":285,"column":4},"end":{"line":285,"column":38}},"47":{"start":{"line":298,"column":4},"end":{"line":298,"column":58}},"48":{"start":{"line":309,"column":4},"end":{"line":316,"column":36}},"49":{"start":{"line":324,"column":4},"end":{"line":324,"column":54}},"50":{"start":{"line":324,"column":35},"end":{"line":324,"column":54}},"51":{"start":{"line":325,"column":4},"end":{"line":325,"column":28}},"52":{"start":{"line":336,"column":4},"end":{"line":336,"column":70}},"53":{"start":{"line":336,"column":43},"end":{"line":336,"column":70}},"54":{"start":{"line":337,"column":4},"end":{"line":337,"column":43}},"55":{"start":{"line":341,"column":0},"end":{"line":341,"column":22}}},"branchMap":{"1":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":4},"end":{"line":22,"column":4}},{"start":{"line":22,"column":4},"end":{"line":22,"column":4}}]},"2":{"line":119,"type":"if","locations":[{"start":{"line":119,"column":4},"end":{"line":119,"column":4}},{"start":{"line":119,"column":4},"end":{"line":119,"column":4}}]},"3":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":4},"end":{"line":121,"column":4}},{"start":{"line":121,"column":4},"end":{"line":121,"column":4}}]},"4":{"line":155,"type":"if","locations":[{"start":{"line":155,"column":4},"end":{"line":155,"column":4}},{"start":{"line":155,"column":4},"end":{"line":155,"column":4}}]},"5":{"line":155,"type":"binary-expr","locations":[{"start":{"line":155,"column":8},"end":{"line":155,"column":17}},{"start":{"line":155,"column":21},"end":{"line":155,"column":85}}]},"6":{"line":309,"type":"binary-expr","locations":[{"start":{"line":309,"column":11},"end":{"line":309,"column":15}},{"start":{"line":310,"column":6},"end":{"line":310,"column":25}},{"start":{"line":311,"column":6},"end":{"line":311,"column":29}},{"start":{"line":312,"column":6},"end":{"line":312,"column":31}},{"start":{"line":313,"column":6},"end":{"line":313,"column":31}},{"start":{"line":314,"column":6},"end":{"line":314,"column":37}},{"start":{"line":315,"column":6},"end":{"line":315,"column":43}},{"start":{"line":316,"column":6},"end":{"line":316,"column":35}}]},"7":{"line":324,"type":"if","locations":[{"start":{"line":324,"column":4},"end":{"line":324,"column":4}},{"start":{"line":324,"column":4},"end":{"line":324,"column":4}}]},"8":{"line":336,"type":"if","locations":[{"start":{"line":336,"column":4},"end":{"line":336,"column":4}},{"start":{"line":336,"column":4},"end":{"line":336,"column":4}}]}},"code":["const Constants = require('../util/Constants');","","/**"," * Represents a role on Discord"," */","class Role {","  constructor(guild, data) {","    /**","     * The client that instantiated the role","     * @name Role#client","     * @type {Client}","     * @readonly","     */","    Object.defineProperty(this, 'client', { value: guild.client });","","    /**","     * The guild that the role belongs to","     * @type {Guild}","     */","    this.guild = guild;","","    if (data) this.setup(data);","  }","","  setup(data) {","    /**","     * The ID of the role (unique to the guild it is part of)","     * @type {string}","     */","    this.id = data.id;","","    /**","     * The name of the role","     * @type {string}","     */","    this.name = data.name;","","    /**","     * The base 10 color of the role","     * @type {number}","     */","    this.color = data.color;","","    /**","     * If true, users that are part of this role will appear in a separate category in the users list","     * @type {boolean}","     */","    this.hoist = data.hoist;","","    /**","     * The position of the role in the role manager","     * @type {number}","     */","    this.position = data.position;","","    /**","     * The evaluated permissions number","     * @type {number}","     */","    this.permissions = data.permissions;","","    /**","     * Whether or not the role is managed by an external service","     * @type {boolean}","     */","    this.managed = data.managed;","","    /**","     * Whether or not the role can be mentioned by anyone","     * @type {boolean}","     */","    this.mentionable = data.mentionable;","  }","","  /**","   * The timestamp the role was created at","   * @type {number}","   * @readonly","   */","  get createdTimestamp() {","    return (this.id / 4194304) + 1420070400000;","  }","","  /**","   * The time the role was created","   * @type {Date}","   * @readonly","   */","  get createdAt() {","    return new Date(this.createdTimestamp);","  }","","  /**","   * The hexadecimal version of the role color, with a leading hashtag.","   * @type {string}","   * @readonly","   */","  get hexColor() {","    let col = this.color.toString(16);","    while (col.length < 6) col = `0${col}`;","    return `#${col}`;","  }","","  /**","   * The cached guild members that have this role.","   * @type {Collection<string, GuildMember>}","   * @readonly","   */","  get members() {","    return this.guild.members.filter(m => m.roles.has(this.id));","  }","","  /**","   * Whether the role is editable by the client user.","   * @type {boolean}","   * @readonly","   */","  get editable() {","    if (this.managed) return false;","    const clientMember = this.guild.member(this.client.user);","    if (!clientMember.hasPermission(Constants.PermissionFlags.MANAGE_ROLES_OR_PERMISSIONS)) return false;","    return clientMember.highestRole.comparePositionTo(this) > 0;","  }","","  /**","   * Get an object mapping permission names to whether or not the role enables that permission","   * @returns {Object<string, boolean>}","   * @example","   * // print the serialized role","   * console.log(role.serialize());","   */","  serialize() {","    const serializedPermissions = {};","    for (const permissionName in Constants.PermissionFlags) {","      serializedPermissions[permissionName] = this.hasPermission(permissionName);","    }","    return serializedPermissions;","  }","","  /**","   * Checks if the role has a permission.","   * @param {PermissionResolvable} permission The permission to check for","   * @param {boolean} [explicit=false] Whether to require the role to explicitly have the exact permission","   * @returns {boolean}","   * @example","   * // see if a role can ban a member","   * if (role.hasPermission('BAN_MEMBERS')) {","   *   console.log('This role can ban members');","   * } else {","   *   console.log('This role can\\'t ban members');","   * }","   */","  hasPermission(permission, explicit = false) {","    permission = this.client.resolver.resolvePermission(permission);","    if (!explicit && (this.permissions & Constants.PermissionFlags.ADMINISTRATOR) > 0) return true;","    return (this.permissions & permission) > 0;","  }","","  /**","   * Checks if the role has all specified permissions.","   * @param {PermissionResolvable[]} permissions The permissions to check for","   * @param {boolean} [explicit=false] Whether to require the role to explicitly have the exact permissions","   * @returns {boolean}","   */","  hasPermissions(permissions, explicit = false) {","    return permissions.every(p => this.hasPermission(p, explicit));","  }","","  /**","   * Compares this role's position to another role's.","   * @param {Role} role Role to compare to this one","   * @returns {number} Negative number if the this role's position is lower (other role's is higher),","   * positive number if the this one is higher (other's is lower), 0 if equal","   */","  comparePositionTo(role) {","    return this.constructor.comparePositions(this, role);","  }","","  /**","   * The data for a role","   * @typedef {Object} RoleData","   * @property {string} [name] The name of the role","   * @property {number|string} [color] The color of the role, either a hex string or a base 10 number","   * @property {boolean} [hoist] Whether or not the role should be hoisted","   * @property {number} [position] The position of the role","   * @property {string[]} [permissions] The permissions of the role","   * @property {boolean} [mentionable] Whether or not the role should be mentionable","   */","","  /**","   * Edits the role","   * @param {RoleData} data The new data for the role","   * @returns {Promise<Role>}","   * @example","   * // edit a role","   * role.edit({name: 'new role'})","   *  .then(r => console.log(`Edited role ${r}`))","   *  .catch(console.error);","   */","  edit(data) {","    return this.client.rest.methods.updateGuildRole(this, data);","  }","","  /**","   * Set a new name for the role","   * @param {string} name The new name of the role","   * @returns {Promise<Role>}","   * @example","   * // set the name of the role","   * role.setName('new role')","   *  .then(r => console.log(`Edited name of role ${r}`))","   *  .catch(console.error);","   */","  setName(name) {","    return this.edit({ name });","  }","","  /**","   * Set a new color for the role","   * @param {number|string} color The new color for the role, either a hex string or a base 10 number","   * @returns {Promise<Role>}","   * @example","   * // set the color of a role","   * role.setColor('#FF0000')","   *  .then(r => console.log(`Set color of role ${r}`))","   *  .catch(console.error);","   */","  setColor(color) {","    return this.edit({ color });","  }","","  /**","   * Set whether or not the role should be hoisted","   * @param {boolean} hoist Whether or not to hoist the role","   * @returns {Promise<Role>}","   * @example","   * // set the hoist of the role","   * role.setHoist(true)","   *  .then(r => console.log(`Role hoisted: ${r.hoist}`))","   *  .catch(console.error);","   */","  setHoist(hoist) {","    return this.edit({ hoist });","  }","","  /**","   * Set the position of the role","   * @param {number} position The position of the role","   * @returns {Promise<Role>}","   * @example","   * // set the position of the role","   * role.setPosition(1)","   *  .then(r => console.log(`Role position: ${r.position}`))","   *  .catch(console.error);","   */","  setPosition(position) {","    return this.guild.setRolePosition(this, position).then(() => this);","  }","","  /**","   * Set the permissions of the role","   * @param {string[]} permissions The permissions of the role","   * @returns {Promise<Role>}","   * @example","   * // set the permissions of the role","   * role.setPermissions(['KICK_MEMBERS', 'BAN_MEMBERS'])","   *  .then(r => console.log(`Role updated ${r}`))","   *  .catch(console.error);","   */","  setPermissions(permissions) {","    return this.edit({ permissions });","  }","","  /**","   * Set whether this role is mentionable","   * @param {boolean} mentionable Whether this role should be mentionable","   * @returns {Promise<Role>}","   * @example","   * // make the role mentionable","   * role.setMentionable(true)","   *  .then(r => console.log(`Role updated ${r}`))","   *  .catch(console.error);","   */","  setMentionable(mentionable) {","    return this.edit({ mentionable });","  }","","  /**","   * Deletes the role","   * @returns {Promise<Role>}","   * @example","   * // delete a role","   * role.delete()","   *  .then(r => console.log(`Deleted role ${r}`))","   *  .catch(console.error);","   */","  delete() {","    return this.client.rest.methods.deleteGuildRole(this);","  }","","  /**","   * Whether this role equals another role. It compares all properties, so for most operations","   * it is advisable to just compare `role.id === role2.id` as it is much faster and is often","   * what most users need.","   * @param {Role} role Role to compare with","   * @returns {boolean}","   */","  equals(role) {","    return role &&","      this.id === role.id &&","      this.name === role.name &&","      this.color === role.color &&","      this.hoist === role.hoist &&","      this.position === role.position &&","      this.permissions === role.permissions &&","      this.managed === role.managed;","  }","","  /**","   * When concatenated with a string, this automatically concatenates the role mention rather than the Role object.","   * @returns {string}","   */","  toString() {","    if (this.id === this.guild.id) return '@everyone';","    return `<@&${this.id}>`;","  }","","  /**","   * Compares the positions of two roles.","   * @param {Role} role1 First role to compare","   * @param {Role} role2 Second role to compare","   * @returns {number} Negative number if the first role's position is lower (second role's is higher),","   * positive number if the first's is higher (second's is lower), 0 if equal","   */","  static comparePositions(role1, role2) {","    if (role1.position === role2.position) return role2.id - role1.id;","    return role1.position - role2.position;","  }","}","","module.exports = Role;",""],"l":{"1":1,"14":0,"20":0,"22":0,"30":0,"36":0,"42":0,"48":0,"54":0,"60":0,"66":0,"72":0,"81":0,"90":0,"99":0,"100":0,"101":0,"110":0,"119":0,"120":0,"121":0,"122":0,"133":0,"134":0,"135":0,"137":0,"154":0,"155":0,"156":0,"166":0,"176":0,"201":0,"215":0,"229":0,"243":0,"257":0,"271":0,"285":0,"298":0,"309":0,"324":0,"325":0,"336":0,"337":0,"341":1}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/PermissionOverwrites.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/PermissionOverwrites.js","s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":5,"loc":{"start":{"line":5,"column":13},"end":{"line":5,"column":34}}},"2":{"name":"(anonymous_2)","line":17,"loc":{"start":{"line":17,"column":7},"end":{"line":17,"column":14}}},"3":{"name":"(anonymous_3)","line":38,"loc":{"start":{"line":38,"column":8},"end":{"line":38,"column":11}}}},"statementMap":{"1":{"start":{"line":12,"column":4},"end":{"line":12,"column":68}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":31}},"3":{"start":{"line":14,"column":14},"end":{"line":14,"column":31}},"4":{"start":{"line":22,"column":4},"end":{"line":22,"column":22}},"5":{"start":{"line":28,"column":4},"end":{"line":28,"column":26}},"6":{"start":{"line":30,"column":4},"end":{"line":30,"column":26}},"7":{"start":{"line":31,"column":4},"end":{"line":31,"column":28}},"8":{"start":{"line":39,"column":4},"end":{"line":39,"column":77}},"9":{"start":{"line":43,"column":0},"end":{"line":43,"column":38}}},"branchMap":{"1":{"line":14,"type":"if","locations":[{"start":{"line":14,"column":4},"end":{"line":14,"column":4}},{"start":{"line":14,"column":4},"end":{"line":14,"column":4}}]}},"code":["/**"," * Represents a permission overwrite for a role or member in a guild channel."," */","class PermissionOverwrites {","  constructor(guildChannel, data) {","    /**","     * The GuildChannel this overwrite is for","     * @name PermissionOverwrites#channel","     * @type {GuildChannel}","     * @readonly","     */","    Object.defineProperty(this, 'channel', { value: guildChannel });","","    if (data) this.setup(data);","  }","","  setup(data) {","    /**","     * The ID of this overwrite, either a user ID or a role ID","     * @type {string}","     */","    this.id = data.id;","","    /**","     * The type of this overwrite","     * @type {string}","     */","    this.type = data.type;","","    this.deny = data.deny;","    this.allow = data.allow;","  }","","  /**","   * Delete this Permission Overwrite.","   * @returns {Promise<PermissionOverwrites>}","   */","  delete() {","    return this.channel.client.rest.methods.deletePermissionOverwrites(this);","  }","}","","module.exports = PermissionOverwrites;",""],"l":{"12":0,"14":0,"22":0,"28":0,"30":0,"31":0,"39":0,"43":1}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/GuildMember.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/GuildMember.js","s":{"1":2,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0},"fnMap":{"1":{"name":"(anonymous_1)","line":13,"loc":{"start":{"line":13,"column":13},"end":{"line":13,"column":27}}},"2":{"name":"(anonymous_2)","line":44,"loc":{"start":{"line":44,"column":7},"end":{"line":44,"column":14}}},"3":{"name":"(anonymous_3)","line":108,"loc":{"start":{"line":108,"column":14},"end":{"line":108,"column":17}}},"4":{"name":"(anonymous_4)","line":117,"loc":{"start":{"line":117,"column":14},"end":{"line":117,"column":17}}},"5":{"name":"(anonymous_5)","line":126,"loc":{"start":{"line":126,"column":11},"end":{"line":126,"column":14}}},"6":{"name":"(anonymous_6)","line":145,"loc":{"start":{"line":145,"column":17},"end":{"line":145,"column":20}}},"7":{"name":"(anonymous_7)","line":154,"loc":{"start":{"line":154,"column":10},"end":{"line":154,"column":13}}},"8":{"name":"(anonymous_8)","line":163,"loc":{"start":{"line":163,"column":10},"end":{"line":163,"column":13}}},"9":{"name":"(anonymous_9)","line":172,"loc":{"start":{"line":172,"column":18},"end":{"line":172,"column":21}}},"10":{"name":"(anonymous_10)","line":181,"loc":{"start":{"line":181,"column":8},"end":{"line":181,"column":11}}},"11":{"name":"(anonymous_11)","line":190,"loc":{"start":{"line":190,"column":17},"end":{"line":190,"column":20}}},"12":{"name":"(anonymous_12)","line":199,"loc":{"start":{"line":199,"column":17},"end":{"line":199,"column":20}}},"13":{"name":"(anonymous_13)","line":217,"loc":{"start":{"line":217,"column":14},"end":{"line":217,"column":17}}},"14":{"name":"(anonymous_14)","line":230,"loc":{"start":{"line":230,"column":14},"end":{"line":230,"column":17}}},"15":{"name":"(anonymous_15)","line":243,"loc":{"start":{"line":243,"column":15},"end":{"line":243,"column":25}}},"16":{"name":"(anonymous_16)","line":255,"loc":{"start":{"line":255,"column":15},"end":{"line":255,"column":46}}},"17":{"name":"(anonymous_17)","line":266,"loc":{"start":{"line":266,"column":16},"end":{"line":266,"column":48}}},"18":{"name":"(anonymous_18)","line":277,"loc":{"start":{"line":277,"column":20},"end":{"line":277,"column":52}}},"19":{"name":"(anonymous_19)","line":286,"loc":{"start":{"line":286,"column":6},"end":{"line":286,"column":13}}},"20":{"name":"(anonymous_20)","line":295,"loc":{"start":{"line":295,"column":9},"end":{"line":295,"column":16}}},"21":{"name":"(anonymous_21)","line":304,"loc":{"start":{"line":304,"column":9},"end":{"line":304,"column":16}}},"22":{"name":"(anonymous_22)","line":313,"loc":{"start":{"line":313,"column":17},"end":{"line":313,"column":27}}},"23":{"name":"(anonymous_23)","line":322,"loc":{"start":{"line":322,"column":10},"end":{"line":322,"column":18}}},"24":{"name":"(anonymous_24)","line":331,"loc":{"start":{"line":331,"column":9},"end":{"line":331,"column":16}}},"25":{"name":"(anonymous_25)","line":341,"loc":{"start":{"line":341,"column":10},"end":{"line":341,"column":18}}},"26":{"name":"(anonymous_26)","line":357,"loc":{"start":{"line":357,"column":12},"end":{"line":357,"column":19}}},"27":{"name":"(anonymous_27)","line":367,"loc":{"start":{"line":367,"column":13},"end":{"line":367,"column":21}}},"28":{"name":"(anonymous_28)","line":388,"loc":{"start":{"line":388,"column":13},"end":{"line":388,"column":20}}},"29":{"name":"(anonymous_29)","line":396,"loc":{"start":{"line":396,"column":10},"end":{"line":396,"column":13}}},"30":{"name":"(anonymous_30)","line":404,"loc":{"start":{"line":404,"column":6},"end":{"line":404,"column":9}}},"31":{"name":"(anonymous_31)","line":417,"loc":{"start":{"line":417,"column":5},"end":{"line":417,"column":22}}},"32":{"name":"(anonymous_32)","line":428,"loc":{"start":{"line":428,"column":10},"end":{"line":428,"column":13}}},"33":{"name":"(anonymous_33)","line":433,"loc":{"start":{"line":433,"column":6},"end":{"line":433,"column":9}}},"34":{"name":"(anonymous_34)","line":434,"loc":{"start":{"line":434,"column":13},"end":{"line":434,"column":16}}},"35":{"name":"(anonymous_35)","line":435,"loc":{"start":{"line":435,"column":11},"end":{"line":435,"column":14}}},"36":{"name":"(anonymous_36)","line":436,"loc":{"start":{"line":436,"column":10},"end":{"line":436,"column":13}}},"37":{"name":"(anonymous_37)","line":437,"loc":{"start":{"line":437,"column":10},"end":{"line":437,"column":13}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":65}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":31}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":63}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":47}},"5":{"start":{"line":5,"column":0},"end":{"line":5,"column":49}},"6":{"start":{"line":6,"column":0},"end":{"line":6,"column":48}},"7":{"start":{"line":20,"column":4},"end":{"line":20,"column":67}},"8":{"start":{"line":26,"column":4},"end":{"line":26,"column":23}},"9":{"start":{"line":32,"column":4},"end":{"line":32,"column":19}},"10":{"start":{"line":34,"column":4},"end":{"line":34,"column":21}},"11":{"start":{"line":35,"column":4},"end":{"line":35,"column":31}},"12":{"start":{"line":35,"column":14},"end":{"line":35,"column":31}},"13":{"start":{"line":41,"column":4},"end":{"line":41,"column":30}},"14":{"start":{"line":49,"column":4},"end":{"line":49,"column":32}},"15":{"start":{"line":55,"column":4},"end":{"line":55,"column":32}},"16":{"start":{"line":61,"column":4},"end":{"line":61,"column":35}},"17":{"start":{"line":67,"column":4},"end":{"line":67,"column":35}},"18":{"start":{"line":73,"column":4},"end":{"line":73,"column":42}},"19":{"start":{"line":79,"column":4},"end":{"line":79,"column":42}},"20":{"start":{"line":85,"column":4},"end":{"line":85,"column":26}},"21":{"start":{"line":91,"column":4},"end":{"line":91,"column":38}},"22":{"start":{"line":97,"column":4},"end":{"line":97,"column":62}},"23":{"start":{"line":99,"column":4},"end":{"line":99,"column":26}},"24":{"start":{"line":100,"column":4},"end":{"line":100,"column":29}},"25":{"start":{"line":109,"column":4},"end":{"line":109,"column":42}},"26":{"start":{"line":118,"column":4},"end":{"line":118,"column":86}},"27":{"start":{"line":127,"column":4},"end":{"line":127,"column":34}},"28":{"start":{"line":128,"column":4},"end":{"line":128,"column":61}},"29":{"start":{"line":130,"column":4},"end":{"line":130,"column":62}},"30":{"start":{"line":130,"column":22},"end":{"line":130,"column":62}},"31":{"start":{"line":132,"column":4},"end":{"line":135,"column":5}},"32":{"start":{"line":133,"column":6},"end":{"line":133,"column":48}},"33":{"start":{"line":134,"column":6},"end":{"line":134,"column":40}},"34":{"start":{"line":134,"column":16},"end":{"line":134,"column":40}},"35":{"start":{"line":137,"column":4},"end":{"line":137,"column":16}},"36":{"start":{"line":146,"column":4},"end":{"line":146,"column":102}},"37":{"start":{"line":146,"column":45},"end":{"line":146,"column":100}},"38":{"start":{"line":155,"column":4},"end":{"line":155,"column":44}},"39":{"start":{"line":164,"column":4},"end":{"line":164,"column":44}},"40":{"start":{"line":173,"column":4},"end":{"line":173,"column":56}},"41":{"start":{"line":182,"column":4},"end":{"line":182,"column":24}},"42":{"start":{"line":191,"column":4},"end":{"line":191,"column":47}},"43":{"start":{"line":200,"column":4},"end":{"line":200,"column":110}},"44":{"start":{"line":200,"column":45},"end":{"line":200,"column":110}},"45":{"start":{"line":202,"column":4},"end":{"line":202,"column":24}},"46":{"start":{"line":203,"column":4},"end":{"line":203,"column":29}},"47":{"start":{"line":204,"column":4},"end":{"line":204,"column":71}},"48":{"start":{"line":204,"column":39},"end":{"line":204,"column":71}},"49":{"start":{"line":206,"column":4},"end":{"line":206,"column":81}},"50":{"start":{"line":207,"column":4},"end":{"line":207,"column":55}},"51":{"start":{"line":207,"column":15},"end":{"line":207,"column":55}},"52":{"start":{"line":209,"column":4},"end":{"line":209,"column":55}},"53":{"start":{"line":218,"column":4},"end":{"line":218,"column":58}},"54":{"start":{"line":218,"column":45},"end":{"line":218,"column":58}},"55":{"start":{"line":219,"column":4},"end":{"line":219,"column":59}},"56":{"start":{"line":219,"column":46},"end":{"line":219,"column":59}},"57":{"start":{"line":220,"column":4},"end":{"line":220,"column":61}},"58":{"start":{"line":221,"column":4},"end":{"line":221,"column":90}},"59":{"start":{"line":221,"column":77},"end":{"line":221,"column":90}},"60":{"start":{"line":222,"column":4},"end":{"line":222,"column":76}},"61":{"start":{"line":231,"column":4},"end":{"line":231,"column":58}},"62":{"start":{"line":231,"column":45},"end":{"line":231,"column":58}},"63":{"start":{"line":232,"column":4},"end":{"line":232,"column":59}},"64":{"start":{"line":232,"column":46},"end":{"line":232,"column":59}},"65":{"start":{"line":233,"column":4},"end":{"line":233,"column":61}},"66":{"start":{"line":234,"column":4},"end":{"line":234,"column":89}},"67":{"start":{"line":234,"column":76},"end":{"line":234,"column":89}},"68":{"start":{"line":235,"column":4},"end":{"line":235,"column":76}},"69":{"start":{"line":244,"column":4},"end":{"line":244,"column":59}},"70":{"start":{"line":245,"column":4},"end":{"line":245,"column":101}},"71":{"start":{"line":245,"column":36},"end":{"line":245,"column":101}},"72":{"start":{"line":246,"column":4},"end":{"line":246,"column":40}},"73":{"start":{"line":256,"column":4},"end":{"line":256,"column":70}},"74":{"start":{"line":256,"column":58},"end":{"line":256,"column":70}},"75":{"start":{"line":257,"column":4},"end":{"line":257,"column":71}},"76":{"start":{"line":257,"column":32},"end":{"line":257,"column":69}},"77":{"start":{"line":267,"column":4},"end":{"line":267,"column":70}},"78":{"start":{"line":267,"column":58},"end":{"line":267,"column":70}},"79":{"start":{"line":268,"column":4},"end":{"line":268,"column":67}},"80":{"start":{"line":268,"column":34},"end":{"line":268,"column":65}},"81":{"start":{"line":278,"column":4},"end":{"line":278,"column":69}},"82":{"start":{"line":278,"column":35},"end":{"line":278,"column":67}},"83":{"start":{"line":287,"column":4},"end":{"line":287,"column":66}},"84":{"start":{"line":296,"column":4},"end":{"line":296,"column":31}},"85":{"start":{"line":305,"column":4},"end":{"line":305,"column":31}},"86":{"start":{"line":314,"column":4},"end":{"line":314,"column":34}},"87":{"start":{"line":323,"column":4},"end":{"line":323,"column":32}},"88":{"start":{"line":332,"column":4},"end":{"line":332,"column":67}},"89":{"start":{"line":332,"column":33},"end":{"line":332,"column":67}},"90":{"start":{"line":333,"column":4},"end":{"line":333,"column":62}},"91":{"start":{"line":342,"column":4},"end":{"line":342,"column":17}},"92":{"start":{"line":343,"column":4},"end":{"line":348,"column":5}},"93":{"start":{"line":344,"column":6},"end":{"line":344,"column":37}},"94":{"start":{"line":345,"column":6},"end":{"line":345,"column":64}},"95":{"start":{"line":345,"column":41},"end":{"line":345,"column":64}},"96":{"start":{"line":347,"column":6},"end":{"line":347,"column":43}},"97":{"start":{"line":349,"column":4},"end":{"line":349,"column":42}},"98":{"start":{"line":358,"column":4},"end":{"line":358,"column":67}},"99":{"start":{"line":358,"column":33},"end":{"line":358,"column":67}},"100":{"start":{"line":359,"column":4},"end":{"line":359,"column":65}},"101":{"start":{"line":368,"column":4},"end":{"line":368,"column":41}},"102":{"start":{"line":369,"column":4},"end":{"line":379,"column":5}},"103":{"start":{"line":370,"column":6},"end":{"line":373,"column":7}},"104":{"start":{"line":371,"column":8},"end":{"line":371,"column":48}},"105":{"start":{"line":372,"column":8},"end":{"line":372,"column":50}},"106":{"start":{"line":372,"column":24},"end":{"line":372,"column":50}},"107":{"start":{"line":375,"column":6},"end":{"line":378,"column":7}},"108":{"start":{"line":376,"column":8},"end":{"line":376,"column":78}},"109":{"start":{"line":377,"column":8},"end":{"line":377,"column":50}},"110":{"start":{"line":377,"column":24},"end":{"line":377,"column":50}},"111":{"start":{"line":380,"column":4},"end":{"line":380,"column":42}},"112":{"start":{"line":389,"column":4},"end":{"line":389,"column":31}},"113":{"start":{"line":397,"column":4},"end":{"line":397,"column":56}},"114":{"start":{"line":405,"column":4},"end":{"line":405,"column":70}},"115":{"start":{"line":418,"column":4},"end":{"line":418,"column":81}},"116":{"start":{"line":429,"column":4},"end":{"line":429,"column":59}},"117":{"start":{"line":433,"column":11},"end":{"line":433,"column":18}},"118":{"start":{"line":434,"column":18},"end":{"line":434,"column":25}},"119":{"start":{"line":435,"column":16},"end":{"line":435,"column":23}},"120":{"start":{"line":436,"column":15},"end":{"line":436,"column":22}},"121":{"start":{"line":437,"column":15},"end":{"line":437,"column":22}},"122":{"start":{"line":440,"column":0},"end":{"line":440,"column":43}},"123":{"start":{"line":442,"column":0},"end":{"line":442,"column":29}}},"branchMap":{"1":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":4},"end":{"line":35,"column":4}},{"start":{"line":35,"column":4},"end":{"line":35,"column":4}}]},"2":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":20},"end":{"line":91,"column":29}},{"start":{"line":91,"column":33},"end":{"line":91,"column":37}}]},"3":{"line":118,"type":"binary-expr","locations":[{"start":{"line":118,"column":11},"end":{"line":118,"column":30}},{"start":{"line":118,"column":34},"end":{"line":118,"column":67}},{"start":{"line":118,"column":71},"end":{"line":118,"column":85}}]},"4":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":4},"end":{"line":130,"column":4}},{"start":{"line":130,"column":4},"end":{"line":130,"column":4}}]},"5":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":6},"end":{"line":134,"column":6}},{"start":{"line":134,"column":6},"end":{"line":134,"column":6}}]},"6":{"line":146,"type":"cond-expr","locations":[{"start":{"line":146,"column":89},"end":{"line":146,"column":93}},{"start":{"line":146,"column":96},"end":{"line":146,"column":100}}]},"7":{"line":146,"type":"binary-expr","locations":[{"start":{"line":146,"column":45},"end":{"line":146,"column":50}},{"start":{"line":146,"column":54},"end":{"line":146,"column":86}}]},"8":{"line":155,"type":"binary-expr","locations":[{"start":{"line":155,"column":11},"end":{"line":155,"column":24}},{"start":{"line":155,"column":28},"end":{"line":155,"column":43}}]},"9":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":11},"end":{"line":164,"column":24}},{"start":{"line":164,"column":28},"end":{"line":164,"column":43}}]},"10":{"line":191,"type":"binary-expr","locations":[{"start":{"line":191,"column":11},"end":{"line":191,"column":24}},{"start":{"line":191,"column":28},"end":{"line":191,"column":46}}]},"11":{"line":200,"type":"if","locations":[{"start":{"line":200,"column":4},"end":{"line":200,"column":4}},{"start":{"line":200,"column":4},"end":{"line":200,"column":4}}]},"12":{"line":207,"type":"if","locations":[{"start":{"line":207,"column":4},"end":{"line":207,"column":4}},{"start":{"line":207,"column":4},"end":{"line":207,"column":4}}]},"13":{"line":218,"type":"if","locations":[{"start":{"line":218,"column":4},"end":{"line":218,"column":4}},{"start":{"line":218,"column":4},"end":{"line":218,"column":4}}]},"14":{"line":219,"type":"if","locations":[{"start":{"line":219,"column":4},"end":{"line":219,"column":4}},{"start":{"line":219,"column":4},"end":{"line":219,"column":4}}]},"15":{"line":221,"type":"if","locations":[{"start":{"line":221,"column":4},"end":{"line":221,"column":4}},{"start":{"line":221,"column":4},"end":{"line":221,"column":4}}]},"16":{"line":231,"type":"if","locations":[{"start":{"line":231,"column":4},"end":{"line":231,"column":4}},{"start":{"line":231,"column":4},"end":{"line":231,"column":4}}]},"17":{"line":232,"type":"if","locations":[{"start":{"line":232,"column":4},"end":{"line":232,"column":4}},{"start":{"line":232,"column":4},"end":{"line":232,"column":4}}]},"18":{"line":234,"type":"if","locations":[{"start":{"line":234,"column":4},"end":{"line":234,"column":4}},{"start":{"line":234,"column":4},"end":{"line":234,"column":4}}]},"19":{"line":245,"type":"if","locations":[{"start":{"line":245,"column":4},"end":{"line":245,"column":4}},{"start":{"line":245,"column":4},"end":{"line":245,"column":4}}]},"20":{"line":245,"type":"binary-expr","locations":[{"start":{"line":245,"column":8},"end":{"line":245,"column":16}},{"start":{"line":245,"column":20},"end":{"line":245,"column":34}}]},"21":{"line":256,"type":"if","locations":[{"start":{"line":256,"column":4},"end":{"line":256,"column":4}},{"start":{"line":256,"column":4},"end":{"line":256,"column":4}}]},"22":{"line":256,"type":"binary-expr","locations":[{"start":{"line":256,"column":8},"end":{"line":256,"column":17}},{"start":{"line":256,"column":21},"end":{"line":256,"column":56}}]},"23":{"line":267,"type":"if","locations":[{"start":{"line":267,"column":4},"end":{"line":267,"column":4}},{"start":{"line":267,"column":4},"end":{"line":267,"column":4}}]},"24":{"line":267,"type":"binary-expr","locations":[{"start":{"line":267,"column":8},"end":{"line":267,"column":17}},{"start":{"line":267,"column":21},"end":{"line":267,"column":56}}]},"25":{"line":332,"type":"if","locations":[{"start":{"line":332,"column":4},"end":{"line":332,"column":4}},{"start":{"line":332,"column":4},"end":{"line":332,"column":4}}]},"26":{"line":343,"type":"if","locations":[{"start":{"line":343,"column":4},"end":{"line":343,"column":4}},{"start":{"line":343,"column":4},"end":{"line":343,"column":4}}]},"27":{"line":358,"type":"if","locations":[{"start":{"line":358,"column":4},"end":{"line":358,"column":4}},{"start":{"line":358,"column":4},"end":{"line":358,"column":4}}]},"28":{"line":369,"type":"if","locations":[{"start":{"line":369,"column":4},"end":{"line":369,"column":4}},{"start":{"line":369,"column":4},"end":{"line":369,"column":4}}]},"29":{"line":372,"type":"if","locations":[{"start":{"line":372,"column":8},"end":{"line":372,"column":8}},{"start":{"line":372,"column":8},"end":{"line":372,"column":8}}]},"30":{"line":376,"type":"cond-expr","locations":[{"start":{"line":376,"column":62},"end":{"line":376,"column":69}},{"start":{"line":376,"column":72},"end":{"line":376,"column":76}}]},"31":{"line":377,"type":"if","locations":[{"start":{"line":377,"column":8},"end":{"line":377,"column":8}},{"start":{"line":377,"column":8},"end":{"line":377,"column":8}}]},"32":{"line":429,"type":"cond-expr","locations":[{"start":{"line":429,"column":32},"end":{"line":429,"column":35}},{"start":{"line":429,"column":38},"end":{"line":429,"column":40}}]}},"code":["const TextBasedChannel = require('./interface/TextBasedChannel');","const Role = require('./Role');","const EvaluatedPermissions = require('./EvaluatedPermissions');","const Constants = require('../util/Constants');","const Collection = require('../util/Collection');","const Presence = require('./Presence').Presence;","","/**"," * Represents a member of a guild on Discord"," * @implements {TextBasedChannel}"," */","class GuildMember {","  constructor(guild, data) {","    /**","     * The Client that instantiated this GuildMember","     * @name GuildMember#client","     * @type {Client}","     * @readonly","     */","    Object.defineProperty(this, 'client', { value: guild.client });","","    /**","     * The guild that this member is part of","     * @type {Guild}","     */","    this.guild = guild;","","    /**","     * The user that this guild member instance Represents","     * @type {User}","     */","    this.user = {};","","    this._roles = [];","    if (data) this.setup(data);","","    /**","     * The ID of the last message sent by the member in their guild, if one was sent.","     * @type {?string}","     */","    this.lastMessageID = null;","  }","","  setup(data) {","    /**","     * Whether this member is deafened server-wide","     * @type {boolean}","     */","    this.serverDeaf = data.deaf;","","    /**","     * Whether this member is muted server-wide","     * @type {boolean}","     */","    this.serverMute = data.mute;","","    /**","     * Whether this member is self-muted","     * @type {boolean}","     */","    this.selfMute = data.self_mute;","","    /**","     * Whether this member is self-deafened","     * @type {boolean}","     */","    this.selfDeaf = data.self_deaf;","","    /**","     * The voice session ID of this member, if any","     * @type {?string}","     */","    this.voiceSessionID = data.session_id;","","    /**","     * The voice channel ID of this member, if any","     * @type {?string}","     */","    this.voiceChannelID = data.channel_id;","","    /**","     * Whether this member is speaking","     * @type {boolean}","     */","    this.speaking = false;","","    /**","     * The nickname of this guild member, if they have one","     * @type {?string}","     */","    this.nickname = data.nick || null;","","    /**","     * The timestamp the member joined the guild at","     * @type {number}","     */","    this.joinedTimestamp = new Date(data.joined_at).getTime();","","    this.user = data.user;","    this._roles = data.roles;","  }","","  /**","   * The time the member joined the guild","   * @type {Date}","   * @readonly","   */","  get joinedAt() {","    return new Date(this.joinedTimestamp);","  }","","  /**","   * The presence of this guild member","   * @type {Presence}","   * @readonly","   */","  get presence() {","    return this.frozenPresence || this.guild.presences.get(this.id) || new Presence();","  }","","  /**","   * A list of roles that are applied to this GuildMember, mapped by the role ID.","   * @type {Collection<string, Role>}","   * @readonly","   */","  get roles() {","    const list = new Collection();","    const everyoneRole = this.guild.roles.get(this.guild.id);","","    if (everyoneRole) list.set(everyoneRole.id, everyoneRole);","","    for (const roleID of this._roles) {","      const role = this.guild.roles.get(roleID);","      if (role) list.set(role.id, role);","    }","","    return list;","  }","","  /**","   * The role of the member with the highest position.","   * @type {Role}","   * @readonly","   */","  get highestRole() {","    return this.roles.reduce((prev, role) => !prev || role.comparePositionTo(prev) > 0 ? role : prev);","  }","","  /**","   * Whether this member is muted in any way","   * @type {boolean}","   * @readonly","   */","  get mute() {","    return this.selfMute || this.serverMute;","  }","","  /**","   * Whether this member is deafened in any way","   * @type {boolean}","   * @readonly","   */","  get deaf() {","    return this.selfDeaf || this.serverDeaf;","  }","","  /**","   * The voice channel this member is in, if any","   * @type {?VoiceChannel}","   * @readonly","   */","  get voiceChannel() {","    return this.guild.channels.get(this.voiceChannelID);","  }","","  /**","   * The ID of this user","   * @type {string}","   * @readonly","   */","  get id() {","    return this.user.id;","  }","","  /**","   * The nickname of the member, or their username if they don't have one","   * @type {string}","   * @readonly","   */","  get displayName() {","    return this.nickname || this.user.username;","  }","","  /**","   * The overall set of permissions for the guild member, taking only roles into account","   * @type {EvaluatedPermissions}","   * @readonly","   */","  get permissions() {","    if (this.user.id === this.guild.ownerID) return new EvaluatedPermissions(this, Constants.ALL_PERMISSIONS);","","    let permissions = 0;","    const roles = this.roles;","    for (const role of roles.values()) permissions |= role.permissions;","","    const admin = Boolean(permissions & Constants.PermissionFlags.ADMINISTRATOR);","    if (admin) permissions = Constants.ALL_PERMISSIONS;","","    return new EvaluatedPermissions(this, permissions);","  }","","  /**","   * Whether the member is kickable by the client user.","   * @type {boolean}","   * @readonly","   */","  get kickable() {","    if (this.user.id === this.guild.ownerID) return false;","    if (this.user.id === this.client.user.id) return false;","    const clientMember = this.guild.member(this.client.user);","    if (!clientMember.hasPermission(Constants.PermissionFlags.KICK_MEMBERS)) return false;","    return clientMember.highestRole.comparePositionTo(this.highestRole) > 0;","  }","","  /**","   * Whether the member is bannable by the client user.","   * @type {boolean}","   * @readonly","   */","  get bannable() {","    if (this.user.id === this.guild.ownerID) return false;","    if (this.user.id === this.client.user.id) return false;","    const clientMember = this.guild.member(this.client.user);","    if (!clientMember.hasPermission(Constants.PermissionFlags.BAN_MEMBERS)) return false;","    return clientMember.highestRole.comparePositionTo(this.highestRole) > 0;","  }","","  /**","   * Returns `channel.permissionsFor(guildMember)`. Returns evaluated permissions for a member in a guild channel.","   * @param {ChannelResolvable} channel Guild channel to use as context","   * @returns {?EvaluatedPermissions}","   */","  permissionsIn(channel) {","    channel = this.client.resolver.resolveChannel(channel);","    if (!channel || !channel.guild) throw new Error('Could not resolve channel to a guild channel.');","    return channel.permissionsFor(this);","  }","","  /**","   * Checks if any of the member's roles have a permission.","   * @param {PermissionResolvable} permission The permission to check for","   * @param {boolean} [explicit=false] Whether to require the roles to explicitly have the exact permission","   * @returns {boolean}","   */","  hasPermission(permission, explicit = false) {","    if (!explicit && this.user.id === this.guild.ownerID) return true;","    return this.roles.some(r => r.hasPermission(permission, explicit));","  }","","  /**","   * Checks whether the roles of the member allows them to perform specific actions.","   * @param {PermissionResolvable[]} permissions The permissions to check for","   * @param {boolean} [explicit=false] Whether to require the member to explicitly have the exact permissions","   * @returns {boolean}","   */","  hasPermissions(permissions, explicit = false) {","    if (!explicit && this.user.id === this.guild.ownerID) return true;","    return permissions.every(p => this.hasPermission(p, explicit));","  }","","  /**","   * Checks whether the roles of the member allows them to perform specific actions, and lists any missing permissions.","   * @param {PermissionResolvable[]} permissions The permissions to check for","   * @param {boolean} [explicit=false] Whether to require the member to explicitly have the exact permissions","   * @returns {PermissionResolvable[]}","   */","  missingPermissions(permissions, explicit = false) {","    return permissions.filter(p => !this.hasPermission(p, explicit));","  }","","  /**","   * Edit a guild member","   * @param {GuildmemberEditData} data The data to edit the member with","   * @returns {Promise<GuildMember>}","   */","  edit(data) {","    return this.client.rest.methods.updateGuildMember(this, data);","  }","","  /**","   * Mute/unmute a user","   * @param {boolean} mute Whether or not the member should be muted","   * @returns {Promise<GuildMember>}","   */","  setMute(mute) {","    return this.edit({ mute });","  }","","  /**","   * Deafen/undeafen a user","   * @param {boolean} deaf Whether or not the member should be deafened","   * @returns {Promise<GuildMember>}","   */","  setDeaf(deaf) {","    return this.edit({ deaf });","  }","","  /**","   * Moves the guild member to the given channel.","   * @param {ChannelResolvable} channel The channel to move the member to","   * @returns {Promise<GuildMember>}","   */","  setVoiceChannel(channel) {","    return this.edit({ channel });","  }","","  /**","   * Sets the roles applied to the member.","   * @param {Collection<string, Role>|Role[]|string[]} roles The roles or role IDs to apply","   * @returns {Promise<GuildMember>}","   */","  setRoles(roles) {","    return this.edit({ roles });","  }","","  /**","   * Adds a single role to the member.","   * @param {Role|string} role The role or ID of the role to add","   * @returns {Promise<GuildMember>}","   */","  addRole(role) {","    if (!(role instanceof Role)) role = this.guild.roles.get(role);","    return this.client.rest.methods.addMemberRole(this, role);","  }","","  /**","   * Adds multiple roles to the member.","   * @param {Collection<string, Role>|Role[]|string[]} roles The roles or role IDs to add","   * @returns {Promise<GuildMember>}","   */","  addRoles(roles) {","    let allRoles;","    if (roles instanceof Collection) {","      allRoles = this._roles.slice();","      for (const role of roles.values()) allRoles.push(role.id);","    } else {","      allRoles = this._roles.concat(roles);","    }","    return this.edit({ roles: allRoles });","  }","","  /**","   * Removes a single role from the member.","   * @param {Role|string} role The role or ID of the role to remove","   * @returns {Promise<GuildMember>}","   */","  removeRole(role) {","    if (!(role instanceof Role)) role = this.guild.roles.get(role);","    return this.client.rest.methods.removeMemberRole(this, role);","  }","","  /**","   * Removes multiple roles from the member.","   * @param {Collection<string, Role>|Role[]|string[]} roles The roles or role IDs to remove","   * @returns {Promise<GuildMember>}","   */","  removeRoles(roles) {","    const allRoles = this._roles.slice();","    if (roles instanceof Collection) {","      for (const role of roles.values()) {","        const index = allRoles.indexOf(role.id);","        if (index >= 0) allRoles.splice(index, 1);","      }","    } else {","      for (const role of roles) {","        const index = allRoles.indexOf(role instanceof Role ? role.id : role);","        if (index >= 0) allRoles.splice(index, 1);","      }","    }","    return this.edit({ roles: allRoles });","  }","","  /**","   * Set the nickname for the guild member","   * @param {string} nick The nickname for the guild member","   * @returns {Promise<GuildMember>}","   */","  setNickname(nick) {","    return this.edit({ nick });","  }","","  /**","   * Deletes any DMs with this guild member","   * @returns {Promise<DMChannel>}","   */","  deleteDM() {","    return this.client.rest.methods.deleteChannel(this);","  }","","  /**","   * Kick this member from the guild","   * @returns {Promise<GuildMember>}","   */","  kick() {","    return this.client.rest.methods.kickGuildMember(this.guild, this);","  }","","  /**","   * Ban this guild member","   * @param {number} [deleteDays=0] The amount of days worth of messages from this member that should","   * also be deleted. Between `0` and `7`.","   * @returns {Promise<GuildMember>}","   * @example","   * // ban a guild member","   * guildMember.ban(7);","   */","  ban(deleteDays = 0) {","    return this.client.rest.methods.banGuildMember(this.guild, this, deleteDays);","  }","","  /**","   * When concatenated with a string, this automatically concatenates the user's mention instead of the Member object.","   * @returns {string}","   * @example","   * // logs: Hello from <@123456789>!","   * console.log(`Hello from ${member}!`);","   */","  toString() {","    return `<@${this.nickname ? '!' : ''}${this.user.id}>`;","  }","","  // These are here only for documentation purposes - they are implemented by TextBasedChannel","  send() { return; }","  sendMessage() { return; }","  sendEmbed() { return; }","  sendFile() { return; }","  sendCode() { return; }","}","","TextBasedChannel.applyToClass(GuildMember);","","module.exports = GuildMember;",""],"l":{"1":2,"2":0,"3":0,"4":0,"5":0,"6":0,"20":0,"26":0,"32":0,"34":0,"35":0,"41":0,"49":0,"55":0,"61":0,"67":0,"73":0,"79":0,"85":0,"91":0,"97":0,"99":0,"100":0,"109":0,"118":0,"127":0,"128":0,"130":0,"132":0,"133":0,"134":0,"137":0,"146":0,"155":0,"164":0,"173":0,"182":0,"191":0,"200":0,"202":0,"203":0,"204":0,"206":0,"207":0,"209":0,"218":0,"219":0,"220":0,"221":0,"222":0,"231":0,"232":0,"233":0,"234":0,"235":0,"244":0,"245":0,"246":0,"256":0,"257":0,"267":0,"268":0,"278":0,"287":0,"296":0,"305":0,"314":0,"323":0,"332":0,"333":0,"342":0,"343":0,"344":0,"345":0,"347":0,"349":0,"358":0,"359":0,"368":0,"369":0,"370":0,"371":0,"372":0,"375":0,"376":0,"377":0,"380":0,"389":0,"397":0,"405":0,"418":0,"429":0,"433":0,"434":0,"435":0,"436":0,"437":0,"440":0,"442":0}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/Invite.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/Invite.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"(anonymous_1)","line":31,"loc":{"start":{"line":31,"column":13},"end":{"line":31,"column":28}}},"2":{"name":"(anonymous_2)","line":43,"loc":{"start":{"line":43,"column":7},"end":{"line":43,"column":14}}},"3":{"name":"(anonymous_3)","line":108,"loc":{"start":{"line":108,"column":15},"end":{"line":108,"column":18}}},"4":{"name":"(anonymous_4)","line":117,"loc":{"start":{"line":117,"column":22},"end":{"line":117,"column":25}}},"5":{"name":"(anonymous_5)","line":126,"loc":{"start":{"line":126,"column":15},"end":{"line":126,"column":18}}},"6":{"name":"(anonymous_6)","line":135,"loc":{"start":{"line":135,"column":9},"end":{"line":135,"column":12}}},"7":{"name":"(anonymous_7)","line":143,"loc":{"start":{"line":143,"column":8},"end":{"line":143,"column":11}}},"8":{"name":"(anonymous_8)","line":154,"loc":{"start":{"line":154,"column":10},"end":{"line":154,"column":13}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":47}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":61}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":47}},"4":{"start":{"line":38,"column":4},"end":{"line":38,"column":61}},"5":{"start":{"line":40,"column":4},"end":{"line":40,"column":21}},"6":{"start":{"line":49,"column":4},"end":{"line":49,"column":100}},"7":{"start":{"line":55,"column":4},"end":{"line":55,"column":26}},"8":{"start":{"line":61,"column":4},"end":{"line":61,"column":36}},"9":{"start":{"line":67,"column":4},"end":{"line":67,"column":31}},"10":{"start":{"line":73,"column":4},"end":{"line":73,"column":26}},"11":{"start":{"line":79,"column":4},"end":{"line":79,"column":33}},"12":{"start":{"line":81,"column":4},"end":{"line":87,"column":5}},"13":{"start":{"line":86,"column":6},"end":{"line":86,"column":67}},"14":{"start":{"line":94,"column":4},"end":{"line":94,"column":115}},"15":{"start":{"line":100,"column":4},"end":{"line":100,"column":64}},"16":{"start":{"line":109,"column":4},"end":{"line":109,"column":43}},"17":{"start":{"line":118,"column":4},"end":{"line":118,"column":56}},"18":{"start":{"line":127,"column":4},"end":{"line":127,"column":43}},"19":{"start":{"line":136,"column":4},"end":{"line":136,"column":53}},"20":{"start":{"line":144,"column":4},"end":{"line":144,"column":55}},"21":{"start":{"line":155,"column":4},"end":{"line":155,"column":20}},"22":{"start":{"line":159,"column":0},"end":{"line":159,"column":24}}},"branchMap":{"1":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":17},"end":{"line":49,"column":54}},{"start":{"line":49,"column":58},"end":{"line":49,"column":99}}]},"2":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":4},"end":{"line":81,"column":4}},{"start":{"line":81,"column":4},"end":{"line":81,"column":4}}]},"3":{"line":94,"type":"binary-expr","locations":[{"start":{"line":94,"column":19},"end":{"line":94,"column":60}},{"start":{"line":94,"column":64},"end":{"line":94,"column":114}}]}},"code":["const PartialGuild = require('./PartialGuild');","const PartialGuildChannel = require('./PartialGuildChannel');","const Constants = require('../util/Constants');","","/*","{ max_age: 86400,","  code: 'CG9A5',","  guild:","   { splash: null,","     id: '123123123',","     icon: '123123123',","     name: 'name' },","  created_at: '2016-08-28T19:07:04.763368+00:00',","  temporary: false,","  uses: 0,","  max_uses: 0,","  inviter:","   { username: '123',","     discriminator: '4204',","     bot: true,","     id: '123123123',","     avatar: '123123123' },","  channel: { type: 0, id: '123123', name: 'heavy-testing' } }","*/","","/**"," * Represents an invitation to a guild channel."," * <warn>The only guaranteed properties are `code`, `guild` and `channel`. Other properties can be missing.</warn>"," */","class Invite {","  constructor(client, data) {","    /**","     * The client that instantiated the invite","     * @name Invite#client","     * @type {Client}","     * @readonly","     */","    Object.defineProperty(this, 'client', { value: client });","","    this.setup(data);","  }","","  setup(data) {","    /**","     * The guild the invite is for. If this guild is already known, this will be a Guild object. If the guild is","     * unknown, this will be a PartialGuild object.","     * @type {Guild|PartialGuild}","     */","    this.guild = this.client.guilds.get(data.guild.id) || new PartialGuild(this.client, data.guild);","","    /**","     * The code for this invite","     * @type {string}","     */","    this.code = data.code;","","    /**","     * Whether or not this invite is temporary","     * @type {boolean}","     */","    this.temporary = data.temporary;","","    /**","     * The maximum age of the invite, in seconds","     * @type {?number}","     */","    this.maxAge = data.max_age;","","    /**","     * How many times this invite has been used","     * @type {number}","     */","    this.uses = data.uses;","","    /**","     * The maximum uses of this invite","     * @type {number}","     */","    this.maxUses = data.max_uses;","","    if (data.inviter) {","      /**","       * The user who created this invite","       * @type {User}","       */","      this.inviter = this.client.dataManager.newUser(data.inviter);","    }","","    /**","     * The channel the invite is for. If this channel is already known, this will be a GuildChannel object.","     * If the channel is unknown, this will be a PartialGuildChannel object.","     * @type {GuildChannel|PartialGuildChannel}","     */","    this.channel = this.client.channels.get(data.channel.id) || new PartialGuildChannel(this.client, data.channel);","","    /**","     * The timestamp the invite was created at","     * @type {number}","     */","    this.createdTimestamp = new Date(data.created_at).getTime();","  }","","  /**","   * The time the invite was created","   * @type {Date}","   * @readonly","   */","  get createdAt() {","    return new Date(this.createdTimestamp);","  }","","  /**","   * The timestamp the invite will expire at","   * @type {number}","   * @readonly","   */","  get expiresTimestamp() {","    return this.createdTimestamp + (this.maxAge * 1000);","  }","","  /**","   * The time the invite will expire","   * @type {Date}","   * @readonly","   */","  get expiresAt() {","    return new Date(this.expiresTimestamp);","  }","","  /**","   * The URL to the invite","   * @type {string}","   * @readonly","   */","  get url() {","    return Constants.Endpoints.inviteLink(this.code);","  }","","  /**","   * Deletes this invite","   * @returns {Promise<Invite>}","   */","  delete() {","    return this.client.rest.methods.deleteInvite(this);","  }","","  /**","   * When concatenated with a string, this automatically concatenates the invite's URL instead of the object.","   * @returns {string}","   * @example","   * // logs: Invite: https://discord.gg/A1b2C3","   * console.log(`Invite: ${invite}`);","   */","  toString() {","    return this.url;","  }","}","","module.exports = Invite;",""],"l":{"1":1,"2":1,"3":1,"38":0,"40":0,"49":0,"55":0,"61":0,"67":0,"73":0,"79":0,"81":0,"86":0,"94":0,"100":0,"109":0,"118":0,"127":0,"136":0,"144":0,"155":0,"159":1}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/PartialGuild.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/PartialGuild.js","s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":1},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":13},"end":{"line":12,"column":28}}},"2":{"name":"(anonymous_2)","line":24,"loc":{"start":{"line":24,"column":7},"end":{"line":24,"column":14}}}},"statementMap":{"1":{"start":{"line":19,"column":4},"end":{"line":19,"column":61}},"2":{"start":{"line":21,"column":4},"end":{"line":21,"column":21}},"3":{"start":{"line":29,"column":4},"end":{"line":29,"column":22}},"4":{"start":{"line":35,"column":4},"end":{"line":35,"column":26}},"5":{"start":{"line":41,"column":4},"end":{"line":41,"column":26}},"6":{"start":{"line":47,"column":4},"end":{"line":47,"column":30}},"7":{"start":{"line":51,"column":0},"end":{"line":51,"column":30}}},"branchMap":{},"code":["/*","{ splash: null,","     id: '123123123',","     icon: '123123123',","     name: 'name' }","*/","","/**"," * Represents a guild that the client only has limited information for - e.g. from invites."," */","class PartialGuild {","  constructor(client, data) {","    /**","     * The Client that instantiated this PartialGuild","     * @name PartialGuild#client","     * @type {Client}","     * @readonly","     */","    Object.defineProperty(this, 'client', { value: client });","","    this.setup(data);","  }","","  setup(data) {","    /**","     * The ID of this guild","     * @type {string}","     */","    this.id = data.id;","","    /**","     * The name of this guild","     * @type {string}","     */","    this.name = data.name;","","    /**","     * The hash of this guild's icon, or null if there is none.","     * @type {?string}","     */","    this.icon = data.icon;","","    /**","     * The hash of the guild splash image, or null if no splash (VIP only)","     * @type {?string}","     */","    this.splash = data.splash;","  }","}","","module.exports = PartialGuild;",""],"l":{"19":0,"21":0,"29":0,"35":0,"41":0,"47":0,"51":1}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/PartialGuildChannel.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/PartialGuildChannel.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":1},"b":{"1":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":11,"loc":{"start":{"line":11,"column":13},"end":{"line":11,"column":28}}},"2":{"name":"(anonymous_2)","line":23,"loc":{"start":{"line":23,"column":7},"end":{"line":23,"column":14}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":47}},"2":{"start":{"line":18,"column":4},"end":{"line":18,"column":61}},"3":{"start":{"line":20,"column":4},"end":{"line":20,"column":21}},"4":{"start":{"line":28,"column":4},"end":{"line":28,"column":22}},"5":{"start":{"line":34,"column":4},"end":{"line":34,"column":26}},"6":{"start":{"line":40,"column":4},"end":{"line":40,"column":77}},"7":{"start":{"line":44,"column":0},"end":{"line":44,"column":37}}},"branchMap":{"1":{"line":40,"type":"cond-expr","locations":[{"start":{"line":40,"column":60},"end":{"line":40,"column":66}},{"start":{"line":40,"column":69},"end":{"line":40,"column":76}}]}},"code":["const Constants = require('../util/Constants');","","/*","{ type: 0, id: '123123', name: 'heavy-testing' } }","*/","","/**"," * Represents a guild channel that the client only has limited information for - e.g. from invites."," */","class PartialGuildChannel {","  constructor(client, data) {","    /**","     * The Client that instantiated this PartialGuildChannel","     * @name PartialGuildChannel#client","     * @type {Client}","     * @readonly","     */","    Object.defineProperty(this, 'client', { value: client });","","    this.setup(data);","  }","","  setup(data) {","    /**","     * The ID of this guild channel","     * @type {string}","     */","    this.id = data.id;","","    /**","     * The name of this guild channel","     * @type {string}","     */","    this.name = data.name;","","    /**","     * The type of this guild channel - `text` or `voice`","     * @type {string}","     */","    this.type = Constants.ChannelTypes.text === data.type ? 'text' : 'voice';","  }","}","","module.exports = PartialGuildChannel;",""],"l":{"1":1,"18":0,"20":0,"28":0,"34":0,"40":0,"44":1}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/MessageCollector.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/MessageCollector.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":35,"loc":{"start":{"line":35,"column":13},"end":{"line":35,"column":45}}},"2":{"name":"(anonymous_2)","line":79,"loc":{"start":{"line":79,"column":8},"end":{"line":79,"column":18}}},"3":{"name":"(anonymous_3)","line":103,"loc":{"start":{"line":103,"column":10},"end":{"line":103,"column":13}}},"4":{"name":"(anonymous_4)","line":134,"loc":{"start":{"line":134,"column":6},"end":{"line":134,"column":24}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":52}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":49}},"3":{"start":{"line":36,"column":4},"end":{"line":36,"column":12}},"4":{"start":{"line":42,"column":4},"end":{"line":42,"column":27}},"5":{"start":{"line":48,"column":4},"end":{"line":48,"column":25}},"6":{"start":{"line":54,"column":4},"end":{"line":54,"column":27}},"7":{"start":{"line":60,"column":4},"end":{"line":60,"column":23}},"8":{"start":{"line":66,"column":4},"end":{"line":66,"column":38}},"9":{"start":{"line":68,"column":4},"end":{"line":68,"column":52}},"10":{"start":{"line":68,"column":31},"end":{"line":68,"column":51}},"11":{"start":{"line":69,"column":4},"end":{"line":69,"column":53}},"12":{"start":{"line":70,"column":4},"end":{"line":70,"column":92}},"13":{"start":{"line":70,"column":22},"end":{"line":70,"column":92}},"14":{"start":{"line":70,"column":59},"end":{"line":70,"column":76}},"15":{"start":{"line":80,"column":4},"end":{"line":80,"column":84}},"16":{"start":{"line":80,"column":71},"end":{"line":80,"column":84}},"17":{"start":{"line":81,"column":4},"end":{"line":93,"column":5}},"18":{"start":{"line":82,"column":6},"end":{"line":82,"column":46}},"19":{"start":{"line":89,"column":6},"end":{"line":89,"column":42}},"20":{"start":{"line":90,"column":6},"end":{"line":91,"column":96}},"21":{"start":{"line":90,"column":58},"end":{"line":90,"column":84}},"22":{"start":{"line":91,"column":11},"end":{"line":91,"column":96}},"23":{"start":{"line":91,"column":77},"end":{"line":91,"column":96}},"24":{"start":{"line":92,"column":6},"end":{"line":92,"column":18}},"25":{"start":{"line":94,"column":4},"end":{"line":94,"column":17}},"26":{"start":{"line":104,"column":4},"end":{"line":127,"column":7}},"27":{"start":{"line":105,"column":6},"end":{"line":108,"column":7}},"28":{"start":{"line":106,"column":8},"end":{"line":106,"column":31}},"29":{"start":{"line":107,"column":8},"end":{"line":107,"column":15}},"30":{"start":{"line":110,"column":6},"end":{"line":113,"column":8}},"31":{"start":{"line":111,"column":8},"end":{"line":111,"column":50}},"32":{"start":{"line":112,"column":8},"end":{"line":112,"column":42}},"33":{"start":{"line":115,"column":6},"end":{"line":118,"column":8}},"34":{"start":{"line":116,"column":8},"end":{"line":116,"column":18}},"35":{"start":{"line":117,"column":8},"end":{"line":117,"column":25}},"36":{"start":{"line":120,"column":6},"end":{"line":123,"column":8}},"37":{"start":{"line":121,"column":8},"end":{"line":121,"column":18}},"38":{"start":{"line":122,"column":8},"end":{"line":122,"column":24}},"39":{"start":{"line":125,"column":6},"end":{"line":125,"column":38}},"40":{"start":{"line":126,"column":6},"end":{"line":126,"column":30}},"41":{"start":{"line":135,"column":4},"end":{"line":135,"column":27}},"42":{"start":{"line":135,"column":20},"end":{"line":135,"column":27}},"43":{"start":{"line":136,"column":4},"end":{"line":136,"column":22}},"44":{"start":{"line":137,"column":4},"end":{"line":137,"column":65}},"45":{"start":{"line":147,"column":4},"end":{"line":147,"column":45}},"46":{"start":{"line":151,"column":0},"end":{"line":151,"column":34}}},"branchMap":{"1":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":4},"end":{"line":70,"column":4}},{"start":{"line":70,"column":4},"end":{"line":70,"column":4}}]},"2":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":4},"end":{"line":80,"column":4}},{"start":{"line":80,"column":4},"end":{"line":80,"column":4}}]},"3":{"line":80,"type":"cond-expr","locations":[{"start":{"line":80,"column":23},"end":{"line":80,"column":61}},{"start":{"line":80,"column":64},"end":{"line":80,"column":69}}]},"4":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":4},"end":{"line":81,"column":4}},{"start":{"line":81,"column":4},"end":{"line":81,"column":4}}]},"5":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":6},"end":{"line":90,"column":6}},{"start":{"line":90,"column":6},"end":{"line":90,"column":6}}]},"6":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":11},"end":{"line":91,"column":11}},{"start":{"line":91,"column":11},"end":{"line":91,"column":11}}]},"7":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":15},"end":{"line":91,"column":31}},{"start":{"line":91,"column":35},"end":{"line":91,"column":75}}]},"8":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":6},"end":{"line":105,"column":6}},{"start":{"line":105,"column":6},"end":{"line":105,"column":6}}]},"9":{"line":135,"type":"if","locations":[{"start":{"line":135,"column":4},"end":{"line":135,"column":4}},{"start":{"line":135,"column":4},"end":{"line":135,"column":4}}]}},"code":["const EventEmitter = require('events').EventEmitter;","const Collection = require('../util/Collection');","","/**"," * Collects messages based on a specified filter, then emits them."," * @extends {EventEmitter}"," */","class MessageCollector extends EventEmitter {","  /**","   * A function that takes a Message object and a MessageCollector and returns a boolean.","   * ```js","   * function(message, collector) {","   *  if (message.content.includes('discord')) {","   *    return true; // passed the filter test","   *  }","   *  return false; // failed the filter test","   * }","   * ```","   * @typedef {Function} CollectorFilterFunction","   */","","  /**","   * An object containing options used to configure a MessageCollector. All properties are optional.","   * @typedef {Object} CollectorOptions","   * @property {number} [time] Duration for the collector in milliseconds","   * @property {number} [max] Maximum number of messages to handle","   * @property {number} [maxMatches] Maximum number of successfully filtered messages to obtain","   */","","  /**","   * @param {Channel} channel The channel to collect messages in","   * @param {CollectorFilterFunction} filter The filter function","   * @param {CollectorOptions} [options] Options for the collector","   */","  constructor(channel, filter, options = {}) {","    super();","","    /**","     * The channel this collector is operating on","     * @type {Channel}","     */","    this.channel = channel;","","    /**","     * A function used to filter messages that the collector collects.","     * @type {CollectorFilterFunction}","     */","    this.filter = filter;","","    /**","     * Options for the collecor.","     * @type {CollectorOptions}","     */","    this.options = options;","","    /**","     * Whether this collector has stopped collecting messages.","     * @type {boolean}","     */","    this.ended = false;","","    /**","     * A collection of collected messages, mapped by message ID.","     * @type {Collection<string, Message>}","     */","    this.collected = new Collection();","","    this.listener = message => this.verify(message);","    this.channel.client.on('message', this.listener);","    if (options.time) this.channel.client.setTimeout(() => this.stop('time'), options.time);","  }","","  /**","   * Verifies a message against the filter and options","   * @private","   * @param {Message} message The message","   * @returns {boolean}","   */","  verify(message) {","    if (this.channel ? this.channel.id !== message.channel.id : false) return false;","    if (this.filter(message, this)) {","      this.collected.set(message.id, message);","      /**","       * Emitted whenever the collector receives a message that passes the filter test.","       * @param {Message} message The received message","       * @param {MessageCollector} collector The collector the message passed through","       * @event MessageCollector#message","       */","      this.emit('message', message, this);","      if (this.collected.size >= this.options.maxMatches) this.stop('matchesLimit');","      else if (this.options.max && this.collected.size === this.options.max) this.stop('limit');","      return true;","    }","    return false;","  }","","  /**","   * Returns a promise that resolves when a valid message is sent. Rejects","   * with collected messages if the Collector ends before receiving a message.","   * @type {Promise<Message>}","   * @readonly","   */","  get next() {","    return new Promise((resolve, reject) => {","      if (this.ended) {","        reject(this.collected);","        return;","      }","","      const cleanup = () => {","        this.removeListener('message', onMessage);","        this.removeListener('end', onEnd);","      };","","      const onMessage = (...args) => {","        cleanup();","        resolve(...args);","      };","","      const onEnd = (...args) => {","        cleanup();","        reject(...args);","      };","","      this.once('message', onMessage);","      this.once('end', onEnd);","    });","  }","","  /**","   * Stops the collector and emits `end`.","   * @param {string} [reason='user'] An optional reason for stopping the collector","   */","  stop(reason = 'user') {","    if (this.ended) return;","    this.ended = true;","    this.channel.client.removeListener('message', this.listener);","    /**","     * Emitted when the Collector stops collecting.","     * @param {Collection<string, Message>} collection A collection of messages collected","     * during the lifetime of the collector, mapped by the ID of the messages.","     * @param {string} reason The reason for the end of the collector. If it ended because it reached the specified time","     * limit, this would be `time`. If you invoke `.stop()` without specifying a reason, this would be `user`. If it","     * ended because it reached its message limit, it will be `limit`.","     * @event MessageCollector#end","     */","    this.emit('end', this.collected, reason);","  }","}","","module.exports = MessageCollector;",""],"l":{"1":1,"2":1,"36":0,"42":0,"48":0,"54":0,"60":0,"66":0,"68":0,"69":0,"70":0,"80":0,"81":0,"82":0,"89":0,"90":0,"91":0,"92":0,"94":0,"104":0,"105":0,"106":0,"107":0,"110":0,"111":0,"112":0,"115":0,"116":0,"117":0,"120":0,"121":0,"122":0,"125":0,"126":0,"135":0,"136":0,"137":0,"147":0,"151":1}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/OAuth2Application.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/OAuth2Application.js","s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":5,"loc":{"start":{"line":5,"column":13},"end":{"line":5,"column":28}}},"2":{"name":"(anonymous_2)","line":17,"loc":{"start":{"line":17,"column":7},"end":{"line":17,"column":14}}},"3":{"name":"(anonymous_3)","line":60,"loc":{"start":{"line":60,"column":22},"end":{"line":60,"column":25}}},"4":{"name":"(anonymous_4)","line":69,"loc":{"start":{"line":69,"column":15},"end":{"line":69,"column":18}}},"5":{"name":"(anonymous_5)","line":77,"loc":{"start":{"line":77,"column":10},"end":{"line":77,"column":13}}}},"statementMap":{"1":{"start":{"line":12,"column":4},"end":{"line":12,"column":61}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":21}},"3":{"start":{"line":22,"column":4},"end":{"line":22,"column":22}},"4":{"start":{"line":28,"column":4},"end":{"line":28,"column":26}},"5":{"start":{"line":34,"column":4},"end":{"line":34,"column":40}},"6":{"start":{"line":40,"column":4},"end":{"line":40,"column":26}},"7":{"start":{"line":46,"column":4},"end":{"line":46,"column":86}},"8":{"start":{"line":52,"column":4},"end":{"line":52,"column":39}},"9":{"start":{"line":61,"column":4},"end":{"line":61,"column":47}},"10":{"start":{"line":70,"column":4},"end":{"line":70,"column":43}},"11":{"start":{"line":78,"column":4},"end":{"line":78,"column":21}},"12":{"start":{"line":82,"column":0},"end":{"line":82,"column":35}}},"branchMap":{},"code":["/**"," * Represents an OAuth2 Application"," */","class OAuth2Application {","  constructor(client, data) {","    /**","     * The client that instantiated the application","     * @name OAuth2Application#client","     * @type {Client}","     * @readonly","     */","    Object.defineProperty(this, 'client', { value: client });","","    this.setup(data);","  }","","  setup(data) {","    /**","     * The ID of the app","     * @type {string}","     */","    this.id = data.id;","","    /**","     * The name of the app","     * @type {string}","     */","    this.name = data.name;","","    /**","     * The app's description","     * @type {string}","     */","    this.description = data.description;","","    /**","     * The app's icon hash","     * @type {string}","     */","    this.icon = data.icon;","","    /**","     * The app's icon URL","     * @type {string}","     */","    this.iconURL = `https://cdn.discordapp.com/app-icons/${this.id}/${this.icon}.jpg`;","","    /**","     * The app's RPC origins","     * @type {Array<string>}","     */","    this.rpcOrigins = data.rpc_origins;","  }","","  /**","   * The timestamp the app was created at","   * @type {number}","   * @readonly","   */","  get createdTimestamp() {","    return (this.id / 4194304) + 1420070400000;","  }","","  /**","   * The time the app was created","   * @type {Date}","   * @readonly","   */","  get createdAt() {","    return new Date(this.createdTimestamp);","  }","","  /**","   * When concatenated with a string, this automatically concatenates the app name rather than the app object.","   * @returns {string}","   */","  toString() {","    return this.name;","  }","}","","module.exports = OAuth2Application;",""],"l":{"12":0,"14":0,"22":0,"28":0,"34":0,"40":0,"46":0,"52":0,"61":0,"70":0,"78":0,"82":1}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/Presence.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/Presence.js","s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0,0],"8":[0,0],"9":[0,0,0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":5,"loc":{"start":{"line":5,"column":13},"end":{"line":5,"column":25}}},"2":{"name":"(anonymous_2)","line":24,"loc":{"start":{"line":24,"column":8},"end":{"line":24,"column":15}}},"3":{"name":"(anonymous_3)","line":34,"loc":{"start":{"line":34,"column":8},"end":{"line":34,"column":19}}},"4":{"name":"(anonymous_4)","line":47,"loc":{"start":{"line":47,"column":13},"end":{"line":47,"column":20}}},"5":{"name":"(anonymous_5)","line":72,"loc":{"start":{"line":72,"column":15},"end":{"line":72,"column":18}}},"6":{"name":"(anonymous_6)","line":81,"loc":{"start":{"line":81,"column":8},"end":{"line":81,"column":15}}}},"statementMap":{"1":{"start":{"line":15,"column":4},"end":{"line":15,"column":43}},"2":{"start":{"line":21,"column":4},"end":{"line":21,"column":55}},"3":{"start":{"line":25,"column":4},"end":{"line":25,"column":45}},"4":{"start":{"line":26,"column":4},"end":{"line":26,"column":55}},"5":{"start":{"line":35,"column":4},"end":{"line":39,"column":6}},"6":{"start":{"line":52,"column":4},"end":{"line":52,"column":26}},"7":{"start":{"line":58,"column":4},"end":{"line":58,"column":26}},"8":{"start":{"line":64,"column":4},"end":{"line":64,"column":32}},"9":{"start":{"line":73,"column":4},"end":{"line":73,"column":27}},"10":{"start":{"line":82,"column":4},"end":{"line":87,"column":6}},"11":{"start":{"line":91,"column":0},"end":{"line":91,"column":28}},"12":{"start":{"line":92,"column":0},"end":{"line":92,"column":20}}},"branchMap":{"1":{"line":15,"type":"binary-expr","locations":[{"start":{"line":15,"column":18},"end":{"line":15,"column":29}},{"start":{"line":15,"column":33},"end":{"line":15,"column":42}}]},"2":{"line":21,"type":"cond-expr","locations":[{"start":{"line":21,"column":28},"end":{"line":21,"column":47}},{"start":{"line":21,"column":50},"end":{"line":21,"column":54}}]},"3":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":18},"end":{"line":25,"column":29}},{"start":{"line":25,"column":33},"end":{"line":25,"column":44}}]},"4":{"line":26,"type":"cond-expr","locations":[{"start":{"line":26,"column":28},"end":{"line":26,"column":47}},{"start":{"line":26,"column":50},"end":{"line":26,"column":54}}]},"5":{"line":35,"type":"binary-expr","locations":[{"start":{"line":35,"column":11},"end":{"line":35,"column":28}},{"start":{"line":36,"column":6},"end":{"line":38,"column":66}}]},"6":{"line":36,"type":"cond-expr","locations":[{"start":{"line":38,"column":18},"end":{"line":38,"column":49}},{"start":{"line":38,"column":52},"end":{"line":38,"column":66}}]},"7":{"line":36,"type":"binary-expr","locations":[{"start":{"line":36,"column":6},"end":{"line":36,"column":14}},{"start":{"line":37,"column":6},"end":{"line":37,"column":37}},{"start":{"line":38,"column":6},"end":{"line":38,"column":15}}]},"8":{"line":64,"type":"binary-expr","locations":[{"start":{"line":64,"column":15},"end":{"line":64,"column":23}},{"start":{"line":64,"column":27},"end":{"line":64,"column":31}}]},"9":{"line":82,"type":"binary-expr","locations":[{"start":{"line":82,"column":11},"end":{"line":82,"column":24}},{"start":{"line":83,"column":6},"end":{"line":83,"column":10}},{"start":{"line":84,"column":6},"end":{"line":84,"column":29}},{"start":{"line":85,"column":6},"end":{"line":85,"column":29}},{"start":{"line":86,"column":6},"end":{"line":86,"column":27}}]}},"code":["/**"," * Represents a user's presence"," */","class Presence {","  constructor(data = {}) {","    /**","     * The status of the presence:","     *","     * * **`online`** - user is online","     * * **`offline`** - user is offline or invisible","     * * **`idle`** - user is AFK","     * * **`dnd`** - user is in Do not Disturb","     * @type {string}","     */","    this.status = data.status || 'offline';","","    /**","     * The game that the user is playing, `null` if they aren't playing a game.","     * @type {?Game}","     */","    this.game = data.game ? new Game(data.game) : null;","  }","","  update(data) {","    this.status = data.status || this.status;","    this.game = data.game ? new Game(data.game) : null;","  }","","  /**","   * Whether this presence is equal to another","   * @param {Presence} presence Presence to compare with","   * @returns {boolean}","   */","  equals(presence) {","    return this === presence || (","      presence &&","      this.status === presence.status &&","      this.game ? this.game.equals(presence.game) : !presence.game","    );","  }","}","","/**"," * Represents a game that is part of a user's presence."," */","class Game {","  constructor(data) {","    /**","     * The name of the game being played","     * @type {string}","     */","    this.name = data.name;","","    /**","     * The type of the game status","     * @type {number}","     */","    this.type = data.type;","","    /**","     * If the game is being streamed, a link to the stream","     * @type {?string}","     */","    this.url = data.url || null;","  }","","  /**","   * Whether or not the game is being streamed","   * @type {boolean}","   * @readonly","   */","  get streaming() {","    return this.type === 1;","  }","","  /**","   * Whether this game is equal to another game","   * @param {Game} game Game to compare with","   * @returns {boolean}","   */","  equals(game) {","    return this === game || (","      game &&","      this.name === game.name &&","      this.type === game.type &&","      this.url === game.url","    );","  }","}","","exports.Presence = Presence;","exports.Game = Game;",""],"l":{"15":0,"21":0,"25":0,"26":0,"35":0,"52":0,"58":0,"64":0,"73":0,"82":0,"91":1,"92":1}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/RichEmbed.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/RichEmbed.js","s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":1,"60":1,"61":0,"62":0,"63":0,"64":0,"65":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":6,"loc":{"start":{"line":6,"column":13},"end":{"line":6,"column":25}}},"2":{"name":"(anonymous_2)","line":73,"loc":{"start":{"line":73,"column":10},"end":{"line":73,"column":18}}},"3":{"name":"(anonymous_3)","line":85,"loc":{"start":{"line":85,"column":16},"end":{"line":85,"column":30}}},"4":{"name":"(anonymous_4)","line":97,"loc":{"start":{"line":97,"column":8},"end":{"line":97,"column":14}}},"5":{"name":"(anonymous_5)","line":107,"loc":{"start":{"line":107,"column":10},"end":{"line":107,"column":18}}},"6":{"name":"(anonymous_6)","line":132,"loc":{"start":{"line":132,"column":11},"end":{"line":132,"column":29}}},"7":{"name":"(anonymous_7)","line":142,"loc":{"start":{"line":142,"column":14},"end":{"line":142,"column":39}}},"8":{"name":"(anonymous_8)","line":154,"loc":{"start":{"line":154,"column":10},"end":{"line":154,"column":40}}},"9":{"name":"(anonymous_9)","line":169,"loc":{"start":{"line":169,"column":14},"end":{"line":169,"column":20}}},"10":{"name":"(anonymous_10)","line":179,"loc":{"start":{"line":179,"column":10},"end":{"line":179,"column":16}}},"11":{"name":"(anonymous_11)","line":190,"loc":{"start":{"line":190,"column":11},"end":{"line":190,"column":24}}},"12":{"name":"resolveString","line":200,"loc":{"start":{"line":200,"column":0},"end":{"line":200,"column":29}}}},"statementMap":{"1":{"start":{"line":11,"column":4},"end":{"line":11,"column":28}},"2":{"start":{"line":17,"column":4},"end":{"line":17,"column":40}},"3":{"start":{"line":23,"column":4},"end":{"line":23,"column":24}},"4":{"start":{"line":29,"column":4},"end":{"line":29,"column":28}},"5":{"start":{"line":35,"column":4},"end":{"line":35,"column":30}},"6":{"start":{"line":41,"column":4},"end":{"line":41,"column":36}},"7":{"start":{"line":47,"column":4},"end":{"line":47,"column":36}},"8":{"start":{"line":53,"column":4},"end":{"line":53,"column":36}},"9":{"start":{"line":59,"column":4},"end":{"line":59,"column":28}},"10":{"start":{"line":65,"column":4},"end":{"line":65,"column":30}},"11":{"start":{"line":74,"column":4},"end":{"line":74,"column":33}},"12":{"start":{"line":75,"column":4},"end":{"line":75,"column":100}},"13":{"start":{"line":75,"column":28},"end":{"line":75,"column":100}},"14":{"start":{"line":76,"column":4},"end":{"line":76,"column":23}},"15":{"start":{"line":77,"column":4},"end":{"line":77,"column":16}},"16":{"start":{"line":86,"column":4},"end":{"line":86,"column":45}},"17":{"start":{"line":87,"column":4},"end":{"line":87,"column":114}},"18":{"start":{"line":87,"column":35},"end":{"line":87,"column":114}},"19":{"start":{"line":88,"column":4},"end":{"line":88,"column":35}},"20":{"start":{"line":89,"column":4},"end":{"line":89,"column":16}},"21":{"start":{"line":98,"column":4},"end":{"line":98,"column":19}},"22":{"start":{"line":99,"column":4},"end":{"line":99,"column":16}},"23":{"start":{"line":108,"column":4},"end":{"line":108,"column":19}},"24":{"start":{"line":109,"column":4},"end":{"line":114,"column":5}},"25":{"start":{"line":110,"column":6},"end":{"line":110,"column":60}},"26":{"start":{"line":111,"column":11},"end":{"line":114,"column":5}},"27":{"start":{"line":112,"column":6},"end":{"line":112,"column":17}},"28":{"start":{"line":113,"column":6},"end":{"line":113,"column":37}},"29":{"start":{"line":115,"column":4},"end":{"line":115,"column":35}},"30":{"start":{"line":116,"column":4},"end":{"line":120,"column":5}},"31":{"start":{"line":117,"column":6},"end":{"line":117,"column":96}},"32":{"start":{"line":118,"column":11},"end":{"line":120,"column":5}},"33":{"start":{"line":119,"column":6},"end":{"line":119,"column":76}},"34":{"start":{"line":121,"column":4},"end":{"line":121,"column":23}},"35":{"start":{"line":122,"column":4},"end":{"line":122,"column":16}},"36":{"start":{"line":133,"column":4},"end":{"line":133,"column":69}},"37":{"start":{"line":134,"column":4},"end":{"line":134,"column":16}},"38":{"start":{"line":143,"column":4},"end":{"line":143,"column":31}},"39":{"start":{"line":144,"column":4},"end":{"line":144,"column":16}},"40":{"start":{"line":155,"column":4},"end":{"line":155,"column":95}},"41":{"start":{"line":155,"column":34},"end":{"line":155,"column":95}},"42":{"start":{"line":156,"column":4},"end":{"line":156,"column":31}},"43":{"start":{"line":157,"column":4},"end":{"line":157,"column":104}},"44":{"start":{"line":157,"column":27},"end":{"line":157,"column":104}},"45":{"start":{"line":158,"column":4},"end":{"line":158,"column":33}},"46":{"start":{"line":159,"column":4},"end":{"line":159,"column":108}},"47":{"start":{"line":159,"column":29},"end":{"line":159,"column":108}},"48":{"start":{"line":160,"column":4},"end":{"line":160,"column":67}},"49":{"start":{"line":161,"column":4},"end":{"line":161,"column":16}},"50":{"start":{"line":170,"column":4},"end":{"line":170,"column":29}},"51":{"start":{"line":171,"column":4},"end":{"line":171,"column":16}},"52":{"start":{"line":180,"column":4},"end":{"line":180,"column":25}},"53":{"start":{"line":181,"column":4},"end":{"line":181,"column":16}},"54":{"start":{"line":191,"column":4},"end":{"line":191,"column":31}},"55":{"start":{"line":192,"column":4},"end":{"line":192,"column":106}},"56":{"start":{"line":192,"column":28},"end":{"line":192,"column":106}},"57":{"start":{"line":193,"column":4},"end":{"line":193,"column":43}},"58":{"start":{"line":194,"column":4},"end":{"line":194,"column":16}},"59":{"start":{"line":198,"column":0},"end":{"line":198,"column":27}},"60":{"start":{"line":200,"column":0},"end":{"line":204,"column":1}},"61":{"start":{"line":201,"column":2},"end":{"line":201,"column":44}},"62":{"start":{"line":201,"column":32},"end":{"line":201,"column":44}},"63":{"start":{"line":202,"column":2},"end":{"line":202,"column":52}},"64":{"start":{"line":202,"column":29},"end":{"line":202,"column":52}},"65":{"start":{"line":203,"column":2},"end":{"line":203,"column":22}}},"branchMap":{"1":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":18},"end":{"line":47,"column":29}},{"start":{"line":47,"column":33},"end":{"line":47,"column":35}}]},"2":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":4},"end":{"line":75,"column":4}},{"start":{"line":75,"column":4},"end":{"line":75,"column":4}}]},"3":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":4},"end":{"line":87,"column":4}},{"start":{"line":87,"column":4},"end":{"line":87,"column":4}}]},"4":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":4},"end":{"line":109,"column":4}},{"start":{"line":109,"column":4},"end":{"line":109,"column":4}}]},"5":{"line":111,"type":"if","locations":[{"start":{"line":111,"column":11},"end":{"line":111,"column":11}},{"start":{"line":111,"column":11},"end":{"line":111,"column":11}}]},"6":{"line":111,"type":"binary-expr","locations":[{"start":{"line":111,"column":15},"end":{"line":111,"column":40}},{"start":{"line":111,"column":44},"end":{"line":111,"column":65}}]},"7":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":4},"end":{"line":116,"column":4}},{"start":{"line":116,"column":4},"end":{"line":116,"column":4}}]},"8":{"line":116,"type":"binary-expr","locations":[{"start":{"line":116,"column":8},"end":{"line":116,"column":17}},{"start":{"line":116,"column":21},"end":{"line":116,"column":37}}]},"9":{"line":118,"type":"if","locations":[{"start":{"line":118,"column":11},"end":{"line":118,"column":11}},{"start":{"line":118,"column":11},"end":{"line":118,"column":11}}]},"10":{"line":118,"type":"binary-expr","locations":[{"start":{"line":118,"column":15},"end":{"line":118,"column":20}},{"start":{"line":118,"column":24},"end":{"line":118,"column":36}}]},"11":{"line":155,"type":"if","locations":[{"start":{"line":155,"column":4},"end":{"line":155,"column":4}},{"start":{"line":155,"column":4},"end":{"line":155,"column":4}}]},"12":{"line":157,"type":"if","locations":[{"start":{"line":157,"column":4},"end":{"line":157,"column":4}},{"start":{"line":157,"column":4},"end":{"line":157,"column":4}}]},"13":{"line":159,"type":"if","locations":[{"start":{"line":159,"column":4},"end":{"line":159,"column":4}},{"start":{"line":159,"column":4},"end":{"line":159,"column":4}}]},"14":{"line":192,"type":"if","locations":[{"start":{"line":192,"column":4},"end":{"line":192,"column":4}},{"start":{"line":192,"column":4},"end":{"line":192,"column":4}}]},"15":{"line":201,"type":"if","locations":[{"start":{"line":201,"column":2},"end":{"line":201,"column":2}},{"start":{"line":201,"column":2},"end":{"line":201,"column":2}}]},"16":{"line":202,"type":"if","locations":[{"start":{"line":202,"column":2},"end":{"line":202,"column":2}},{"start":{"line":202,"column":2},"end":{"line":202,"column":2}}]}},"code":["/**"," * A rich embed to be sent with a message"," * @param {Object} [data] Data to set in the rich embed"," */","class RichEmbed {","  constructor(data = {}) {","    /**","     * Title for this Embed","     * @type {string}","     */","    this.title = data.title;","","    /**","     * Description for this Embed","     * @type {string}","     */","    this.description = data.description;","","    /**","     * URL for this Embed","     * @type {string}","     */","    this.url = data.url;","","    /**","     * Color for this Embed","     * @type {number}","     */","    this.color = data.color;","","    /**","     * Author for this Embed","     * @type {Object}","     */","    this.author = data.author;","","    /**","     * Timestamp for this Embed","     * @type {Date}","     */","    this.timestamp = data.timestamp;","","    /**","     * Fields for this Embed","     * @type {Object[]}","     */","    this.fields = data.fields || [];","","    /**","     * Thumbnail for this Embed","     * @type {Object}","     */","    this.thumbnail = data.thumbnail;","","    /**","     * Image for this Embed","     * @type {Object}","     */","    this.image = data.image;","","    /**","     * Footer for this Embed","     * @type {Object}","     */","    this.footer = data.footer;","  }","","  /**","   * Sets the title of this embed","   * @param {StringResolvable} title The title","   * @returns {RichEmbed} This embed","   */","  setTitle(title) {","    title = resolveString(title);","    if (title.length > 256) throw new RangeError('RichEmbed titles may not exceed 256 characters.');","    this.title = title;","    return this;","  }","","  /**","   * Sets the description of this embed","   * @param {StringResolvable} description The description","   * @returns {RichEmbed} This embed","   */","  setDescription(description) {","    description = resolveString(description);","    if (description.length > 2048) throw new RangeError('RichEmbed descriptions may not exceed 2048 characters.');","    this.description = description;","    return this;","  }","","  /**","   * Sets the URL of this embed","   * @param {string} url The URL","   * @returns {RichEmbed} This embed","   */","  setURL(url) {","    this.url = url;","    return this;","  }","","  /**","   * Sets the color of this embed","   * @param {string|number|number[]} color The color to set","   * @returns {RichEmbed} This embed","   */","  setColor(color) {","    let radix = 10;","    if (color instanceof Array) {","      color = (color[0] << 16) + (color[1] << 8) + color[2];","    } else if (typeof color === 'string' && color.startsWith('#')) {","      radix = 16;","      color = color.replace('#', '');","    }","    color = parseInt(color, radix);","    if (color < 0 || color > 0xFFFFFF) {","      throw new RangeError('RichEmbed color must be within the range 0 - 16777215 (0xFFFFFF).');","    } else if (color && isNaN(color)) {","      throw new TypeError('Unable to convert RichEmbed color to a number.');","    }","    this.color = color;","    return this;","  }","","  /**","   * Sets the author of this embed","   * @param {StringResolvable} name The name of the author","   * @param {string} [icon] The icon URL of the author","   * @param {string} [url] The URL of the author","   * @returns {RichEmbed} This embed","   */","  setAuthor(name, icon, url) {","    this.author = { name: resolveString(name), icon_url: icon, url };","    return this;","  }","","  /**","   * Sets the timestamp of this embed","   * @param {Date} [timestamp=current date] The timestamp","   * @returns {RichEmbed} This embed","   */","  setTimestamp(timestamp = new Date()) {","    this.timestamp = timestamp;","    return this;","  }","","  /**","   * Adds a field to the embed (max 25)","   * @param {StringResolvable} name The name of the field","   * @param {StringResolvable} value The value of the field","   * @param {boolean} [inline=false] Set the field to display inline","   * @returns {RichEmbed} This embed","   */","  addField(name, value, inline = false) {","    if (this.fields.length >= 25) throw new RangeError('RichEmbeds may not exceed 25 fields.');","    name = resolveString(name);","    if (name.length > 256) throw new RangeError('RichEmbed field names may not exceed 256 characters.');","    value = resolveString(value);","    if (value.length > 1024) throw new RangeError('RichEmbed field values may not exceed 1024 characters.');","    this.fields.push({ name: String(name), value: value, inline });","    return this;","  }","","  /**","   * Set the thumbnail of this embed","   * @param {string} url The URL of the thumbnail","   * @returns {RichEmbed} This embed","   */","  setThumbnail(url) {","    this.thumbnail = { url };","    return this;","  }","","  /**","   * Set the image of this embed","   * @param {string} url The URL of the thumbnail","   * @returns {RichEmbed} This embed","   */","  setImage(url) {","    this.image = { url };","    return this;","  }","","  /**","   * Sets the footer of this embed","   * @param {StringResolvable} text The text of the footer","   * @param {string} [icon] The icon URL of the footer","   * @returns {RichEmbed} This embed","   */","  setFooter(text, icon) {","    text = resolveString(text);","    if (text.length > 2048) throw new RangeError('RichEmbed footer text may not exceed 2048 characters.');","    this.footer = { text, icon_url: icon };","    return this;","  }","}","","module.exports = RichEmbed;","","function resolveString(data) {","  if (typeof data === 'string') return data;","  if (data instanceof Array) return data.join('\\n');","  return String(data);","}",""],"l":{"11":0,"17":0,"23":0,"29":0,"35":0,"41":0,"47":0,"53":0,"59":0,"65":0,"74":0,"75":0,"76":0,"77":0,"86":0,"87":0,"88":0,"89":0,"98":0,"99":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"115":0,"116":0,"117":0,"118":0,"119":0,"121":0,"122":0,"133":0,"134":0,"143":0,"144":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"170":0,"171":0,"180":0,"181":0,"191":0,"192":0,"193":0,"194":0,"198":1,"200":1,"201":0,"202":0,"203":0}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/TextChannel.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/TextChannel.js","s":{"1":2,"2":2,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},"fnMap":{"1":{"name":"(anonymous_1)","line":11,"loc":{"start":{"line":11,"column":13},"end":{"line":11,"column":27}}},"2":{"name":"(anonymous_2)","line":18,"loc":{"start":{"line":18,"column":7},"end":{"line":18,"column":14}}},"3":{"name":"(anonymous_3)","line":35,"loc":{"start":{"line":35,"column":13},"end":{"line":35,"column":16}}},"4":{"name":"(anonymous_4)","line":49,"loc":{"start":{"line":49,"column":15},"end":{"line":49,"column":18}}},"5":{"name":"(anonymous_5)","line":63,"loc":{"start":{"line":63,"column":15},"end":{"line":63,"column":30}}},"6":{"name":"(anonymous_6)","line":76,"loc":{"start":{"line":76,"column":6},"end":{"line":76,"column":9}}},"7":{"name":"(anonymous_7)","line":77,"loc":{"start":{"line":77,"column":13},"end":{"line":77,"column":16}}},"8":{"name":"(anonymous_8)","line":78,"loc":{"start":{"line":78,"column":11},"end":{"line":78,"column":14}}},"9":{"name":"(anonymous_9)","line":79,"loc":{"start":{"line":79,"column":10},"end":{"line":79,"column":13}}},"10":{"name":"(anonymous_10)","line":80,"loc":{"start":{"line":80,"column":10},"end":{"line":80,"column":13}}},"11":{"name":"(anonymous_11)","line":81,"loc":{"start":{"line":81,"column":14},"end":{"line":81,"column":17}}},"12":{"name":"(anonymous_12)","line":82,"loc":{"start":{"line":82,"column":15},"end":{"line":82,"column":18}}},"13":{"name":"(anonymous_13)","line":83,"loc":{"start":{"line":83,"column":21},"end":{"line":83,"column":24}}},"14":{"name":"(anonymous_14)","line":84,"loc":{"start":{"line":84,"column":13},"end":{"line":84,"column":16}}},"15":{"name":"(anonymous_15)","line":85,"loc":{"start":{"line":85,"column":12},"end":{"line":85,"column":15}}},"16":{"name":"(anonymous_16)","line":86,"loc":{"start":{"line":86,"column":12},"end":{"line":86,"column":15}}},"17":{"name":"(anonymous_17)","line":87,"loc":{"start":{"line":87,"column":17},"end":{"line":87,"column":20}}},"18":{"name":"(anonymous_18)","line":88,"loc":{"start":{"line":88,"column":17},"end":{"line":88,"column":20}}},"19":{"name":"(anonymous_19)","line":89,"loc":{"start":{"line":89,"column":15},"end":{"line":89,"column":18}}},"20":{"name":"(anonymous_20)","line":90,"loc":{"start":{"line":90,"column":12},"end":{"line":90,"column":15}}},"21":{"name":"(anonymous_21)","line":91,"loc":{"start":{"line":91,"column":15},"end":{"line":91,"column":18}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":47}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":65}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":49}},"4":{"start":{"line":12,"column":4},"end":{"line":12,"column":23}},"5":{"start":{"line":13,"column":4},"end":{"line":13,"column":23}},"6":{"start":{"line":14,"column":4},"end":{"line":14,"column":37}},"7":{"start":{"line":15,"column":4},"end":{"line":15,"column":29}},"8":{"start":{"line":19,"column":4},"end":{"line":19,"column":22}},"9":{"start":{"line":25,"column":4},"end":{"line":25,"column":28}},"10":{"start":{"line":27,"column":4},"end":{"line":27,"column":46}},"11":{"start":{"line":36,"column":4},"end":{"line":36,"column":37}},"12":{"start":{"line":37,"column":4},"end":{"line":41,"column":5}},"13":{"start":{"line":38,"column":6},"end":{"line":40,"column":7}},"14":{"start":{"line":39,"column":8},"end":{"line":39,"column":39}},"15":{"start":{"line":42,"column":4},"end":{"line":42,"column":19}},"16":{"start":{"line":50,"column":4},"end":{"line":50,"column":61}},"17":{"start":{"line":64,"column":4},"end":{"line":72,"column":7}},"18":{"start":{"line":65,"column":6},"end":{"line":71,"column":7}},"19":{"start":{"line":66,"column":8},"end":{"line":66,"column":76}},"20":{"start":{"line":68,"column":8},"end":{"line":70,"column":10}},"21":{"start":{"line":69,"column":11},"end":{"line":69,"column":76}},"22":{"start":{"line":76,"column":11},"end":{"line":76,"column":18}},"23":{"start":{"line":77,"column":18},"end":{"line":77,"column":25}},"24":{"start":{"line":78,"column":16},"end":{"line":78,"column":23}},"25":{"start":{"line":79,"column":15},"end":{"line":79,"column":22}},"26":{"start":{"line":80,"column":15},"end":{"line":80,"column":22}},"27":{"start":{"line":81,"column":19},"end":{"line":81,"column":26}},"28":{"start":{"line":82,"column":20},"end":{"line":82,"column":27}},"29":{"start":{"line":83,"column":26},"end":{"line":83,"column":33}},"30":{"start":{"line":84,"column":18},"end":{"line":84,"column":25}},"31":{"start":{"line":85,"column":17},"end":{"line":85,"column":24}},"32":{"start":{"line":86,"column":17},"end":{"line":86,"column":24}},"33":{"start":{"line":87,"column":22},"end":{"line":87,"column":29}},"34":{"start":{"line":88,"column":22},"end":{"line":88,"column":29}},"35":{"start":{"line":89,"column":20},"end":{"line":89,"column":27}},"36":{"start":{"line":90,"column":17},"end":{"line":90,"column":24}},"37":{"start":{"line":91,"column":20},"end":{"line":91,"column":27}},"38":{"start":{"line":94,"column":0},"end":{"line":94,"column":49}},"39":{"start":{"line":96,"column":0},"end":{"line":96,"column":29}}},"branchMap":{"1":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":6},"end":{"line":38,"column":6}},{"start":{"line":38,"column":6},"end":{"line":38,"column":6}}]},"2":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":6},"end":{"line":65,"column":6}},{"start":{"line":65,"column":6},"end":{"line":65,"column":6}}]}},"code":["const GuildChannel = require('./GuildChannel');","const TextBasedChannel = require('./interface/TextBasedChannel');","const Collection = require('../util/Collection');","","/**"," * Represents a guild text channel on Discord."," * @extends {GuildChannel}"," * @implements {TextBasedChannel}"," */","class TextChannel extends GuildChannel {","  constructor(guild, data) {","    super(guild, data);","    this.type = 'text';","    this.messages = new Collection();","    this._typing = new Map();","  }","","  setup(data) {","    super.setup(data);","","    /**","     * The topic of the text channel, if there is one.","     * @type {?string}","     */","    this.topic = data.topic;","","    this.lastMessageID = data.last_message_id;","  }","","  /**","   * A collection of members that can see this channel, mapped by their ID.","   * @type {Collection<string, GuildMember>}","   * @readonly","   */","  get members() {","    const members = new Collection();","    for (const member of this.guild.members.values()) {","      if (this.permissionsFor(member).hasPermission('READ_MESSAGES')) {","        members.set(member.id, member);","      }","    }","    return members;","  }","","  /**","   * Fetch all webhooks for the channel.","   * @returns {Promise<Collection<string, Webhook>>}","   */","  fetchWebhooks() {","    return this.client.rest.methods.getChannelWebhooks(this);","  }","","  /**","   * Create a webhook for the channel.","   * @param {string} name The name of the webhook.","   * @param {BufferResolvable} avatar The avatar for the webhook.","   * @returns {Promise<Webhook>} webhook The created webhook.","   * @example","   * channel.createWebhook('Snek', 'http://snek.s3.amazonaws.com/topSnek.png')","   *  .then(webhook => console.log(`Created Webhook ${webhook}`))","   *  .catch(console.error)","   */","  createWebhook(name, avatar) {","    return new Promise(resolve => {","      if (avatar.startsWith('data:')) {","        resolve(this.client.rest.methods.createWebhook(this, name, avatar));","      } else {","        this.client.resolver.resolveBuffer(avatar).then(data =>","           resolve(this.client.rest.methods.createWebhook(this, name, data))","        );","      }","    });","  }","","  // These are here only for documentation purposes - they are implemented by TextBasedChannel","  send() { return; }","  sendMessage() { return; }","  sendEmbed() { return; }","  sendFile() { return; }","  sendCode() { return; }","  fetchMessage() { return; }","  fetchMessages() { return; }","  fetchPinnedMessages() { return; }","  startTyping() { return; }","  stopTyping() { return; }","  get typing() { return; }","  get typingCount() { return; }","  createCollector() { return; }","  awaitMessages() { return; }","  bulkDelete() { return; }","  _cacheMessage() { return; }","}","","TextBasedChannel.applyToClass(TextChannel, true);","","module.exports = TextChannel;",""],"l":{"1":2,"2":2,"3":0,"12":0,"13":0,"14":0,"15":0,"19":0,"25":0,"27":0,"36":0,"37":0,"38":0,"39":0,"42":0,"50":0,"64":0,"65":0,"66":0,"68":0,"69":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"94":0,"96":0}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/UserConnection.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/UserConnection.js","s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":5,"loc":{"start":{"line":5,"column":13},"end":{"line":5,"column":26}}},"2":{"name":"(anonymous_2)","line":15,"loc":{"start":{"line":15,"column":7},"end":{"line":15,"column":14}}}},"statementMap":{"1":{"start":{"line":10,"column":4},"end":{"line":10,"column":21}},"2":{"start":{"line":12,"column":4},"end":{"line":12,"column":21}},"3":{"start":{"line":20,"column":4},"end":{"line":20,"column":26}},"4":{"start":{"line":26,"column":4},"end":{"line":26,"column":26}},"5":{"start":{"line":32,"column":4},"end":{"line":32,"column":22}},"6":{"start":{"line":38,"column":4},"end":{"line":38,"column":32}},"7":{"start":{"line":44,"column":4},"end":{"line":44,"column":42}},"8":{"start":{"line":48,"column":0},"end":{"line":48,"column":32}}},"branchMap":{},"code":["/**"," * Represents a user connection (or \"platform identity\")"," */","class UserConnection {","  constructor(user, data) {","    /**","     * The user that owns the Connection","     * @type {User}","     */","    this.user = user;","","    this.setup(data);","  }","","  setup(data) {","    /**","     * The type of the Connection","     * @type {string}","     */","    this.type = data.type;","","    /**","     * The username of the connection account","     * @type {string}","     */","    this.name = data.name;","","    /**","     * The id of the connection account","     * @type {string}","     */","    this.id = data.id;","","    /**","     * Whether the connection is revoked","     * @type {boolean}","     */","    this.revoked = data.revoked;","","    /**","     * an array of partial server integrations (not yet implemented in this lib)","     * @type {Object[]}","     */","    this.integrations = data.integrations;","  }","}","","module.exports = UserConnection;",""],"l":{"10":0,"12":0,"20":0,"26":0,"32":0,"38":0,"44":0,"48":1}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/UserProfile.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/UserProfile.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1},"b":{"1":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":8,"loc":{"start":{"line":8,"column":13},"end":{"line":8,"column":26}}},"2":{"name":"(anonymous_2)","line":38,"loc":{"start":{"line":38,"column":7},"end":{"line":38,"column":14}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":49}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":51}},"3":{"start":{"line":13,"column":4},"end":{"line":13,"column":21}},"4":{"start":{"line":21,"column":4},"end":{"line":21,"column":66}},"5":{"start":{"line":27,"column":4},"end":{"line":27,"column":41}},"6":{"start":{"line":33,"column":4},"end":{"line":33,"column":40}},"7":{"start":{"line":35,"column":4},"end":{"line":35,"column":21}},"8":{"start":{"line":43,"column":4},"end":{"line":43,"column":32}},"9":{"start":{"line":45,"column":4},"end":{"line":49,"column":5}},"10":{"start":{"line":46,"column":6},"end":{"line":48,"column":7}},"11":{"start":{"line":47,"column":8},"end":{"line":47,"column":74}},"12":{"start":{"line":50,"column":4},"end":{"line":52,"column":5}},"13":{"start":{"line":51,"column":6},"end":{"line":51,"column":85}},"14":{"start":{"line":56,"column":0},"end":{"line":56,"column":29}}},"branchMap":{"1":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":6},"end":{"line":46,"column":6}},{"start":{"line":46,"column":6},"end":{"line":46,"column":6}}]}},"code":["const Collection = require('../util/Collection');","const UserConnection = require('./UserConnection');","","/**"," * Represents a user's profile on Discord."," */","class UserProfile {","  constructor(user, data) {","    /**","     * The owner of the profile","     * @type {User}","     */","    this.user = user;","","    /**","     * The Client that created the instance of the the UserProfile.","     * @name UserProfile#client","     * @type {Client}","     * @readonly","     */","    Object.defineProperty(this, 'client', { value: user.client });","","    /**","     * Guilds that the client user and the user share","     * @type {Collection<Guild>}","     */","    this.mutualGuilds = new Collection();","","    /**","     * The user's connections","     * @type {Collection<UserConnection>}","     */","    this.connections = new Collection();","","    this.setup(data);","  }","","  setup(data) {","    /**","     * If the user has Discord Premium","     * @type {boolean}","     */","    this.premium = data.premium;","","    for (const guild of data.mutual_guilds) {","      if (this.client.guilds.has(guild.id)) {","        this.mutualGuilds.set(guild.id, this.client.guilds.get(guild.id));","      }","    }","    for (const connection of data.connected_accounts) {","      this.connections.set(connection.id, new UserConnection(this.user, connection));","    }","  }","}","","module.exports = UserProfile;",""],"l":{"1":1,"2":1,"13":0,"21":0,"27":0,"33":0,"35":0,"43":0,"45":0,"46":0,"47":0,"50":0,"51":0,"56":1}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/VoiceChannel.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/VoiceChannel.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"(anonymous_1)","line":9,"loc":{"start":{"line":9,"column":13},"end":{"line":9,"column":27}}},"2":{"name":"(anonymous_2)","line":21,"loc":{"start":{"line":21,"column":7},"end":{"line":21,"column":14}}},"3":{"name":"(anonymous_3)","line":42,"loc":{"start":{"line":42,"column":16},"end":{"line":42,"column":19}}},"4":{"name":"(anonymous_4)","line":52,"loc":{"start":{"line":52,"column":14},"end":{"line":52,"column":17}}},"5":{"name":"(anonymous_5)","line":61,"loc":{"start":{"line":61,"column":15},"end":{"line":61,"column":18}}},"6":{"name":"(anonymous_6)","line":75,"loc":{"start":{"line":75,"column":12},"end":{"line":75,"column":22}}},"7":{"name":"(anonymous_7)","line":89,"loc":{"start":{"line":89,"column":14},"end":{"line":89,"column":26}}},"8":{"name":"(anonymous_8)","line":102,"loc":{"start":{"line":102,"column":6},"end":{"line":102,"column":9}}},"9":{"name":"(anonymous_9)","line":113,"loc":{"start":{"line":113,"column":7},"end":{"line":113,"column":10}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":47}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":49}},"3":{"start":{"line":10,"column":4},"end":{"line":10,"column":23}},"4":{"start":{"line":16,"column":4},"end":{"line":16,"column":36}},"5":{"start":{"line":18,"column":4},"end":{"line":18,"column":24}},"6":{"start":{"line":22,"column":4},"end":{"line":22,"column":22}},"7":{"start":{"line":28,"column":4},"end":{"line":28,"column":32}},"8":{"start":{"line":34,"column":4},"end":{"line":34,"column":37}},"9":{"start":{"line":43,"column":4},"end":{"line":43,"column":50}},"10":{"start":{"line":44,"column":4},"end":{"line":44,"column":75}},"11":{"start":{"line":44,"column":57},"end":{"line":44,"column":75}},"12":{"start":{"line":45,"column":4},"end":{"line":45,"column":16}},"13":{"start":{"line":53,"column":4},"end":{"line":53,"column":42}},"14":{"start":{"line":53,"column":29},"end":{"line":53,"column":42}},"15":{"start":{"line":54,"column":4},"end":{"line":54,"column":74}},"16":{"start":{"line":62,"column":4},"end":{"line":62,"column":72}},"17":{"start":{"line":76,"column":4},"end":{"line":76,"column":34}},"18":{"start":{"line":90,"column":4},"end":{"line":90,"column":36}},"19":{"start":{"line":103,"column":4},"end":{"line":103,"column":114}},"20":{"start":{"line":103,"column":29},"end":{"line":103,"column":114}},"21":{"start":{"line":104,"column":4},"end":{"line":104,"column":47}},"22":{"start":{"line":114,"column":4},"end":{"line":114,"column":36}},"23":{"start":{"line":114,"column":29},"end":{"line":114,"column":36}},"24":{"start":{"line":115,"column":4},"end":{"line":115,"column":72}},"25":{"start":{"line":116,"column":4},"end":{"line":116,"column":81}},"26":{"start":{"line":116,"column":57},"end":{"line":116,"column":81}},"27":{"start":{"line":120,"column":0},"end":{"line":120,"column":30}}},"branchMap":{"1":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":4},"end":{"line":44,"column":4}},{"start":{"line":44,"column":4},"end":{"line":44,"column":4}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":8},"end":{"line":44,"column":18}},{"start":{"line":44,"column":22},"end":{"line":44,"column":55}}]},"3":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":4},"end":{"line":53,"column":4}},{"start":{"line":53,"column":4},"end":{"line":53,"column":4}}]},"4":{"line":103,"type":"if","locations":[{"start":{"line":103,"column":4},"end":{"line":103,"column":4}},{"start":{"line":103,"column":4},"end":{"line":103,"column":4}}]},"5":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":4},"end":{"line":114,"column":4}},{"start":{"line":114,"column":4},"end":{"line":114,"column":4}}]},"6":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":4},"end":{"line":116,"column":4}},{"start":{"line":116,"column":4},"end":{"line":116,"column":4}}]},"7":{"line":116,"type":"binary-expr","locations":[{"start":{"line":116,"column":8},"end":{"line":116,"column":18}},{"start":{"line":116,"column":22},"end":{"line":116,"column":55}}]}},"code":["const GuildChannel = require('./GuildChannel');","const Collection = require('../util/Collection');","","/**"," * Represents a guild voice channel on Discord."," * @extends {GuildChannel}"," */","class VoiceChannel extends GuildChannel {","  constructor(guild, data) {","    super(guild, data);","","    /**","     * The members in this voice channel.","     * @type {Collection<string, GuildMember>}","     */","    this.members = new Collection();","","    this.type = 'voice';","  }","","  setup(data) {","    super.setup(data);","","    /**","     * The bitrate of this voice channel","     * @type {number}","     */","    this.bitrate = data.bitrate;","","    /**","     * The maximum amount of users allowed in this channel - 0 means unlimited.","     * @type {number}","     */","    this.userLimit = data.user_limit;","  }","","  /**","   * The voice connection for this voice channel, if the client is connected","   * @type {?VoiceConnection}","   * @readonly","   */","  get connection() {","    const connection = this.guild.voiceConnection;","    if (connection && connection.channel.id === this.id) return connection;","    return null;","  }","","  /**","   * Checks if the client has permission join the voice channel","   * @type {boolean}","   */","  get joinable() {","    if (this.client.browser) return false;","    return this.permissionsFor(this.client.user).hasPermission('CONNECT');","  }","","  /**","   * Checks if the client has permission to send audio to the voice channel","   * @type {boolean}","   */","  get speakable() {","    return this.permissionsFor(this.client.user).hasPermission('SPEAK');","  }","","  /**","   * Sets the bitrate of the channel","   * @param {number} bitrate The new bitrate","   * @returns {Promise<VoiceChannel>}","   * @example","   * // set the bitrate of a voice channel","   * voiceChannel.setBitrate(48000)","   *  .then(vc => console.log(`Set bitrate to ${vc.bitrate} for ${vc.name}`))","   *  .catch(console.error);","   */","  setBitrate(bitrate) {","    return this.edit({ bitrate });","  }","","  /**","   * Sets the user limit of the channel","   * @param {number} userLimit The new user limit","   * @returns {Promise<VoiceChannel>}","   * @example","   * // set the user limit of a voice channel","   * voiceChannel.setUserLimit(42)","   *  .then(vc => console.log(`Set user limit to ${vc.userLimit} for ${vc.name}`))","   *  .catch(console.error);","   */","  setUserLimit(userLimit) {","    return this.edit({ userLimit });","  }","","  /**","   * Attempts to join this voice channel","   * @returns {Promise<VoiceConnection>}","   * @example","   * // join a voice channel","   * voiceChannel.join()","   *  .then(connection => console.log('Connected!'))","   *  .catch(console.error);","   */","  join() {","    if (this.client.browser) return Promise.reject(new Error('Voice connections are not available in browsers.'));","    return this.client.voice.joinChannel(this);","  }","","  /**","   * Leaves this voice channel","   * @example","   * // leave a voice channel","   * voiceChannel.leave();","   */","  leave() {","    if (this.client.browser) return;","    const connection = this.client.voice.connections.get(this.guild.id);","    if (connection && connection.channel.id === this.id) connection.disconnect();","  }","}","","module.exports = VoiceChannel;",""],"l":{"1":1,"2":1,"10":0,"16":0,"18":0,"22":0,"28":0,"34":0,"43":0,"44":0,"45":0,"53":0,"54":0,"62":0,"76":0,"90":0,"103":0,"104":0,"114":0,"115":0,"116":0,"120":1}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/util/ArraysEqual.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/util/ArraysEqual.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"arraysEqual","line":1,"loc":{"start":{"line":1,"column":17},"end":{"line":1,"column":44}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":14,"column":2}},"2":{"start":{"line":2,"column":2},"end":{"line":2,"column":27}},"3":{"start":{"line":2,"column":15},"end":{"line":2,"column":27}},"4":{"start":{"line":3,"column":2},"end":{"line":3,"column":42}},"5":{"start":{"line":3,"column":29},"end":{"line":3,"column":42}},"6":{"start":{"line":5,"column":2},"end":{"line":11,"column":3}},"7":{"start":{"line":6,"column":4},"end":{"line":6,"column":28}},"8":{"start":{"line":7,"column":4},"end":{"line":7,"column":32}},"9":{"start":{"line":8,"column":4},"end":{"line":10,"column":5}},"10":{"start":{"line":9,"column":6},"end":{"line":9,"column":23}},"11":{"start":{"line":13,"column":2},"end":{"line":13,"column":24}}},"branchMap":{"1":{"line":2,"type":"if","locations":[{"start":{"line":2,"column":2},"end":{"line":2,"column":2}},{"start":{"line":2,"column":2},"end":{"line":2,"column":2}}]},"2":{"line":3,"type":"if","locations":[{"start":{"line":3,"column":2},"end":{"line":3,"column":2}},{"start":{"line":3,"column":2},"end":{"line":3,"column":2}}]},"3":{"line":8,"type":"if","locations":[{"start":{"line":8,"column":4},"end":{"line":8,"column":4}},{"start":{"line":8,"column":4},"end":{"line":8,"column":4}}]}},"code":["module.exports = function arraysEqual(a, b) {","  if (a === b) return true;","  if (a.length !== b.length) return false;","","  for (const itemInd in a) {","    const item = a[itemInd];","    const ind = b.indexOf(item);","    if (ind) {","      b.splice(ind, 1);","    }","  }","","  return b.length === 0;","};",""],"l":{"1":1,"2":0,"3":0,"5":0,"6":0,"7":0,"8":0,"9":0,"13":0}},"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/util/ParseEmoji.js":{"path":"/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/util/ParseEmoji.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"parseEmoji","line":1,"loc":{"start":{"line":1,"column":17},"end":{"line":1,"column":43}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":14,"column":2}},"2":{"start":{"line":2,"column":2},"end":{"line":4,"column":3}},"3":{"start":{"line":3,"column":4},"end":{"line":3,"column":36}},"4":{"start":{"line":5,"column":2},"end":{"line":13,"column":3}},"5":{"start":{"line":6,"column":4},"end":{"line":6,"column":39}},"6":{"start":{"line":7,"column":4},"end":{"line":7,"column":24}},"7":{"start":{"line":9,"column":4},"end":{"line":12,"column":6}}},"branchMap":{"1":{"line":2,"type":"if","locations":[{"start":{"line":2,"column":2},"end":{"line":2,"column":2}},{"start":{"line":2,"column":2},"end":{"line":2,"column":2}}]},"2":{"line":5,"type":"if","locations":[{"start":{"line":5,"column":2},"end":{"line":5,"column":2}},{"start":{"line":5,"column":2},"end":{"line":5,"column":2}}]}},"code":["module.exports = function parseEmoji(text) {","  if (text.includes('%')) {","    text = decodeURIComponent(text);","  }","  if (text.includes(':')) {","    const [name, id] = text.split(':');","    return { name, id };","  } else {","    return {","      name: text,","      id: null,","    };","  }","};",""],"l":{"1":1,"2":0,"3":0,"5":0,"6":0,"7":0,"9":0}}}