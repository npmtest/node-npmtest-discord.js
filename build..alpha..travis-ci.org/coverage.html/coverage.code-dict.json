{"/home/travis/build/npmtest/node-npmtest-discord.js/test.js":"/* istanbul instrument in package npmtest_discord_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-discord.js/lib.npmtest_discord.js.js":"/* istanbul instrument in package npmtest_discord_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_discord_js = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_discord_js = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-discord.js/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-discord.js && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_discord_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_discord_js\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_discord_js.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_discord_js.rollup.js'] =\n            local.assetsDict['/assets.npmtest_discord_js.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_discord_js.__dirname + '/lib.npmtest_discord_js.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/index.js":"module.exports = {\n  Client: require('./client/Client'),\n  WebhookClient: require('./client/WebhookClient'),\n  Shard: require('./sharding/Shard'),\n  ShardClientUtil: require('./sharding/ShardClientUtil'),\n  ShardingManager: require('./sharding/ShardingManager'),\n\n  Collection: require('./util/Collection'),\n  splitMessage: require('./util/SplitMessage'),\n  escapeMarkdown: require('./util/EscapeMarkdown'),\n  fetchRecommendedShards: require('./util/FetchRecommendedShards'),\n\n  Channel: require('./structures/Channel'),\n  ClientOAuth2Application: require('./structures/ClientOAuth2Application'),\n  ClientUser: require('./structures/ClientUser'),\n  DMChannel: require('./structures/DMChannel'),\n  Emoji: require('./structures/Emoji'),\n  EvaluatedPermissions: require('./structures/EvaluatedPermissions'),\n  Game: require('./structures/Presence').Game,\n  GroupDMChannel: require('./structures/GroupDMChannel'),\n  Guild: require('./structures/Guild'),\n  GuildChannel: require('./structures/GuildChannel'),\n  GuildMember: require('./structures/GuildMember'),\n  Invite: require('./structures/Invite'),\n  Message: require('./structures/Message'),\n  MessageAttachment: require('./structures/MessageAttachment'),\n  MessageCollector: require('./structures/MessageCollector'),\n  MessageEmbed: require('./structures/MessageEmbed'),\n  MessageReaction: require('./structures/MessageReaction'),\n  OAuth2Application: require('./structures/OAuth2Application'),\n  PartialGuild: require('./structures/PartialGuild'),\n  PartialGuildChannel: require('./structures/PartialGuildChannel'),\n  PermissionOverwrites: require('./structures/PermissionOverwrites'),\n  Presence: require('./structures/Presence').Presence,\n  ReactionEmoji: require('./structures/ReactionEmoji'),\n  RichEmbed: require('./structures/RichEmbed'),\n  Role: require('./structures/Role'),\n  TextChannel: require('./structures/TextChannel'),\n  User: require('./structures/User'),\n  VoiceChannel: require('./structures/VoiceChannel'),\n  Webhook: require('./structures/Webhook'),\n\n  version: require('../package').version,\n  Constants: require('./util/Constants'),\n};\n\nif (typeof window !== 'undefined') window.Discord = module.exports; // eslint-disable-line no-undef\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/Client.js":"const EventEmitter = require('events').EventEmitter;\nconst mergeDefault = require('../util/MergeDefault');\nconst Constants = require('../util/Constants');\nconst RESTManager = require('./rest/RESTManager');\nconst ClientDataManager = require('./ClientDataManager');\nconst ClientManager = require('./ClientManager');\nconst ClientDataResolver = require('./ClientDataResolver');\nconst ClientVoiceManager = require('./voice/ClientVoiceManager');\nconst WebSocketManager = require('./websocket/WebSocketManager');\nconst ActionsManager = require('./actions/ActionsManager');\nconst Collection = require('../util/Collection');\nconst Presence = require('../structures/Presence').Presence;\nconst ShardClientUtil = require('../sharding/ShardClientUtil');\n\n/**\n * The starting point for making a Discord Bot.\n * @extends {EventEmitter}\n */\nclass Client extends EventEmitter {\n  /**\n   * @param {ClientOptions} [options] Options for the client\n   */\n  constructor(options = {}) {\n    super();\n\n    // Obtain shard details from environment\n    if (!options.shardId && 'SHARD_ID' in process.env) options.shardId = Number(process.env.SHARD_ID);\n    if (!options.shardCount && 'SHARD_COUNT' in process.env) options.shardCount = Number(process.env.SHARD_COUNT);\n\n    /**\n     * The options the client was instantiated with\n     * @type {ClientOptions}\n     */\n    this.options = mergeDefault(Constants.DefaultOptions, options);\n    this._validateOptions();\n\n    /**\n     * The REST manager of the client\n     * @type {RESTManager}\n     * @private\n     */\n    this.rest = new RESTManager(this);\n\n    /**\n     * The data manager of the Client\n     * @type {ClientDataManager}\n     * @private\n     */\n    this.dataManager = new ClientDataManager(this);\n\n    /**\n     * The manager of the Client\n     * @type {ClientManager}\n     * @private\n     */\n    this.manager = new ClientManager(this);\n\n    /**\n     * The WebSocket Manager of the Client\n     * @type {WebSocketManager}\n     * @private\n     */\n    this.ws = new WebSocketManager(this);\n\n    /**\n     * The Data Resolver of the Client\n     * @type {ClientDataResolver}\n     * @private\n     */\n    this.resolver = new ClientDataResolver(this);\n\n    /**\n     * The Action Manager of the Client\n     * @type {ActionsManager}\n     * @private\n     */\n    this.actions = new ActionsManager(this);\n\n    /**\n     * The Voice Manager of the Client (`null` in browsers)\n     * @type {?ClientVoiceManager}\n     * @private\n     */\n    this.voice = !this.browser ? new ClientVoiceManager(this) : null;\n\n    /**\n     * The shard helpers for the client (only if the process was spawned as a child, such as from a ShardingManager)\n     * @type {?ShardClientUtil}\n     */\n    this.shard = process.send ? ShardClientUtil.singleton(this) : null;\n\n    /**\n     * A collection of the Client's stored users\n     * @type {Collection<string, User>}\n     */\n    this.users = new Collection();\n\n    /**\n     * A collection of the Client's stored guilds\n     * @type {Collection<string, Guild>}\n     */\n    this.guilds = new Collection();\n\n    /**\n     * A collection of the Client's stored channels\n     * @type {Collection<string, Channel>}\n     */\n    this.channels = new Collection();\n\n    /**\n     * A collection of presences for friends of the logged in user.\n     * <warn>This is only filled when using a user account.</warn>\n     * @type {Collection<string, Presence>}\n     */\n    this.presences = new Collection();\n\n    if (!this.token && 'CLIENT_TOKEN' in process.env) {\n      /**\n       * The authorization token for the logged in user/bot.\n       * @type {?string}\n       */\n      this.token = process.env.CLIENT_TOKEN;\n    } else {\n      this.token = null;\n    }\n\n    /**\n     * The ClientUser representing the logged in Client\n     * @type {?ClientUser}\n     */\n    this.user = null;\n\n    /**\n     * The date at which the Client was regarded as being in the `READY` state.\n     * @type {?Date}\n     */\n    this.readyAt = null;\n\n    /**\n     * The previous heartbeat pings of the websocket (most recent first, limited to three elements)\n     * @type {number[]}\n     */\n    this.pings = [];\n\n    this._pingTimestamp = 0;\n    this._timeouts = new Set();\n    this._intervals = new Set();\n\n    if (this.options.messageSweepInterval > 0) {\n      this.setInterval(this.sweepMessages.bind(this), this.options.messageSweepInterval * 1000);\n    }\n  }\n\n  /**\n   * The status for the logged in Client.\n   * @type {?number}\n   * @readonly\n   */\n  get status() {\n    return this.ws.status;\n  }\n\n  /**\n   * The uptime for the logged in Client.\n   * @type {?number}\n   * @readonly\n   */\n  get uptime() {\n    return this.readyAt ? Date.now() - this.readyAt : null;\n  }\n\n  /**\n   * The average heartbeat ping of the websocket\n   * @type {number}\n   * @readonly\n   */\n  get ping() {\n    return this.pings.reduce((prev, p) => prev + p, 0) / this.pings.length;\n  }\n\n  /**\n   * Returns a collection, mapping guild ID to voice connections.\n   * @type {Collection<string, VoiceConnection>}\n   * @readonly\n   */\n  get voiceConnections() {\n    if (this.browser) return new Collection();\n    return this.voice.connections;\n  }\n\n  /**\n   * The emojis that the client can use. Mapped by emoji ID.\n   * @type {Collection<string, Emoji>}\n   * @readonly\n   */\n  get emojis() {\n    const emojis = new Collection();\n    for (const guild of this.guilds.values()) {\n      for (const emoji of guild.emojis.values()) emojis.set(emoji.id, emoji);\n    }\n    return emojis;\n  }\n\n  /**\n   * The timestamp that the client was last ready at\n   * @type {?number}\n   * @readonly\n   */\n  get readyTimestamp() {\n    return this.readyAt ? this.readyAt.getTime() : null;\n  }\n\n  /**\n   * Whether the client is in a browser environment\n   * @type {boolean}\n   * @readonly\n   */\n  get browser() {\n    return typeof window !== 'undefined';\n  }\n\n  /**\n   * Logs the client in. If successful, resolves with the account's token. <warn>If you're making a bot, it's\n   * much better to use a bot account rather than a user account.\n   * Bot accounts have higher rate limits and have access to some features user accounts don't have. User bots\n   * that are making a lot of API requests can even be banned.</warn>\n   * @param  {string} token The token used for the account.\n   * @returns {Promise<string>}\n   * @example\n   * // log the client in using a token\n   * const token = 'my token';\n   * client.login(token);\n   * @example\n   * // log the client in using email and password\n   * const email = 'user@email.com';\n   * const password = 'supersecret123';\n   * client.login(email, password);\n   */\n  login(token) {\n    return this.rest.methods.login(token);\n  }\n\n  /**\n   * Destroys the client and logs out.\n   * @returns {Promise}\n   */\n  destroy() {\n    for (const t of this._timeouts) clearTimeout(t);\n    for (const i of this._intervals) clearInterval(i);\n    this._timeouts.clear();\n    this._intervals.clear();\n    return this.manager.destroy();\n  }\n\n  /**\n   * This shouldn't really be necessary to most developers as it is automatically invoked every 30 seconds, however\n   * if you wish to force a sync of guild data, you can use this.\n   * <warn>This is only available when using a user account.</warn>\n   * @param {Guild[]|Collection<string, Guild>} [guilds=this.guilds] An array or collection of guilds to sync\n   */\n  syncGuilds(guilds = this.guilds) {\n    if (this.user.bot) return;\n    this.ws.send({\n      op: 12,\n      d: guilds instanceof Collection ? guilds.keyArray() : guilds.map(g => g.id),\n    });\n  }\n\n  /**\n   * Caches a user, or obtains it from the cache if it's already cached.\n   * <warn>This is only available when using a bot account.</warn>\n   * @param {string} id The ID of the user to obtain\n   * @returns {Promise<User>}\n   */\n  fetchUser(id) {\n    if (this.users.has(id)) return Promise.resolve(this.users.get(id));\n    return this.rest.methods.getUser(id);\n  }\n\n  /**\n   * Fetches an invite object from an invite code.\n   * @param {InviteResolvable} invite An invite code or URL\n   * @returns {Promise<Invite>}\n   */\n  fetchInvite(invite) {\n    const code = this.resolver.resolveInviteCode(invite);\n    return this.rest.methods.getInvite(code);\n  }\n\n  /**\n   * Fetch a webhook by ID.\n   * @param {string} id ID of the webhook\n   * @param {string} [token] Token for the webhook\n   * @returns {Promise<Webhook>}\n   */\n  fetchWebhook(id, token) {\n    return this.rest.methods.getWebhook(id, token);\n  }\n\n  /**\n   * Sweeps all channels' messages and removes the ones older than the max message lifetime.\n   * If the message has been edited, the time of the edit is used rather than the time of the original message.\n   * @param {number} [lifetime=this.options.messageCacheLifetime] Messages that are older than this (in seconds)\n   * will be removed from the caches. The default is based on the client's `messageCacheLifetime` option.\n   * @returns {number} Amount of messages that were removed from the caches,\n   * or -1 if the message cache lifetime is unlimited\n   */\n  sweepMessages(lifetime = this.options.messageCacheLifetime) {\n    if (typeof lifetime !== 'number' || isNaN(lifetime)) throw new TypeError('The lifetime must be a number.');\n    if (lifetime <= 0) {\n      this.emit('debug', 'Didn\\'t sweep messages - lifetime is unlimited');\n      return -1;\n    }\n\n    const lifetimeMs = lifetime * 1000;\n    const now = Date.now();\n    let channels = 0;\n    let messages = 0;\n\n    for (const channel of this.channels.values()) {\n      if (!channel.messages) continue;\n      channels++;\n\n      for (const message of channel.messages.values()) {\n        if (now - (message.editedTimestamp || message.createdTimestamp) > lifetimeMs) {\n          channel.messages.delete(message.id);\n          messages++;\n        }\n      }\n    }\n\n    this.emit('debug', `Swept ${messages} messages older than ${lifetime} seconds in ${channels} text-based channels`);\n    return messages;\n  }\n\n  /**\n   * Gets the bot's OAuth2 application.\n   * <warn>This is only available when using a bot account.</warn>\n   * @returns {Promise<ClientOAuth2Application>}\n   */\n  fetchApplication() {\n    if (!this.user.bot) throw new Error(Constants.Errors.NO_BOT_ACCOUNT);\n    return this.rest.methods.getMyApplication();\n  }\n\n  /**\n   * Generate an invite link for your bot\n   * @param {PermissionResolvable[]|number} [permissions] An array of permissions to request\n   * @returns {Promise<string>} The invite link\n   * @example\n   * client.generateInvite(['SEND_MESSAGES', 'MANAGE_GUILD', 'MENTION_EVERYONE'])\n   *   .then(link => {\n   *     console.log(`Generated bot invite link: ${link}`);\n   *   });\n   */\n  generateInvite(permissions) {\n    if (permissions) {\n      if (permissions instanceof Array) permissions = this.resolver.resolvePermissions(permissions);\n    } else {\n      permissions = 0;\n    }\n    return this.fetchApplication().then(application =>\n      `https://discordapp.com/oauth2/authorize?client_id=${application.id}&permissions=${permissions}&scope=bot`\n    );\n  }\n\n  /**\n   * Sets a timeout that will be automatically cancelled if the client is destroyed.\n   * @param {Function} fn Function to execute\n   * @param {number} delay Time to wait before executing (in milliseconds)\n   * @param {...*} args Arguments for the function\n   * @returns {Timeout}\n   */\n  setTimeout(fn, delay, ...args) {\n    const timeout = setTimeout(() => {\n      fn();\n      this._timeouts.delete(timeout);\n    }, delay, ...args);\n    this._timeouts.add(timeout);\n    return timeout;\n  }\n\n  /**\n   * Clears a timeout\n   * @param {Timeout} timeout Timeout to cancel\n   */\n  clearTimeout(timeout) {\n    clearTimeout(timeout);\n    this._timeouts.delete(timeout);\n  }\n\n  /**\n   * Sets an interval that will be automatically cancelled if the client is destroyed.\n   * @param {Function} fn Function to execute\n   * @param {number} delay Time to wait before executing (in milliseconds)\n   * @param {...*} args Arguments for the function\n   * @returns {Timeout}\n   */\n  setInterval(fn, delay, ...args) {\n    const interval = setInterval(fn, delay, ...args);\n    this._intervals.add(interval);\n    return interval;\n  }\n\n  /**\n   * Clears an interval\n   * @param {Timeout} interval Interval to cancel\n   */\n  clearInterval(interval) {\n    clearInterval(interval);\n    this._intervals.delete(interval);\n  }\n\n  _pong(startTime) {\n    this.pings.unshift(Date.now() - startTime);\n    if (this.pings.length > 3) this.pings.length = 3;\n    this.ws.lastHeartbeatAck = true;\n  }\n\n  _setPresence(id, presence) {\n    if (this.presences.get(id)) {\n      this.presences.get(id).update(presence);\n      return;\n    }\n    this.presences.set(id, new Presence(presence));\n  }\n\n  _eval(script) {\n    return eval(script);\n  }\n\n  _validateOptions(options = this.options) {\n    if (typeof options.shardCount !== 'number' || isNaN(options.shardCount)) {\n      throw new TypeError('The shardCount option must be a number.');\n    }\n    if (typeof options.shardId !== 'number' || isNaN(options.shardId)) {\n      throw new TypeError('The shardId option must be a number.');\n    }\n    if (options.shardCount < 0) throw new RangeError('The shardCount option must be at least 0.');\n    if (options.shardId < 0) throw new RangeError('The shardId option must be at least 0.');\n    if (options.shardId !== 0 && options.shardId >= options.shardCount) {\n      throw new RangeError('The shardId option must be less than shardCount.');\n    }\n    if (typeof options.messageCacheMaxSize !== 'number' || isNaN(options.messageCacheMaxSize)) {\n      throw new TypeError('The messageCacheMaxSize option must be a number.');\n    }\n    if (typeof options.messageCacheLifetime !== 'number' || isNaN(options.messageCacheLifetime)) {\n      throw new TypeError('The messageCacheLifetime option must be a number.');\n    }\n    if (typeof options.messageSweepInterval !== 'number' || isNaN(options.messageSweepInterval)) {\n      throw new TypeError('The messageSweepInterval option must be a number.');\n    }\n    if (typeof options.fetchAllMembers !== 'boolean') {\n      throw new TypeError('The fetchAllMembers option must be a boolean.');\n    }\n    if (typeof options.disableEveryone !== 'boolean') {\n      throw new TypeError('The disableEveryone option must be a boolean.');\n    }\n    if (typeof options.restWsBridgeTimeout !== 'number' || isNaN(options.restWsBridgeTimeout)) {\n      throw new TypeError('The restWsBridgeTimeout option must be a number.');\n    }\n    if (!(options.disabledEvents instanceof Array)) throw new TypeError('The disabledEvents option must be an Array.');\n  }\n}\n\nmodule.exports = Client;\n\n/**\n * Emitted for general warnings\n * @event Client#warn\n * @param {string} info The warning\n */\n\n/**\n * Emitted for general debugging information\n * @event Client#debug\n * @param {string} info The debug information\n */\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/util/MergeDefault.js":"module.exports = function merge(def, given) {\n  if (!given) return def;\n  for (const key in def) {\n    if (!{}.hasOwnProperty.call(given, key)) {\n      given[key] = def[key];\n    } else if (given[key] === Object(given[key])) {\n      given[key] = merge(def[key], given[key]);\n    }\n  }\n\n  return given;\n};\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/util/Constants.js":"exports.Package = require('../../package.json');\n\n/**\n * Options for a Client.\n * @typedef {Object} ClientOptions\n * @property {string} [apiRequestMethod='sequential'] 'sequential' or 'burst'. Sequential executes all requests in\n * the order they are triggered, whereas burst runs multiple at a time, and doesn't guarantee a particular order.\n * @property {number} [shardId=0] The ID of this shard\n * @property {number} [shardCount=0] The number of shards\n * @property {number} [messageCacheMaxSize=200] Maximum number of messages to cache per channel\n * (-1 or Infinity for unlimited - don't do this without message sweeping, otherwise memory usage will climb\n * indefinitely)\n * @property {number} [messageCacheLifetime=0] How long until a message should be uncached by the message sweeping\n * (in seconds, 0 for forever)\n * @property {number} [messageSweepInterval=0] How frequently to remove messages from the cache that are older than\n * the message cache lifetime (in seconds, 0 for never)\n * @property {boolean} [fetchAllMembers=false] Whether to cache all guild members and users upon startup, as well as\n * upon joining a guild\n * @property {boolean} [disableEveryone=false] Default value for MessageOptions.disableEveryone\n * @property {boolean} [sync=false] Whether to periodically sync guilds (for userbots)\n * @property {number} [restWsBridgeTimeout=5000] Maximum time permitted between REST responses and their\n * corresponding websocket events\n * @property {number} [restTimeOffset=500] The extra time in millseconds to wait before continuing to make REST\n * requests (higher values will reduce rate-limiting errors on bad connections)\n * @property {WSEventType[]} [disabledEvents] An array of disabled websocket events. Events in this array will not be\n * processed, potentially resulting in performance improvements for larger bots. Only disable events you are\n * 100% certain you don't need, as many are important, but not obviously so. The safest one to disable with the\n * most impact is typically `TYPING_START`.\n * @property {WebsocketOptions} [ws] Options for the websocket\n */\nexports.DefaultOptions = {\n  apiRequestMethod: 'sequential',\n  shardId: 0,\n  shardCount: 0,\n  messageCacheMaxSize: 200,\n  messageCacheLifetime: 0,\n  messageSweepInterval: 0,\n  fetchAllMembers: false,\n  disableEveryone: false,\n  sync: false,\n  restWsBridgeTimeout: 5000,\n  disabledEvents: [],\n  restTimeOffset: 500,\n\n  /**\n   * Websocket options. These are left as snake_case to match the API.\n   * @typedef {Object} WebsocketOptions\n   * @property {number} [large_threshold=250] Number of members in a guild to be considered large\n   * @property {boolean} [compress=true] Whether to compress data sent on the connection.\n   * Defaults to `false` for browsers.\n   */\n  ws: {\n    large_threshold: 250,\n    compress: typeof window === 'undefined',\n    properties: {\n      $os: process ? process.platform : 'discord.js',\n      $browser: 'discord.js',\n      $device: 'discord.js',\n      $referrer: '',\n      $referring_domain: '',\n    },\n  },\n};\n\nexports.Errors = {\n  NO_TOKEN: 'Request to use token, but token was unavailable to the client.',\n  NO_BOT_ACCOUNT: 'Only bot accounts are able to make use of this feature.',\n  NO_USER_ACCOUNT: 'Only user accounts are able to make use of this feature.',\n  BAD_WS_MESSAGE: 'A bad message was received from the websocket; either bad compression, or not JSON.',\n  TOOK_TOO_LONG: 'Something took too long to do.',\n  NOT_A_PERMISSION: 'Invalid permission string or number.',\n  INVALID_RATE_LIMIT_METHOD: 'Unknown rate limiting method.',\n  BAD_LOGIN: 'Incorrect login details were provided.',\n  INVALID_SHARD: 'Invalid shard settings were provided.',\n  INVALID_TOKEN: 'An invalid token was provided.',\n};\n\nconst PROTOCOL_VERSION = exports.PROTOCOL_VERSION = 6;\nconst HOST = exports.HOST = `https://discordapp.com`;\nconst API = exports.API = `${HOST}/api/v${PROTOCOL_VERSION}`;\nconst Endpoints = exports.Endpoints = {\n  // general\n  login: `${API}/auth/login`,\n  logout: `${API}/auth/logout`,\n  gateway: `${API}/gateway`,\n  botGateway: `${API}/gateway/bot`,\n  invite: (id) => `${API}/invite/${id}`,\n  inviteLink: (id) => `https://discord.gg/${id}`,\n  assets: (asset) => `${HOST}/assets/${asset}`,\n  CDN: 'https://cdn.discordapp.com',\n\n  // users\n  user: (userID) => `${API}/users/${userID}`,\n  userChannels: (userID) => `${Endpoints.user(userID)}/channels`,\n  userProfile: (userID) => `${Endpoints.user(userID)}/profile`,\n  avatar: (userID, avatar) => {\n    if (userID === '1') return avatar;\n    return `${Endpoints.CDN}/avatars/${userID}/${avatar}.${avatar.startsWith('a_') ? 'gif' : 'jpg'}?size=1024`;\n  },\n  me: `${API}/users/@me`,\n  meGuild: (guildID) => `${Endpoints.me}/guilds/${guildID}`,\n  meMentions: (limit, roles, everyone, guildID) =>\n    `users/@me/mentions?limit=${limit}&roles=${roles}&everyone=${everyone}${guildID ? `&guild_id=${guildID}` : ''}`,\n  relationships: (userID) => `${Endpoints.user(userID)}/relationships`,\n  note: (userID) => `${Endpoints.me}/notes/${userID}`,\n\n  // guilds\n  guilds: `${API}/guilds`,\n  guild: (guildID) => `${Endpoints.guilds}/${guildID}`,\n  guildIcon: (guildID, hash) => `${Endpoints.CDN}/icons/${guildID}/${hash}.jpg`,\n  guildSplash: (guildID, hash) => `${Endpoints.CDN}/splashes/${guildID}/${hash}.jpg`,\n  guildPrune: (guildID) => `${Endpoints.guild(guildID)}/prune`,\n  guildEmbed: (guildID) => `${Endpoints.guild(guildID)}/embed`,\n  guildInvites: (guildID) => `${Endpoints.guild(guildID)}/invites`,\n  guildRoles: (guildID) => `${Endpoints.guild(guildID)}/roles`,\n  guildRole: (guildID, roleID) => `${Endpoints.guildRoles(guildID)}/${roleID}`,\n  guildBans: (guildID) => `${Endpoints.guild(guildID)}/bans`,\n  guildIntegrations: (guildID) => `${Endpoints.guild(guildID)}/integrations`,\n  guildMembers: (guildID) => `${Endpoints.guild(guildID)}/members`,\n  guildMember: (guildID, memberID) => `${Endpoints.guildMembers(guildID)}/${memberID}`,\n  guildMemberRole: (guildID, memberID, roleID) => `${Endpoints.guildMember(guildID, memberID)}/roles/${roleID}`,\n  guildMemberNickname: (guildID) => `${Endpoints.guildMember(guildID, '@me')}/nick`,\n  guildChannels: (guildID) => `${Endpoints.guild(guildID)}/channels`,\n  guildEmojis: (guildID) => `${Endpoints.guild(guildID)}/emojis`,\n\n  // channels\n  channels: `${API}/channels`,\n  channel: (channelID) => `${Endpoints.channels}/${channelID}`,\n  channelMessages: (channelID) => `${Endpoints.channel(channelID)}/messages`,\n  channelInvites: (channelID) => `${Endpoints.channel(channelID)}/invites`,\n  channelTyping: (channelID) => `${Endpoints.channel(channelID)}/typing`,\n  channelPermissions: (channelID) => `${Endpoints.channel(channelID)}/permissions`,\n  channelMessage: (channelID, messageID) => `${Endpoints.channelMessages(channelID)}/${messageID}`,\n  channelWebhooks: (channelID) => `${Endpoints.channel(channelID)}/webhooks`,\n\n  // message reactions\n  messageReactions: (channelID, messageID) => `${Endpoints.channelMessage(channelID, messageID)}/reactions`,\n  messageReaction:\n    (channel, msg, emoji, limit) =>\n          `${Endpoints.messageReactions(channel, msg)}/${emoji}` +\n          `${limit ? `?limit=${limit}` : ''}`,\n  selfMessageReaction: (channel, msg, emoji, limit) =>\n          `${Endpoints.messageReaction(channel, msg, emoji, limit)}/@me`,\n  userMessageReaction: (channel, msg, emoji, limit, id) =>\n          `${Endpoints.messageReaction(channel, msg, emoji, limit)}/${id}`,\n\n  // webhooks\n  webhook: (webhookID, token) => `${API}/webhooks/${webhookID}${token ? `/${token}` : ''}`,\n\n  // oauth\n  myApplication: `${API}/oauth2/applications/@me`,\n  getApp: (id) => `${API}/oauth2/authorize?client_id=${id}`,\n\n  // emoji\n  emoji: (emojiID) => `${Endpoints.CDN}/emojis/${emojiID}.png`,\n};\n\nexports.Status = {\n  READY: 0,\n  CONNECTING: 1,\n  RECONNECTING: 2,\n  IDLE: 3,\n  NEARLY: 4,\n  DISCONNECTED: 5,\n};\n\nexports.ChannelTypes = {\n  text: 0,\n  DM: 1,\n  voice: 2,\n  groupDM: 3,\n};\n\nexports.OPCodes = {\n  DISPATCH: 0,\n  HEARTBEAT: 1,\n  IDENTIFY: 2,\n  STATUS_UPDATE: 3,\n  VOICE_STATE_UPDATE: 4,\n  VOICE_GUILD_PING: 5,\n  RESUME: 6,\n  RECONNECT: 7,\n  REQUEST_GUILD_MEMBERS: 8,\n  INVALID_SESSION: 9,\n  HELLO: 10,\n  HEARTBEAT_ACK: 11,\n};\n\nexports.VoiceOPCodes = {\n  IDENTIFY: 0,\n  SELECT_PROTOCOL: 1,\n  READY: 2,\n  HEARTBEAT: 3,\n  SESSION_DESCRIPTION: 4,\n  SPEAKING: 5,\n};\n\nexports.Events = {\n  READY: 'ready',\n  GUILD_CREATE: 'guildCreate',\n  GUILD_DELETE: 'guildDelete',\n  GUILD_UPDATE: 'guildUpdate',\n  GUILD_UNAVAILABLE: 'guildUnavailable',\n  GUILD_AVAILABLE: 'guildAvailable',\n  GUILD_MEMBER_ADD: 'guildMemberAdd',\n  GUILD_MEMBER_REMOVE: 'guildMemberRemove',\n  GUILD_MEMBER_UPDATE: 'guildMemberUpdate',\n  GUILD_MEMBER_AVAILABLE: 'guildMemberAvailable',\n  GUILD_MEMBER_SPEAKING: 'guildMemberSpeaking',\n  GUILD_MEMBERS_CHUNK: 'guildMembersChunk',\n  GUILD_ROLE_CREATE: 'roleCreate',\n  GUILD_ROLE_DELETE: 'roleDelete',\n  GUILD_ROLE_UPDATE: 'roleUpdate',\n  GUILD_EMOJI_CREATE: 'emojiCreate',\n  GUILD_EMOJI_DELETE: 'emojiDelete',\n  GUILD_EMOJI_UPDATE: 'emojiUpdate',\n  GUILD_BAN_ADD: 'guildBanAdd',\n  GUILD_BAN_REMOVE: 'guildBanRemove',\n  CHANNEL_CREATE: 'channelCreate',\n  CHANNEL_DELETE: 'channelDelete',\n  CHANNEL_UPDATE: 'channelUpdate',\n  CHANNEL_PINS_UPDATE: 'channelPinsUpdate',\n  MESSAGE_CREATE: 'message',\n  MESSAGE_DELETE: 'messageDelete',\n  MESSAGE_UPDATE: 'messageUpdate',\n  MESSAGE_BULK_DELETE: 'messageDeleteBulk',\n  MESSAGE_REACTION_ADD: 'messageReactionAdd',\n  MESSAGE_REACTION_REMOVE: 'messageReactionRemove',\n  MESSAGE_REACTION_REMOVE_ALL: 'messageReactionRemoveAll',\n  USER_UPDATE: 'userUpdate',\n  USER_NOTE_UPDATE: 'userNoteUpdate',\n  PRESENCE_UPDATE: 'presenceUpdate',\n  VOICE_STATE_UPDATE: 'voiceStateUpdate',\n  TYPING_START: 'typingStart',\n  TYPING_STOP: 'typingStop',\n  DISCONNECT: 'disconnect',\n  RECONNECTING: 'reconnecting',\n  ERROR: 'error',\n  WARN: 'warn',\n  DEBUG: 'debug',\n};\n\n/**\n * The type of a websocket message event, e.g. `MESSAGE_CREATE`. Here are the available events:\n * - READY\n * - GUILD_SYNC\n * - GUILD_CREATE\n * - GUILD_DELETE\n * - GUILD_UPDATE\n * - GUILD_MEMBER_ADD\n * - GUILD_MEMBER_REMOVE\n * - GUILD_MEMBER_UPDATE\n * - GUILD_MEMBERS_CHUNK\n * - GUILD_ROLE_CREATE\n * - GUILD_ROLE_DELETE\n * - GUILD_ROLE_UPDATE\n * - GUILD_BAN_ADD\n * - GUILD_BAN_REMOVE\n * - CHANNEL_CREATE\n * - CHANNEL_DELETE\n * - CHANNEL_UPDATE\n * - CHANNEL_PINS_UPDATE\n * - MESSAGE_CREATE\n * - MESSAGE_DELETE\n * - MESSAGE_UPDATE\n * - MESSAGE_DELETE_BULK\n * - MESSAGE_REACTION_ADD\n * - MESSAGE_REACTION_REMOVE\n * - MESSAGE_REACTION_REMOVE_ALL\n * - USER_UPDATE\n * - USER_NOTE_UPDATE\n * - PRESENCE_UPDATE\n * - VOICE_STATE_UPDATE\n * - TYPING_START\n * - VOICE_SERVER_UPDATE\n * - RELATIONSHIP_ADD\n * - RELATIONSHIP_REMOVE\n * @typedef {string} WSEventType\n */\nexports.WSEvents = {\n  READY: 'READY',\n  GUILD_SYNC: 'GUILD_SYNC',\n  GUILD_CREATE: 'GUILD_CREATE',\n  GUILD_DELETE: 'GUILD_DELETE',\n  GUILD_UPDATE: 'GUILD_UPDATE',\n  GUILD_MEMBER_ADD: 'GUILD_MEMBER_ADD',\n  GUILD_MEMBER_REMOVE: 'GUILD_MEMBER_REMOVE',\n  GUILD_MEMBER_UPDATE: 'GUILD_MEMBER_UPDATE',\n  GUILD_MEMBERS_CHUNK: 'GUILD_MEMBERS_CHUNK',\n  GUILD_ROLE_CREATE: 'GUILD_ROLE_CREATE',\n  GUILD_ROLE_DELETE: 'GUILD_ROLE_DELETE',\n  GUILD_ROLE_UPDATE: 'GUILD_ROLE_UPDATE',\n  GUILD_BAN_ADD: 'GUILD_BAN_ADD',\n  GUILD_BAN_REMOVE: 'GUILD_BAN_REMOVE',\n  GUILD_EMOJIS_UPDATE: 'GUILD_EMOJIS_UPDATE',\n  CHANNEL_CREATE: 'CHANNEL_CREATE',\n  CHANNEL_DELETE: 'CHANNEL_DELETE',\n  CHANNEL_UPDATE: 'CHANNEL_UPDATE',\n  CHANNEL_PINS_UPDATE: 'CHANNEL_PINS_UPDATE',\n  MESSAGE_CREATE: 'MESSAGE_CREATE',\n  MESSAGE_DELETE: 'MESSAGE_DELETE',\n  MESSAGE_UPDATE: 'MESSAGE_UPDATE',\n  MESSAGE_DELETE_BULK: 'MESSAGE_DELETE_BULK',\n  MESSAGE_REACTION_ADD: 'MESSAGE_REACTION_ADD',\n  MESSAGE_REACTION_REMOVE: 'MESSAGE_REACTION_REMOVE',\n  MESSAGE_REACTION_REMOVE_ALL: 'MESSAGE_REACTION_REMOVE_ALL',\n  USER_UPDATE: 'USER_UPDATE',\n  USER_NOTE_UPDATE: 'USER_NOTE_UPDATE',\n  PRESENCE_UPDATE: 'PRESENCE_UPDATE',\n  VOICE_STATE_UPDATE: 'VOICE_STATE_UPDATE',\n  TYPING_START: 'TYPING_START',\n  VOICE_SERVER_UPDATE: 'VOICE_SERVER_UPDATE',\n  RELATIONSHIP_ADD: 'RELATIONSHIP_ADD',\n  RELATIONSHIP_REMOVE: 'RELATIONSHIP_REMOVE',\n};\n\nexports.MessageTypes = {\n  0: 'DEFAULT',\n  1: 'RECIPIENT_ADD',\n  2: 'RECIPIENT_REMOVE',\n  3: 'CALL',\n  4: 'CHANNEL_NAME_CHANGE',\n  5: 'CHANNEL_ICON_CHANGE',\n  6: 'PINS_ADD',\n};\n\nexports.DefaultAvatars = {\n  BLURPLE: '6debd47ed13483642cf09e832ed0bc1b',\n  GREY: '322c936a8c8be1b803cd94861bdfa868',\n  GREEN: 'dd4dbc0016779df1378e7812eabaa04d',\n  ORANGE: '0e291f67c9274a1abdddeb3fd919cbaa',\n  RED: '1cbd08c76f8af6dddce02c5138971129',\n};\n\nconst PermissionFlags = exports.PermissionFlags = {\n  CREATE_INSTANT_INVITE: 1 << 0,\n  KICK_MEMBERS: 1 << 1,\n  BAN_MEMBERS: 1 << 2,\n  ADMINISTRATOR: 1 << 3,\n  MANAGE_CHANNELS: 1 << 4,\n  MANAGE_GUILD: 1 << 5,\n  ADD_REACTIONS: 1 << 6,\n\n  READ_MESSAGES: 1 << 10,\n  SEND_MESSAGES: 1 << 11,\n  SEND_TTS_MESSAGES: 1 << 12,\n  MANAGE_MESSAGES: 1 << 13,\n  EMBED_LINKS: 1 << 14,\n  ATTACH_FILES: 1 << 15,\n  READ_MESSAGE_HISTORY: 1 << 16,\n  MENTION_EVERYONE: 1 << 17,\n  EXTERNAL_EMOJIS: 1 << 18,\n\n  CONNECT: 1 << 20,\n  SPEAK: 1 << 21,\n  MUTE_MEMBERS: 1 << 22,\n  DEAFEN_MEMBERS: 1 << 23,\n  MOVE_MEMBERS: 1 << 24,\n  USE_VAD: 1 << 25,\n\n  CHANGE_NICKNAME: 1 << 26,\n  MANAGE_NICKNAMES: 1 << 27,\n  MANAGE_ROLES_OR_PERMISSIONS: 1 << 28,\n  MANAGE_WEBHOOKS: 1 << 29,\n  MANAGE_EMOJIS: 1 << 30,\n};\n\nlet _ALL_PERMISSIONS = 0;\nfor (const key in PermissionFlags) _ALL_PERMISSIONS |= PermissionFlags[key];\nexports.ALL_PERMISSIONS = _ALL_PERMISSIONS;\nexports.DEFAULT_PERMISSIONS = 104324097;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/rest/RESTManager.js":"const UserAgentManager = require('./UserAgentManager');\nconst RESTMethods = require('./RESTMethods');\nconst SequentialRequestHandler = require('./RequestHandlers/Sequential');\nconst BurstRequestHandler = require('./RequestHandlers/Burst');\nconst APIRequest = require('./APIRequest');\nconst Constants = require('../../util/Constants');\n\nclass RESTManager {\n  constructor(client) {\n    this.client = client;\n    this.handlers = {};\n    this.userAgentManager = new UserAgentManager(this);\n    this.methods = new RESTMethods(this);\n    this.rateLimitedEndpoints = {};\n    this.globallyRateLimited = false;\n  }\n\n  push(handler, apiRequest) {\n    return new Promise((resolve, reject) => {\n      handler.push({\n        request: apiRequest,\n        resolve,\n        reject,\n      });\n    });\n  }\n\n  getRequestHandler() {\n    switch (this.client.options.apiRequestMethod) {\n      case 'sequential':\n        return SequentialRequestHandler;\n      case 'burst':\n        return BurstRequestHandler;\n      default:\n        throw new Error(Constants.Errors.INVALID_RATE_LIMIT_METHOD);\n    }\n  }\n\n  makeRequest(method, url, auth, data, file) {\n    const apiRequest = new APIRequest(this, method, url, auth, data, file);\n\n    if (!this.handlers[apiRequest.route]) {\n      const RequestHandlerType = this.getRequestHandler();\n      this.handlers[apiRequest.route] = new RequestHandlerType(this, apiRequest.route);\n    }\n\n    return this.push(this.handlers[apiRequest.route], apiRequest);\n  }\n}\n\nmodule.exports = RESTManager;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/rest/UserAgentManager.js":"const Constants = require('../../util/Constants');\n\nclass UserAgentManager {\n  constructor(restManager) {\n    this.restManager = restManager;\n    this._userAgent = {\n      url: 'https://github.com/hydrabolt/discord.js',\n      version: Constants.Package.version,\n    };\n  }\n\n  set(info) {\n    this._userAgent.url = info.url || 'https://github.com/hydrabolt/discord.js';\n    this._userAgent.version = info.version || Constants.Package.version;\n  }\n\n  get userAgent() {\n    return `DiscordBot (${this._userAgent.url}, ${this._userAgent.version})`;\n  }\n}\n\nmodule.exports = UserAgentManager;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/rest/RESTMethods.js":"const Constants = require('../../util/Constants');\nconst Collection = require('../../util/Collection');\nconst splitMessage = require('../../util/SplitMessage');\nconst parseEmoji = require('../../util/ParseEmoji');\nconst escapeMarkdown = require('../../util/EscapeMarkdown');\n\nconst User = require('../../structures/User');\nconst GuildMember = require('../../structures/GuildMember');\nconst Message = require('../../structures/Message');\nconst Role = require('../../structures/Role');\nconst Invite = require('../../structures/Invite');\nconst Webhook = require('../../structures/Webhook');\nconst UserProfile = require('../../structures/UserProfile');\nconst ClientOAuth2Application = require('../../structures/ClientOAuth2Application');\n\nclass RESTMethods {\n  constructor(restManager) {\n    this.rest = restManager;\n    this.client = restManager.client;\n  }\n\n  login(token = this.client.token) {\n    return new Promise((resolve, reject) => {\n      if (typeof token !== 'string') throw new Error(Constants.Errors.INVALID_TOKEN);\n      token = token.replace(/^Bot\\s*/i, '');\n      this.client.manager.connectToWebSocket(token, resolve, reject);\n    });\n  }\n\n  logout() {\n    return this.rest.makeRequest('post', Constants.Endpoints.logout, true, {});\n  }\n\n  getGateway() {\n    return this.rest.makeRequest('get', Constants.Endpoints.gateway, true).then(res => {\n      this.client.ws.gateway = `${res.url}/?v=${Constants.PROTOCOL_VERSION}`;\n      return this.client.ws.gateway;\n    });\n  }\n\n  getBotGateway() {\n    return this.rest.makeRequest('get', Constants.Endpoints.botGateway, true);\n  }\n\n  sendMessage(channel, content, { tts, nonce, embed, disableEveryone, split, code } = {}, file = null) {\n    return new Promise((resolve, reject) => {\n      if (typeof content !== 'undefined') content = this.client.resolver.resolveString(content);\n\n      if (content) {\n        if (typeof code !== 'undefined' && (typeof code !== 'boolean' || code === true)) {\n          content = escapeMarkdown(this.client.resolver.resolveString(content), true);\n          content = `\\`\\`\\`${typeof code !== 'boolean' ? code || '' : ''}\\n${content}\\n\\`\\`\\``;\n        }\n\n        if (disableEveryone || (typeof disableEveryone === 'undefined' && this.client.options.disableEveryone)) {\n          content = content.replace(/@(everyone|here)/g, '@\\u200b$1');\n        }\n\n        if (split) content = splitMessage(content, typeof split === 'object' ? split : {});\n      }\n\n      const send = chan => {\n        if (content instanceof Array) {\n          const messages = [];\n          (function sendChunk(list, index) {\n            const options = index === list.length ? { tts, embed } : { tts };\n            chan.send(list[index], options, index === list.length ? file : null).then((message) => {\n              messages.push(message);\n              if (index >= list.length) return resolve(messages);\n              return sendChunk(list, ++index);\n            });\n          }(content, 0));\n        } else {\n          this.rest.makeRequest('post', Constants.Endpoints.channelMessages(chan.id), true, {\n            content, tts, nonce, embed,\n          }, file).then(data => resolve(this.client.actions.MessageCreate.handle(data).message), reject);\n        }\n      };\n\n      if (channel instanceof User || channel instanceof GuildMember) {\n        this.createDM(channel).then(send, reject);\n      } else {\n        send(channel);\n      }\n    });\n  }\n\n  updateMessage(message, content, { embed, code } = {}) {\n    content = this.client.resolver.resolveString(content);\n    if (typeof code !== 'undefined' && (typeof code !== 'boolean' || code === true)) {\n      content = escapeMarkdown(this.client.resolver.resolveString(content), true);\n      content = `\\`\\`\\`${typeof code !== 'boolean' ? code || '' : ''}\\n${content}\\n\\`\\`\\``;\n    }\n    return this.rest.makeRequest('patch', Constants.Endpoints.channelMessage(message.channel.id, message.id), true, {\n      content, embed,\n    }).then(data => this.client.actions.MessageUpdate.handle(data).updated);\n  }\n\n  deleteMessage(message) {\n    return this.rest.makeRequest('del', Constants.Endpoints.channelMessage(message.channel.id, message.id), true)\n      .then(() =>\n        this.client.actions.MessageDelete.handle({\n          id: message.id,\n          channel_id: message.channel.id,\n        }).message\n      );\n  }\n\n  bulkDeleteMessages(channel, messages) {\n    return this.rest.makeRequest('post', `${Constants.Endpoints.channelMessages(channel.id)}/bulk_delete`, true, {\n      messages,\n    }).then(() =>\n      this.client.actions.MessageDeleteBulk.handle({\n        channel_id: channel.id,\n        ids: messages,\n      }).messages\n    );\n  }\n\n  createChannel(guild, channelName, channelType, overwrites) {\n    if (overwrites instanceof Collection) overwrites = overwrites.array();\n    return this.rest.makeRequest('post', Constants.Endpoints.guildChannels(guild.id), true, {\n      name: channelName,\n      type: channelType,\n      permission_overwrites: overwrites,\n    }).then(data => this.client.actions.ChannelCreate.handle(data).channel);\n  }\n\n  createDM(recipient) {\n    const dmChannel = this.getExistingDM(recipient);\n    if (dmChannel) return Promise.resolve(dmChannel);\n    return this.rest.makeRequest('post', Constants.Endpoints.userChannels(this.client.user.id), true, {\n      recipient_id: recipient.id,\n    }).then(data => this.client.actions.ChannelCreate.handle(data).channel);\n  }\n\n  getExistingDM(recipient) {\n    return this.client.channels.find(channel =>\n      channel.recipient && channel.recipient.id === recipient.id\n    );\n  }\n\n  deleteChannel(channel) {\n    if (channel instanceof User || channel instanceof GuildMember) channel = this.getExistingDM(channel);\n    if (!channel) return Promise.reject(new Error('No channel to delete.'));\n    return this.rest.makeRequest('del', Constants.Endpoints.channel(channel.id), true).then(data => {\n      data.id = channel.id;\n      return this.client.actions.ChannelDelete.handle(data).channel;\n    });\n  }\n\n  updateChannel(channel, _data) {\n    const data = {};\n    data.name = (_data.name || channel.name).trim();\n    data.topic = _data.topic || channel.topic;\n    data.position = _data.position || channel.position;\n    data.bitrate = _data.bitrate || channel.bitrate;\n    data.user_limit = _data.userLimit || channel.userLimit;\n    return this.rest.makeRequest('patch', Constants.Endpoints.channel(channel.id), true, data).then(newData =>\n      this.client.actions.ChannelUpdate.handle(newData).updated\n    );\n  }\n\n  leaveGuild(guild) {\n    if (guild.ownerID === this.client.user.id) return Promise.reject(new Error('Guild is owned by the client.'));\n    return this.rest.makeRequest('del', Constants.Endpoints.meGuild(guild.id), true).then(() =>\n      this.client.actions.GuildDelete.handle({ id: guild.id }).guild\n    );\n  }\n\n  createGuild(options) {\n    options.icon = this.client.resolver.resolveBase64(options.icon) || null;\n    options.region = options.region || 'us-central';\n    return new Promise((resolve, reject) => {\n      this.rest.makeRequest('post', Constants.Endpoints.guilds, true, options).then(data => {\n        if (this.client.guilds.has(data.id)) {\n          resolve(this.client.guilds.get(data.id));\n          return;\n        }\n\n        const handleGuild = guild => {\n          if (guild.id === data.id) {\n            this.client.removeListener('guildCreate', handleGuild);\n            this.client.clearTimeout(timeout);\n            resolve(guild);\n          }\n        };\n        this.client.on('guildCreate', handleGuild);\n\n        const timeout = this.client.setTimeout(() => {\n          this.client.removeListener('guildCreate', handleGuild);\n          reject(new Error('Took too long to receive guild data.'));\n        }, 10000);\n      }, reject);\n    });\n  }\n\n  // untested but probably will work\n  deleteGuild(guild) {\n    return this.rest.makeRequest('del', Constants.Endpoints.guild(guild.id), true).then(() =>\n      this.client.actions.GuildDelete.handle({ id: guild.id }).guild\n    );\n  }\n\n  getUser(userID) {\n    return this.rest.makeRequest('get', Constants.Endpoints.user(userID), true).then(data =>\n      this.client.actions.UserGet.handle(data).user\n    );\n  }\n\n  updateCurrentUser(_data, password) {\n    const user = this.client.user;\n    const data = {};\n    data.username = _data.username || user.username;\n    data.avatar = this.client.resolver.resolveBase64(_data.avatar) || user.avatar;\n    if (!user.bot) {\n      data.email = _data.email || user.email;\n      data.password = password;\n      if (_data.new_password) data.new_password = _data.newPassword;\n    }\n    return this.rest.makeRequest('patch', Constants.Endpoints.me, true, data).then(newData =>\n      this.client.actions.UserUpdate.handle(newData).updated\n    );\n  }\n\n  updateGuild(guild, _data) {\n    const data = {};\n    if (_data.name) data.name = _data.name;\n    if (_data.region) data.region = _data.region;\n    if (_data.verificationLevel) data.verification_level = Number(_data.verificationLevel);\n    if (_data.afkChannel) data.afk_channel_id = this.client.resolver.resolveChannel(_data.afkChannel).id;\n    if (_data.afkTimeout) data.afk_timeout = Number(_data.afkTimeout);\n    if (_data.icon) data.icon = this.client.resolver.resolveBase64(_data.icon);\n    if (_data.owner) data.owner_id = this.client.resolver.resolveUser(_data.owner).id;\n    if (_data.splash) data.splash = this.client.resolver.resolveBase64(_data.splash);\n    return this.rest.makeRequest('patch', Constants.Endpoints.guild(guild.id), true, data).then(newData =>\n      this.client.actions.GuildUpdate.handle(newData).updated\n    );\n  }\n\n  kickGuildMember(guild, member) {\n    return this.rest.makeRequest('del', Constants.Endpoints.guildMember(guild.id, member.id), true).then(() =>\n      this.client.actions.GuildMemberRemove.handle({\n        guild_id: guild.id,\n        user: member.user,\n      }).member\n    );\n  }\n\n  createGuildRole(guild) {\n    return this.rest.makeRequest('post', Constants.Endpoints.guildRoles(guild.id), true).then(role =>\n      this.client.actions.GuildRoleCreate.handle({\n        guild_id: guild.id,\n        role,\n      }).role\n    );\n  }\n\n  deleteGuildRole(role) {\n    return this.rest.makeRequest('del', Constants.Endpoints.guildRole(role.guild.id, role.id), true).then(() =>\n      this.client.actions.GuildRoleDelete.handle({\n        guild_id: role.guild.id,\n        role_id: role.id,\n      }).role\n    );\n  }\n\n  setChannelOverwrite(channel, payload) {\n    return this.rest.makeRequest(\n      'put', `${Constants.Endpoints.channelPermissions(channel.id)}/${payload.id}`, true, payload\n    );\n  }\n\n  deletePermissionOverwrites(overwrite) {\n    return this.rest.makeRequest(\n      'del', `${Constants.Endpoints.channelPermissions(overwrite.channel.id)}/${overwrite.id}`, true\n    ).then(() => overwrite);\n  }\n\n  getChannelMessages(channel, payload = {}) {\n    const params = [];\n    if (payload.limit) params.push(`limit=${payload.limit}`);\n    if (payload.around) params.push(`around=${payload.around}`);\n    else if (payload.before) params.push(`before=${payload.before}`);\n    else if (payload.after) params.push(`after=${payload.after}`);\n\n    let endpoint = Constants.Endpoints.channelMessages(channel.id);\n    if (params.length > 0) endpoint += `?${params.join('&')}`;\n    return this.rest.makeRequest('get', endpoint, true);\n  }\n\n  getChannelMessage(channel, messageID) {\n    const msg = channel.messages.get(messageID);\n    if (msg) return Promise.resolve(msg);\n    return this.rest.makeRequest('get', Constants.Endpoints.channelMessage(channel.id, messageID), true);\n  }\n\n  getGuildMember(guild, user) {\n    return this.rest.makeRequest('get', Constants.Endpoints.guildMember(guild.id, user.id), true).then(data =>\n      this.client.actions.GuildMemberGet.handle(guild, data).member\n    );\n  }\n\n  updateGuildMember(member, data) {\n    if (data.channel) data.channel_id = this.client.resolver.resolveChannel(data.channel).id;\n    if (data.roles) data.roles = data.roles.map(role => role instanceof Role ? role.id : role);\n\n    let endpoint = Constants.Endpoints.guildMember(member.guild.id, member.id);\n    // fix your endpoints, discord ;-;\n    if (member.id === this.client.user.id) {\n      const keys = Object.keys(data);\n      if (keys.length === 1 && keys[0] === 'nick') {\n        endpoint = Constants.Endpoints.guildMemberNickname(member.guild.id);\n      }\n    }\n\n    return this.rest.makeRequest('patch', endpoint, true, data).then(newData =>\n      member.guild._updateMember(member, newData).mem\n    );\n  }\n\n  addMemberRole(member, role) {\n    return this.rest.makeRequest('put', Constants.Endpoints.guildMemberRole(member.guild.id, member.id, role.id), true)\n      .then(() => {\n        if (!member._roles.includes(role.id)) member._roles.push(role.id);\n        return member;\n      });\n  }\n\n  removeMemberRole(member, role) {\n    return this.rest.makeRequest(\n      'delete',\n      Constants.Endpoints.guildMemberRole(member.guild.id, member.id, role.id),\n      true\n    ).then(() => {\n      const index = member._roles.indexOf(role.id);\n      if (index >= 0) member._roles.splice(index, 1);\n      return member;\n    });\n  }\n\n  sendTyping(channelID) {\n    return this.rest.makeRequest('post', `${Constants.Endpoints.channel(channelID)}/typing`, true);\n  }\n\n  banGuildMember(guild, member, deleteDays = 0) {\n    const id = this.client.resolver.resolveUserID(member);\n    if (!id) return Promise.reject(new Error('Couldn\\'t resolve the user ID to ban.'));\n    return this.rest.makeRequest(\n      'put', `${Constants.Endpoints.guildBans(guild.id)}/${id}?delete-message-days=${deleteDays}`, true, {\n        'delete-message-days': deleteDays,\n      }\n    ).then(() => {\n      if (member instanceof GuildMember) return member;\n      const user = this.client.resolver.resolveUser(id);\n      if (user) {\n        member = this.client.resolver.resolveGuildMember(guild, user);\n        return member || user;\n      }\n      return id;\n    });\n  }\n\n  unbanGuildMember(guild, member) {\n    return new Promise((resolve, reject) => {\n      const id = this.client.resolver.resolveUserID(member);\n      if (!id) throw new Error('Couldn\\'t resolve the user ID to unban.');\n\n      const listener = (eGuild, eUser) => {\n        if (eGuild.id === guild.id && eUser.id === id) {\n          this.client.removeListener(Constants.Events.GUILD_BAN_REMOVE, listener);\n          this.client.clearTimeout(timeout);\n          resolve(eUser);\n        }\n      };\n      this.client.on(Constants.Events.GUILD_BAN_REMOVE, listener);\n\n      const timeout = this.client.setTimeout(() => {\n        this.client.removeListener(Constants.Events.GUILD_BAN_REMOVE, listener);\n        reject(new Error('Took too long to receive the ban remove event.'));\n      }, 10000);\n\n      this.rest.makeRequest('del', `${Constants.Endpoints.guildBans(guild.id)}/${id}`, true).catch(err => {\n        this.client.removeListener(Constants.Events.GUILD_BAN_REMOVE, listener);\n        this.client.clearTimeout(timeout);\n        reject(err);\n      });\n    });\n  }\n\n  getGuildBans(guild) {\n    return this.rest.makeRequest('get', Constants.Endpoints.guildBans(guild.id), true).then(banItems => {\n      const bannedUsers = new Collection();\n      for (const banItem of banItems) {\n        const user = this.client.dataManager.newUser(banItem.user);\n        bannedUsers.set(user.id, user);\n      }\n      return bannedUsers;\n    });\n  }\n\n  updateGuildRole(role, _data) {\n    const data = {};\n    data.name = _data.name || role.name;\n    data.position = typeof _data.position !== 'undefined' ? _data.position : role.position;\n    data.color = _data.color || role.color;\n    if (typeof data.color === 'string' && data.color.startsWith('#')) {\n      data.color = parseInt(data.color.replace('#', ''), 16);\n    }\n    data.hoist = typeof _data.hoist !== 'undefined' ? _data.hoist : role.hoist;\n    data.mentionable = typeof _data.mentionable !== 'undefined' ? _data.mentionable : role.mentionable;\n\n    if (_data.permissions) {\n      let perms = 0;\n      for (let perm of _data.permissions) {\n        if (typeof perm === 'string') perm = Constants.PermissionFlags[perm];\n        perms |= perm;\n      }\n      data.permissions = perms;\n    } else {\n      data.permissions = role.permissions;\n    }\n\n    return this.rest.makeRequest(\n      'patch', Constants.Endpoints.guildRole(role.guild.id, role.id), true, data\n    ).then(_role =>\n      this.client.actions.GuildRoleUpdate.handle({\n        role: _role,\n        guild_id: role.guild.id,\n      }).updated\n    );\n  }\n\n  pinMessage(message) {\n    return this.rest.makeRequest('put', `${Constants.Endpoints.channel(message.channel.id)}/pins/${message.id}`, true)\n      .then(() => message);\n  }\n\n  unpinMessage(message) {\n    return this.rest.makeRequest('del', `${Constants.Endpoints.channel(message.channel.id)}/pins/${message.id}`, true)\n      .then(() => message);\n  }\n\n  getChannelPinnedMessages(channel) {\n    return this.rest.makeRequest('get', `${Constants.Endpoints.channel(channel.id)}/pins`, true);\n  }\n\n  createChannelInvite(channel, options) {\n    const payload = {};\n    payload.temporary = options.temporary;\n    payload.max_age = options.maxAge;\n    payload.max_uses = options.maxUses;\n    return this.rest.makeRequest('post', `${Constants.Endpoints.channelInvites(channel.id)}`, true, payload)\n      .then(invite => new Invite(this.client, invite));\n  }\n\n  deleteInvite(invite) {\n    return this.rest.makeRequest('del', Constants.Endpoints.invite(invite.code), true).then(() => invite);\n  }\n\n  getInvite(code) {\n    return this.rest.makeRequest('get', Constants.Endpoints.invite(code), true).then(invite =>\n      new Invite(this.client, invite)\n    );\n  }\n\n  getGuildInvites(guild) {\n    return this.rest.makeRequest('get', Constants.Endpoints.guildInvites(guild.id), true).then(inviteItems => {\n      const invites = new Collection();\n      for (const inviteItem of inviteItems) {\n        const invite = new Invite(this.client, inviteItem);\n        invites.set(invite.code, invite);\n      }\n      return invites;\n    });\n  }\n\n  pruneGuildMembers(guild, days, dry) {\n    return this.rest.makeRequest(dry ? 'get' : 'post', `${Constants.Endpoints.guildPrune(guild.id)}?days=${days}`, true)\n      .then(data => data.pruned);\n  }\n\n  createEmoji(guild, image, name) {\n    return this.rest.makeRequest('post', `${Constants.Endpoints.guildEmojis(guild.id)}`, true, { name, image })\n      .then(data => this.client.actions.EmojiCreate.handle(data, guild).emoji);\n  }\n\n  deleteEmoji(emoji) {\n    return this.rest.makeRequest('delete', `${Constants.Endpoints.guildEmojis(emoji.guild.id)}/${emoji.id}`, true)\n      .then(() => this.client.actions.EmojiDelete.handle(emoji).data);\n  }\n\n  getWebhook(id, token) {\n    return this.rest.makeRequest('get', Constants.Endpoints.webhook(id, token), !token).then(data =>\n      new Webhook(this.client, data)\n    );\n  }\n\n  getGuildWebhooks(guild) {\n    return this.rest.makeRequest('get', Constants.Endpoints.guildWebhooks(guild.id), true).then(data => {\n      const hooks = new Collection();\n      for (const hook of data) hooks.set(hook.id, new Webhook(this.client, hook));\n      return hooks;\n    });\n  }\n\n  getChannelWebhooks(channel) {\n    return this.rest.makeRequest('get', Constants.Endpoints.channelWebhooks(channel.id), true).then(data => {\n      const hooks = new Collection();\n      for (const hook of data) hooks.set(hook.id, new Webhook(this.client, hook));\n      return hooks;\n    });\n  }\n\n  createWebhook(channel, name, avatar) {\n    return this.rest.makeRequest('post', Constants.Endpoints.channelWebhooks(channel.id), true, { name, avatar })\n      .then(data => new Webhook(this.client, data));\n  }\n\n  editWebhook(webhook, name, avatar) {\n    return this.rest.makeRequest('patch', Constants.Endpoints.webhook(webhook.id, webhook.token), false, {\n      name,\n      avatar,\n    }).then(data => {\n      webhook.name = data.name;\n      webhook.avatar = data.avatar;\n      return webhook;\n    });\n  }\n\n  deleteWebhook(webhook) {\n    return this.rest.makeRequest('delete', Constants.Endpoints.webhook(webhook.id, webhook.token), false);\n  }\n\n  sendWebhookMessage(webhook, content, { avatarURL, tts, disableEveryone, embeds } = {}, file = null) {\n    if (typeof content !== 'undefined') content = this.client.resolver.resolveString(content);\n    if (content) {\n      if (disableEveryone || (typeof disableEveryone === 'undefined' && this.client.options.disableEveryone)) {\n        content = content.replace(/@(everyone|here)/g, '@\\u200b$1');\n      }\n    }\n    return this.rest.makeRequest('post', `${Constants.Endpoints.webhook(webhook.id, webhook.token)}?wait=true`, false, {\n      username: webhook.name,\n      avatar_url: avatarURL,\n      content,\n      tts,\n      file,\n      embeds,\n    });\n  }\n\n  sendSlackWebhookMessage(webhook, body) {\n    return this.rest.makeRequest(\n      'post', `${Constants.Endpoints.webhook(webhook.id, webhook.token)}/slack?wait=true`, false, body\n    );\n  }\n\n  fetchUserProfile(user) {\n    return this.rest.makeRequest('get', Constants.Endpoints.userProfile(user.id), true).then(data =>\n      new UserProfile(user, data)\n    );\n  }\n\n  fetchMeMentions(options) {\n    if (options.guild) options.guild = options.guild.id ? options.guild.id : options.guild;\n    return this.rest.makeRequest(\n      'get',\n      Constants.Endpoints.meMentions(options.limit, options.roles, options.everyone, options.guild)\n    ).then(res => res.body.map(m => new Message(this.client.channels.get(m.channel_id), m, this.client)));\n  }\n\n  addFriend(user) {\n    return this.rest.makeRequest('post', Constants.Endpoints.relationships('@me'), true, {\n      username: user.username,\n      discriminator: user.discriminator,\n    }).then(() => user);\n  }\n\n  removeFriend(user) {\n    return this.rest.makeRequest('delete', `${Constants.Endpoints.relationships('@me')}/${user.id}`, true)\n      .then(() => user);\n  }\n\n  blockUser(user) {\n    return this.rest.makeRequest('put', `${Constants.Endpoints.relationships('@me')}/${user.id}`, true, { type: 2 })\n      .then(() => user);\n  }\n\n  unblockUser(user) {\n    return this.rest.makeRequest('delete', `${Constants.Endpoints.relationships('@me')}/${user.id}`, true)\n      .then(() => user);\n  }\n\n  setRolePositions(guildID, roles) {\n    return this.rest.makeRequest('patch', Constants.Endpoints.guildRoles(guildID), true, roles).then(() =>\n      this.client.actions.GuildRolesPositionUpdate.handle({\n        guild_id: guildID,\n        roles,\n      }).guild\n    );\n  }\n\n  addMessageReaction(message, emoji) {\n    return this.rest.makeRequest(\n      'put', Constants.Endpoints.selfMessageReaction(message.channel.id, message.id, emoji), true\n    ).then(() =>\n      this.client.actions.MessageReactionAdd.handle({\n        user_id: this.client.user.id,\n        message_id: message.id,\n        emoji: parseEmoji(emoji),\n        channel_id: message.channel.id,\n      }).reaction\n    );\n  }\n\n  removeMessageReaction(message, emoji, user) {\n    let endpoint = Constants.Endpoints.selfMessageReaction(message.channel.id, message.id, emoji);\n    if (user.id !== this.client.user.id) {\n      endpoint = Constants.Endpoints.userMessageReaction(message.channel.id, message.id, emoji, null, user.id);\n    }\n    return this.rest.makeRequest('delete', endpoint, true).then(() =>\n      this.client.actions.MessageReactionRemove.handle({\n        user_id: user.id,\n        message_id: message.id,\n        emoji: parseEmoji(emoji),\n        channel_id: message.channel.id,\n      }).reaction\n    );\n  }\n\n  removeMessageReactions(message) {\n    return this.rest.makeRequest('delete', Constants.Endpoints.messageReactions(message.channel.id, message.id), true)\n      .then(() => message);\n  }\n\n  getMessageReactionUsers(message, emoji, limit = 100) {\n    return this.rest.makeRequest(\n      'get', Constants.Endpoints.messageReaction(message.channel.id, message.id, emoji, limit), true\n    );\n  }\n\n  getMyApplication() {\n    return this.rest.makeRequest('get', Constants.Endpoints.myApplication, true).then(app =>\n      new ClientOAuth2Application(this.client, app)\n    );\n  }\n\n  setNote(user, note) {\n    return this.rest.makeRequest('put', Constants.Endpoints.note(user.id), true, { note }).then(() => user);\n  }\n}\n\nmodule.exports = RESTMethods;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/util/Collection.js":"/**\n * A Map with additional utility methods. This is used throughout discord.js rather than Arrays for anything that has\n * an ID, for significantly improved performance and ease-of-use.\n * @extends {Map}\n */\nclass Collection extends Map {\n  constructor(iterable) {\n    super(iterable);\n\n    /**\n     * Cached array for the `array()` method - will be reset to `null` whenever `set()` or `delete()` are called.\n     * @type {?Array}\n     * @private\n     */\n    this._array = null;\n\n    /**\n     * Cached array for the `keyArray()` method - will be reset to `null` whenever `set()` or `delete()` are called.\n     * @type {?Array}\n     * @private\n     */\n    this._keyArray = null;\n  }\n\n  set(key, val) {\n    this._array = null;\n    this._keyArray = null;\n    return super.set(key, val);\n  }\n\n  delete(key) {\n    this._array = null;\n    this._keyArray = null;\n    return super.delete(key);\n  }\n\n  /**\n   * Creates an ordered array of the values of this collection, and caches it internally. The array will only be\n   * reconstructed if an item is added to or removed from the collection, or if you change the length of the array\n   * itself. If you don't want this caching behaviour, use `Array.from(collection.values())` instead.\n   * @returns {Array}\n   */\n  array() {\n    if (!this._array || this._array.length !== this.size) this._array = Array.from(this.values());\n    return this._array;\n  }\n\n  /**\n   * Creates an ordered array of the keys of this collection, and caches it internally. The array will only be\n   * reconstructed if an item is added to or removed from the collection, or if you change the length of the array\n   * itself. If you don't want this caching behaviour, use `Array.from(collection.keys())` instead.\n   * @returns {Array}\n   */\n  keyArray() {\n    if (!this._keyArray || this._keyArray.length !== this.size) this._keyArray = Array.from(this.keys());\n    return this._keyArray;\n  }\n\n  /**\n   * Obtains the first item in this collection.\n   * @returns {*}\n   */\n  first() {\n    return this.values().next().value;\n  }\n\n  /**\n   * Obtains the first key in this collection.\n   * @returns {*}\n   */\n  firstKey() {\n    return this.keys().next().value;\n  }\n\n  /**\n   * Obtains the last item in this collection. This relies on the `array()` method, and thus the caching mechanism\n   * applies here as well.\n   * @returns {*}\n   */\n  last() {\n    const arr = this.array();\n    return arr[arr.length - 1];\n  }\n\n  /**\n   * Obtains the last key in this collection. This relies on the `keyArray()` method, and thus the caching mechanism\n   * applies here as well.\n   * @returns {*}\n   */\n  lastKey() {\n    const arr = this.keyArray();\n    return arr[arr.length - 1];\n  }\n\n  /**\n   * Obtains a random item from this collection. This relies on the `array()` method, and thus the caching mechanism\n   * applies here as well.\n   * @returns {*}\n   */\n  random() {\n    const arr = this.array();\n    return arr[Math.floor(Math.random() * arr.length)];\n  }\n\n  /**\n   * Obtains a random key from this collection. This relies on the `keyArray()` method, and thus the caching mechanism\n   * applies here as well.\n   * @returns {*}\n   */\n  randomKey() {\n    const arr = this.keyArray();\n    return arr[Math.floor(Math.random() * arr.length)];\n  }\n\n  /**\n   * Searches for all items where their specified property's value is identical to the given value\n   * (`item[prop] === value`).\n   * @param {string} prop The property to test against\n   * @param {*} value The expected value\n   * @returns {Array}\n   * @example\n   * collection.findAll('username', 'Bob');\n   */\n  findAll(prop, value) {\n    if (typeof prop !== 'string') throw new TypeError('Key must be a string.');\n    if (typeof value === 'undefined') throw new Error('Value must be specified.');\n    const results = [];\n    for (const item of this.values()) {\n      if (item[prop] === value) results.push(item);\n    }\n    return results;\n  }\n\n  /**\n   * Searches for a single item where its specified property's value is identical to the given value\n   * (`item[prop] === value`), or the given function returns a truthy value. In the latter case, this is identical to\n   * [Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).\n   * <warn>Do not use this to obtain an item by its ID. Instead, use `collection.get(id)`. See\n   * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) for details.</warn>\n   * @param {string|Function} propOrFn The property to test against, or the function to test with\n   * @param {*} [value] The expected value - only applicable and required if using a property for the first argument\n   * @returns {*}\n   * @example\n   * collection.find('username', 'Bob');\n   * @example\n   * collection.find(val => val.username === 'Bob');\n   */\n  find(propOrFn, value) {\n    if (typeof propOrFn === 'string') {\n      if (typeof value === 'undefined') throw new Error('Value must be specified.');\n      if (propOrFn === 'id') throw new RangeError('Don\\'t use .find() with IDs. Instead, use .get(id).');\n      for (const item of this.values()) {\n        if (item[propOrFn] === value) return item;\n      }\n      return null;\n    } else if (typeof propOrFn === 'function') {\n      for (const [key, val] of this) {\n        if (propOrFn(val, key, this)) return val;\n      }\n      return null;\n    } else {\n      throw new Error('First argument must be a property string or a function.');\n    }\n  }\n\n  /* eslint-disable max-len */\n  /**\n   * Searches for the key of a single item where its specified property's value is identical to the given value\n   * (`item[prop] === value`), or the given function returns a truthy value. In the latter case, this is identical to\n   * [Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).\n   * @param {string|Function} propOrFn The property to test against, or the function to test with\n   * @param {*} [value] The expected value - only applicable and required if using a property for the first argument\n   * @returns {*}\n   * @example\n   * collection.findKey('username', 'Bob');\n   * @example\n   * collection.findKey(val => val.username === 'Bob');\n   */\n  /* eslint-enable max-len */\n  findKey(propOrFn, value) {\n    if (typeof propOrFn === 'string') {\n      if (typeof value === 'undefined') throw new Error('Value must be specified.');\n      for (const [key, val] of this) {\n        if (val[propOrFn] === value) return key;\n      }\n      return null;\n    } else if (typeof propOrFn === 'function') {\n      for (const [key, val] of this) {\n        if (propOrFn(val, key, this)) return key;\n      }\n      return null;\n    } else {\n      throw new Error('First argument must be a property string or a function.');\n    }\n  }\n\n  /**\n   * Searches for the existence of a single item where its specified property's value is identical to the given value\n   * (`item[prop] === value`).\n   * <warn>Do not use this to check for an item by its ID. Instead, use `collection.has(id)`. See\n   * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has) for details.</warn>\n   * @param {string} prop The property to test against\n   * @param {*} value The expected value\n   * @returns {boolean}\n   * @example\n   * if (collection.exists('username', 'Bob')) {\n   *  console.log('user here!');\n   * }\n   */\n  exists(prop, value) {\n    if (prop === 'id') throw new RangeError('Don\\'t use .exists() with IDs. Instead, use .has(id).');\n    return Boolean(this.find(prop, value));\n  }\n\n  /**\n   * Identical to\n   * [Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n   * but returns a Collection instead of an Array.\n   * @param {Function} fn Function used to test (should return a boolean)\n   * @param {Object} [thisArg] Value to use as `this` when executing function\n   * @returns {Collection}\n   */\n  filter(fn, thisArg) {\n    if (thisArg) fn = fn.bind(thisArg);\n    const results = new Collection();\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) results.set(key, val);\n    }\n    return results;\n  }\n\n  /**\n   * Identical to\n   * [Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).\n   * @param {Function} fn Function used to test (should return a boolean)\n   * @param {Object} [thisArg] Value to use as `this` when executing function\n   * @returns {Array}\n   */\n  filterArray(fn, thisArg) {\n    if (thisArg) fn = fn.bind(thisArg);\n    const results = [];\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) results.push(val);\n    }\n    return results;\n  }\n\n  /**\n   * Identical to\n   * [Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).\n   * @param {Function} fn Function that produces an element of the new array, taking three arguments\n   * @param {*} [thisArg] Value to use as `this` when executing function\n   * @returns {Array}\n   */\n  map(fn, thisArg) {\n    if (thisArg) fn = fn.bind(thisArg);\n    const arr = new Array(this.size);\n    let i = 0;\n    for (const [key, val] of this) arr[i++] = fn(val, key, this);\n    return arr;\n  }\n\n  /**\n   * Identical to\n   * [Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).\n   * @param {Function} fn Function used to test (should return a boolean)\n   * @param {Object} [thisArg] Value to use as `this` when executing function\n   * @returns {boolean}\n   */\n  some(fn, thisArg) {\n    if (thisArg) fn = fn.bind(thisArg);\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) return true;\n    }\n    return false;\n  }\n\n  /**\n   * Identical to\n   * [Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).\n   * @param {Function} fn Function used to test (should return a boolean)\n   * @param {Object} [thisArg] Value to use as `this` when executing function\n   * @returns {boolean}\n   */\n  every(fn, thisArg) {\n    if (thisArg) fn = fn.bind(thisArg);\n    for (const [key, val] of this) {\n      if (!fn(val, key, this)) return false;\n    }\n    return true;\n  }\n\n  /**\n   * Identical to\n   * [Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).\n   * @param {Function} fn Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\n   * and `collection`\n   * @param {*} [initialValue] Starting value for the accumulator\n   * @returns {*}\n   */\n  reduce(fn, initialValue) {\n    let accumulator;\n    if (typeof initialValue !== 'undefined') {\n      accumulator = initialValue;\n      for (const [key, val] of this) accumulator = fn(accumulator, val, key, this);\n    } else {\n      let first = true;\n      for (const [key, val] of this) {\n        if (first) {\n          accumulator = val;\n          first = false;\n          continue;\n        }\n        accumulator = fn(accumulator, val, key, this);\n      }\n    }\n    return accumulator;\n  }\n\n  /**\n   * Combines this collection with others into a new collection. None of the source collections are modified.\n   * @param {...Collection} collections Collections to merge\n   * @returns {Collection}\n   * @example const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);\n   */\n  concat(...collections) {\n    const newColl = new this.constructor();\n    for (const [key, val] of this) newColl.set(key, val);\n    for (const coll of collections) {\n      for (const [key, val] of coll) newColl.set(key, val);\n    }\n    return newColl;\n  }\n\n  /**\n   * Calls the `delete()` method on all items that have it.\n   * @returns {Promise[]}\n   */\n  deleteAll() {\n    const returns = [];\n    for (const item of this.values()) {\n      if (item.delete) returns.push(item.delete());\n    }\n    return returns;\n  }\n\n  /**\n   * Checks if this collection shares identical key-value pairings with another.\n   * This is different to checking for equality using equal-signs, because\n   * the collections may be different objects, but contain the same data.\n   * @param {Collection} collection Collection to compare with\n   * @returns {boolean} Whether the collections have identical contents\n   */\n  equals(collection) {\n    if (!collection) return false;\n    if (this === collection) return true;\n    if (this.size !== collection.size) return false;\n    return !this.find((value, key) => {\n      const testVal = collection.get(key);\n      return testVal !== value || (testVal === undefined && !collection.has(key));\n    });\n  }\n}\n\nmodule.exports = Collection;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/util/SplitMessage.js":"module.exports = function splitMessage(text, { maxLength = 1950, char = '\\n', prepend = '', append = '' } = {}) {\n  if (text.length <= maxLength) return text;\n  const splitText = text.split(char);\n  if (splitText.length === 1) throw new Error('Message exceeds the max length and contains no split characters.');\n  const messages = [''];\n  let msg = 0;\n  for (let i = 0; i < splitText.length; i++) {\n    if (messages[msg].length + splitText[i].length + 1 > maxLength) {\n      messages[msg] += append;\n      messages.push(prepend);\n      msg++;\n    }\n    messages[msg] += (messages[msg].length > 0 && messages[msg] !== prepend ? char : '') + splitText[i];\n  }\n  return messages;\n};\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/webpack.config.js":"/*\n  ONLY RUN BUILDS WITH `npm run web-dist`!\n  DO NOT USE NORMAL WEBPACK! IT WILL NOT WORK!\n*/\n\nconst webpack = require('webpack');\nconst createVariants = require('parallel-webpack').createVariants;\nconst version = require('./package.json').version;\n\nconst createConfig = (options) => {\n  const plugins = [\n    new webpack.DefinePlugin({ 'global.GENTLY': false }),\n  ];\n\n  if (options.minify) plugins.push(new webpack.optimize.UglifyJsPlugin({ minimize: true }));\n\n  const filename = `./webpack/discord${process.env.VERSIONED === 'false' ? '' : '.' + version}${options.minify ? '.min' : ''}.js`; // eslint-disable-line\n\n  return {\n    entry: './src/index.js',\n    output: {\n      path: __dirname,\n      filename,\n    },\n    module: {\n      rules: [\n        { test: /\\.md$/, loader: 'ignore-loader' },\n      ],\n    },\n    node: {\n      fs: 'empty',\n      dns: 'mock',\n      tls: 'mock',\n      child_process: 'empty',\n      dgram: 'empty',\n      zlib: 'empty',\n      __dirname: true,\n    },\n    plugins,\n  };\n};\n\nmodule.exports = createVariants({}, { minify: [false, true] }, createConfig);\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/ClientDataManager.js":"const Constants = require('../util/Constants');\nconst cloneObject = require('../util/CloneObject');\nconst Guild = require('../structures/Guild');\nconst User = require('../structures/User');\nconst DMChannel = require('../structures/DMChannel');\nconst Emoji = require('../structures/Emoji');\nconst TextChannel = require('../structures/TextChannel');\nconst VoiceChannel = require('../structures/VoiceChannel');\nconst GuildChannel = require('../structures/GuildChannel');\nconst GroupDMChannel = require('../structures/GroupDMChannel');\n\nclass ClientDataManager {\n  constructor(client) {\n    this.client = client;\n  }\n\n  get pastReady() {\n    return this.client.ws.status === Constants.Status.READY;\n  }\n\n  newGuild(data) {\n    const already = this.client.guilds.has(data.id);\n    const guild = new Guild(this.client, data);\n    this.client.guilds.set(guild.id, guild);\n    if (this.pastReady && !already) {\n      /**\n       * Emitted whenever the client joins a guild.\n       * @event Client#guildCreate\n       * @param {Guild} guild The created guild\n       */\n      if (this.client.options.fetchAllMembers) {\n        guild.fetchMembers().then(() => { this.client.emit(Constants.Events.GUILD_CREATE, guild); });\n      } else {\n        this.client.emit(Constants.Events.GUILD_CREATE, guild);\n      }\n    }\n\n    return guild;\n  }\n\n  newUser(data) {\n    if (this.client.users.has(data.id)) return this.client.users.get(data.id);\n    const user = new User(this.client, data);\n    this.client.users.set(user.id, user);\n    return user;\n  }\n\n  newChannel(data, guild) {\n    const already = this.client.channels.has(data.id);\n    let channel;\n    if (data.type === Constants.ChannelTypes.DM) {\n      channel = new DMChannel(this.client, data);\n    } else if (data.type === Constants.ChannelTypes.groupDM) {\n      channel = new GroupDMChannel(this.client, data);\n    } else {\n      guild = guild || this.client.guilds.get(data.guild_id);\n      if (guild) {\n        if (data.type === Constants.ChannelTypes.text) {\n          channel = new TextChannel(guild, data);\n          guild.channels.set(channel.id, channel);\n        } else if (data.type === Constants.ChannelTypes.voice) {\n          channel = new VoiceChannel(guild, data);\n          guild.channels.set(channel.id, channel);\n        }\n      }\n    }\n\n    if (channel) {\n      if (this.pastReady && !already) this.client.emit(Constants.Events.CHANNEL_CREATE, channel);\n      this.client.channels.set(channel.id, channel);\n      return channel;\n    }\n\n    return null;\n  }\n\n  newEmoji(data, guild) {\n    const already = guild.emojis.has(data.id);\n    if (data && !already) {\n      let emoji = new Emoji(guild, data);\n      this.client.emit(Constants.Events.GUILD_EMOJI_CREATE, emoji);\n      guild.emojis.set(emoji.id, emoji);\n      return emoji;\n    } else if (already) {\n      return guild.emojis.get(data.id);\n    }\n\n    return null;\n  }\n\n  killEmoji(emoji) {\n    if (!(emoji instanceof Emoji && emoji.guild)) return;\n    this.client.emit(Constants.Events.GUILD_EMOJI_DELETE, emoji);\n    emoji.guild.emojis.delete(emoji.id);\n  }\n\n  killGuild(guild) {\n    const already = this.client.guilds.has(guild.id);\n    this.client.guilds.delete(guild.id);\n    if (already && this.pastReady) this.client.emit(Constants.Events.GUILD_DELETE, guild);\n  }\n\n  killUser(user) {\n    this.client.users.delete(user.id);\n  }\n\n  killChannel(channel) {\n    this.client.channels.delete(channel.id);\n    if (channel instanceof GuildChannel) channel.guild.channels.delete(channel.id);\n  }\n\n  updateGuild(currentGuild, newData) {\n    const oldGuild = cloneObject(currentGuild);\n    currentGuild.setup(newData);\n    if (this.pastReady) this.client.emit(Constants.Events.GUILD_UPDATE, oldGuild, currentGuild);\n  }\n\n  updateChannel(currentChannel, newData) {\n    currentChannel.setup(newData);\n  }\n\n  updateEmoji(currentEmoji, newData) {\n    const oldEmoji = cloneObject(currentEmoji);\n    currentEmoji.setup(newData);\n    this.client.emit(Constants.Events.GUILD_EMOJI_UPDATE, oldEmoji, currentEmoji);\n  }\n}\n\nmodule.exports = ClientDataManager;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/util/CloneObject.js":"module.exports = function cloneObject(obj) {\n  const cloned = Object.create(obj);\n  Object.assign(cloned, obj);\n  return cloned;\n};\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/Guild.js":"const User = require('./User');\nconst Role = require('./Role');\nconst Emoji = require('./Emoji');\nconst Presence = require('./Presence').Presence;\nconst GuildMember = require('./GuildMember');\nconst Constants = require('../util/Constants');\nconst Collection = require('../util/Collection');\nconst cloneObject = require('../util/CloneObject');\nconst arraysEqual = require('../util/ArraysEqual');\n\n/**\n * Represents a guild (or a server) on Discord.\n * <info>It's recommended to see if a guild is available before performing operations or reading data from it. You can\n * check this with `guild.available`.</info>\n */\nclass Guild {\n  constructor(client, data) {\n    /**\n     * The Client that created the instance of the the Guild.\n     * @name Guild#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    /**\n     * A collection of members that are in this guild. The key is the member's ID, the value is the member.\n     * @type {Collection<string, GuildMember>}\n     */\n    this.members = new Collection();\n\n    /**\n     * A collection of channels that are in this guild. The key is the channel's ID, the value is the channel.\n     * @type {Collection<string, GuildChannel>}\n     */\n    this.channels = new Collection();\n\n    /**\n     * A collection of roles that are in this guild. The key is the role's ID, the value is the role.\n     * @type {Collection<string, Role>}\n     */\n    this.roles = new Collection();\n\n    /**\n     * A collection of presences in this guild\n     * @type {Collection<string, Presence>}\n     */\n    this.presences = new Collection();\n\n    if (!data) return;\n    if (data.unavailable) {\n      /**\n       * Whether the guild is available to access. If it is not available, it indicates a server outage.\n       * @type {boolean}\n       */\n      this.available = false;\n\n      /**\n       * The Unique ID of the Guild, useful for comparisons.\n       * @type {string}\n       */\n      this.id = data.id;\n    } else {\n      this.available = true;\n      this.setup(data);\n    }\n  }\n\n  /**\n   * Sets up the Guild\n   * @param {*} data The raw data of the guild\n   * @private\n   */\n  setup(data) {\n    /**\n     * The name of the guild\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The hash of the guild icon, or null if there is no icon.\n     * @type {?string}\n     */\n    this.icon = data.icon;\n\n    /**\n     * The hash of the guild splash image, or null if no splash (VIP only)\n     * @type {?string}\n     */\n    this.splash = data.splash;\n\n    /**\n     * The region the guild is located in\n     * @type {string}\n     */\n    this.region = data.region;\n\n    /**\n     * The full amount of members in this guild as of `READY`\n     * @type {number}\n     */\n    this.memberCount = data.member_count || this.memberCount;\n\n    /**\n     * Whether the guild is \"large\" (has more than 250 members)\n     * @type {boolean}\n     */\n    this.large = data.large || this.large;\n\n    /**\n     * An array of guild features.\n     * @type {Object[]}\n     */\n    this.features = data.features;\n\n    /**\n     * The ID of the application that created this guild (if applicable)\n     * @type {?string}\n     */\n    this.applicationID = data.application_id;\n\n    /**\n     * A collection of emojis that are in this guild. The key is the emoji's ID, the value is the emoji.\n     * @type {Collection<string, Emoji>}\n     */\n    this.emojis = new Collection();\n    for (const emoji of data.emojis) this.emojis.set(emoji.id, new Emoji(this, emoji));\n\n    /**\n     * The time in seconds before a user is counted as \"away from keyboard\".\n     * @type {?number}\n     */\n    this.afkTimeout = data.afk_timeout;\n\n    /**\n     * The ID of the voice channel where AFK members are moved.\n     * @type {?string}\n     */\n    this.afkChannelID = data.afk_channel_id;\n\n    /**\n     * Whether embedded images are enabled on this guild.\n     * @type {boolean}\n     */\n    this.embedEnabled = data.embed_enabled;\n\n    /**\n     * The verification level of the guild.\n     * @type {number}\n     */\n    this.verificationLevel = data.verification_level;\n\n    /**\n     * The timestamp the client user joined the guild at\n     * @type {number}\n     */\n    this.joinedTimestamp = data.joined_at ? new Date(data.joined_at).getTime() : this.joinedTimestamp;\n\n    this.id = data.id;\n    this.available = !data.unavailable;\n    this.features = data.features || this.features || [];\n\n    if (data.members) {\n      this.members.clear();\n      for (const guildUser of data.members) this._addMember(guildUser, false);\n    }\n\n    if (data.owner_id) {\n      /**\n       * The user ID of this guild's owner.\n       * @type {string}\n       */\n      this.ownerID = data.owner_id;\n    }\n\n    if (data.channels) {\n      this.channels.clear();\n      for (const channel of data.channels) this.client.dataManager.newChannel(channel, this);\n    }\n\n    if (data.roles) {\n      this.roles.clear();\n      for (const role of data.roles) {\n        const newRole = new Role(this, role);\n        this.roles.set(newRole.id, newRole);\n      }\n    }\n\n    if (data.presences) {\n      for (const presence of data.presences) {\n        this._setPresence(presence.user.id, presence);\n      }\n    }\n\n    this._rawVoiceStates = new Collection();\n    if (data.voice_states) {\n      for (const voiceState of data.voice_states) {\n        this._rawVoiceStates.set(voiceState.user_id, voiceState);\n        const member = this.members.get(voiceState.user_id);\n        if (member) {\n          member.serverMute = voiceState.mute;\n          member.serverDeaf = voiceState.deaf;\n          member.selfMute = voiceState.self_mute;\n          member.selfDeaf = voiceState.self_deaf;\n          member.voiceSessionID = voiceState.session_id;\n          member.voiceChannelID = voiceState.channel_id;\n          this.channels.get(voiceState.channel_id).members.set(member.user.id, member);\n        }\n      }\n    }\n  }\n\n  /**\n   * The timestamp the guild was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return (this.id / 4194304) + 1420070400000;\n  }\n\n  /**\n   * The time the guild was created\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The time the client user joined the guild\n   * @type {Date}\n   * @readonly\n   */\n  get joinedAt() {\n    return new Date(this.joinedTimestamp);\n  }\n\n  /**\n   * Gets the URL to this guild's icon (if it has one, otherwise it returns null)\n   * @type {?string}\n   * @readonly\n   */\n  get iconURL() {\n    if (!this.icon) return null;\n    return Constants.Endpoints.guildIcon(this.id, this.icon);\n  }\n\n  /**\n   * Gets the URL to this guild's splash (if it has one, otherwise it returns null)\n   * @type {?string}\n   * @readonly\n   */\n  get splashURL() {\n    if (!this.splash) return null;\n    return Constants.Endpoints.guildSplash(this.id, this.splash);\n  }\n\n  /**\n   * The owner of the guild\n   * @type {GuildMember}\n   * @readonly\n   */\n  get owner() {\n    return this.members.get(this.ownerID);\n  }\n\n  /**\n   * If the client is connected to any voice channel in this guild, this will be the relevant VoiceConnection.\n   * @type {?VoiceConnection}\n   * @readonly\n   */\n  get voiceConnection() {\n    if (this.client.browser) return null;\n    return this.client.voice.connections.get(this.id) || null;\n  }\n\n  /**\n   * The `#general` GuildChannel of the server.\n   * @type {GuildChannel}\n   * @readonly\n   */\n  get defaultChannel() {\n    return this.channels.get(this.id);\n  }\n\n  /**\n   * Returns the GuildMember form of a User object, if the user is present in the guild.\n   * @param {UserResolvable} user The user that you want to obtain the GuildMember of\n   * @returns {?GuildMember}\n   * @example\n   * // get the guild member of a user\n   * const member = guild.member(message.author);\n   */\n  member(user) {\n    return this.client.resolver.resolveGuildMember(this, user);\n  }\n\n  /**\n   * Fetch a collection of banned users in this guild.\n   * @returns {Promise<Collection<string, User>>}\n   */\n  fetchBans() {\n    return this.client.rest.methods.getGuildBans(this);\n  }\n\n  /**\n   * Fetch a collection of invites to this guild. Resolves with a collection mapping invites by their codes.\n   * @returns {Promise<Collection<string, Invite>>}\n   */\n  fetchInvites() {\n    return this.client.rest.methods.getGuildInvites(this);\n  }\n\n  /**\n   * Fetch all webhooks for the guild.\n   * @returns {Collection<Webhook>}\n   */\n  fetchWebhooks() {\n    return this.client.rest.methods.getGuildWebhooks(this);\n  }\n\n  /**\n   * Fetch a single guild member from a user.\n   * @param {UserResolvable} user The user to fetch the member for\n   * @returns {Promise<GuildMember>}\n   */\n  fetchMember(user) {\n    if (this._fetchWaiter) return Promise.reject(new Error('Already fetching guild members.'));\n    user = this.client.resolver.resolveUser(user);\n    if (!user) return Promise.reject(new Error('User is not cached. Use Client.fetchUser first.'));\n    if (this.members.has(user.id)) return Promise.resolve(this.members.get(user.id));\n    return this.client.rest.methods.getGuildMember(this, user);\n  }\n\n  /**\n   * Fetches all the members in the guild, even if they are offline. If the guild has less than 250 members,\n   * this should not be necessary.\n   * @param {string} [query=''] An optional query to provide when fetching members\n   * @returns {Promise<Guild>}\n   */\n  fetchMembers(query = '') {\n    return new Promise((resolve, reject) => {\n      if (this._fetchWaiter) throw new Error('Already fetching guild members in ${this.id}.');\n      if (this.memberCount === this.members.size) {\n        resolve(this);\n        return;\n      }\n      this._fetchWaiter = resolve;\n      this.client.ws.send({\n        op: Constants.OPCodes.REQUEST_GUILD_MEMBERS,\n        d: {\n          guild_id: this.id,\n          query,\n          limit: 0,\n        },\n      });\n      this._checkChunks();\n      this.client.setTimeout(() => reject(new Error('Members didn\\'t arrive in time.')), 120 * 1000);\n    });\n  }\n\n  /**\n   * The data for editing a guild\n   * @typedef {Object} GuildEditData\n   * @property {string} [name] The name of the guild\n   * @property {string} [region] The region of the guild\n   * @property {number} [verificationLevel] The verification level of the guild\n   * @property {ChannelResolvable} [afkChannel] The AFK channel of the guild\n   * @property {number} [afkTimeout] The AFK timeout of the guild\n   * @property {Base64Resolvable} [icon] The icon of the guild\n   * @property {GuildMemberResolvable} [owner] The owner of the guild\n   * @property {Base64Resolvable} [splash] The splash screen of the guild\n   */\n\n  /**\n   * Updates the Guild with new information - e.g. a new name.\n   * @param {GuildEditData} data The data to update the guild with\n   * @returns {Promise<Guild>}\n   * @example\n   * // set the guild name and region\n   * guild.edit({\n   *  name: 'Discord Guild',\n   *  region: 'london',\n   * })\n   * .then(updated => console.log(`New guild name ${updated.name} in region ${updated.region}`))\n   * .catch(console.error);\n   */\n  edit(data) {\n    return this.client.rest.methods.updateGuild(this, data);\n  }\n\n  /**\n   * Edit the name of the guild.\n   * @param {string} name The new name of the guild\n   * @returns {Promise<Guild>}\n   * @example\n   * // edit the guild name\n   * guild.setName('Discord Guild')\n   *  .then(updated => console.log(`Updated guild name to ${guild.name}`))\n   *  .catch(console.error);\n   */\n  setName(name) {\n    return this.edit({ name });\n  }\n\n  /**\n   * Edit the region of the guild.\n   * @param {string} region The new region of the guild.\n   * @returns {Promise<Guild>}\n   * @example\n   * // edit the guild region\n   * guild.setRegion('london')\n   *  .then(updated => console.log(`Updated guild region to ${guild.region}`))\n   *  .catch(console.error);\n   */\n  setRegion(region) {\n    return this.edit({ region });\n  }\n\n  /**\n   * Edit the verification level of the guild.\n   * @param {number} verificationLevel The new verification level of the guild\n   * @returns {Promise<Guild>}\n   * @example\n   * // edit the guild verification level\n   * guild.setVerificationLevel(1)\n   *  .then(updated => console.log(`Updated guild verification level to ${guild.verificationLevel}`))\n   *  .catch(console.error);\n   */\n  setVerificationLevel(verificationLevel) {\n    return this.edit({ verificationLevel });\n  }\n\n  /**\n   * Edit the AFK channel of the guild.\n   * @param {ChannelResolvable} afkChannel The new AFK channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // edit the guild AFK channel\n   * guild.setAFKChannel(channel)\n   *  .then(updated => console.log(`Updated guild AFK channel to ${guild.afkChannel}`))\n   *  .catch(console.error);\n   */\n  setAFKChannel(afkChannel) {\n    return this.edit({ afkChannel });\n  }\n\n  /**\n   * Edit the AFK timeout of the guild.\n   * @param {number} afkTimeout The time in seconds that a user must be idle to be considered AFK\n   * @returns {Promise<Guild>}\n   * @example\n   * // edit the guild AFK channel\n   * guild.setAFKTimeout(60)\n   *  .then(updated => console.log(`Updated guild AFK timeout to ${guild.afkTimeout}`))\n   *  .catch(console.error);\n   */\n  setAFKTimeout(afkTimeout) {\n    return this.edit({ afkTimeout });\n  }\n\n  /**\n   * Set a new guild icon.\n   * @param {Base64Resolvable} icon The new icon of the guild\n   * @returns {Promise<Guild>}\n   * @example\n   * // edit the guild icon\n   * guild.setIcon(fs.readFileSync('./icon.png'))\n   *  .then(updated => console.log('Updated the guild icon'))\n   *  .catch(console.error);\n   */\n  setIcon(icon) {\n    return this.edit({ icon });\n  }\n\n  /**\n   * Sets a new owner of the guild.\n   * @param {GuildMemberResolvable} owner The new owner of the guild\n   * @returns {Promise<Guild>}\n   * @example\n   * // edit the guild owner\n   * guild.setOwner(guilds.members[0])\n   *  .then(updated => console.log(`Updated the guild owner to ${updated.owner.username}`))\n   *  .catch(console.error);\n   */\n  setOwner(owner) {\n    return this.edit({ owner });\n  }\n\n  /**\n   * Set a new guild splash screen.\n   * @param {Base64Resolvable} splash The new splash screen of the guild\n   * @returns {Promise<Guild>}\n   * @example\n   * // edit the guild splash\n   * guild.setIcon(fs.readFileSync('./splash.png'))\n   *  .then(updated => console.log('Updated the guild splash'))\n   *  .catch(console.error);\n   */\n  setSplash(splash) {\n    return this.edit({ splash });\n  }\n\n  /**\n   * Bans a user from the guild.\n   * @param {UserResolvable} user The user to ban\n   * @param {number} [deleteDays=0] The amount of days worth of messages from this user that should\n   * also be deleted. Between `0` and `7`.\n   * @returns {Promise<GuildMember|User|string>} Result object will be resolved as specifically as possible.\n   * If the GuildMember cannot be resolved, the User will instead be attempted to be resolved. If that also cannot\n   * be resolved, the user ID will be the result.\n   * @example\n   * // ban a user\n   * guild.ban('123123123123');\n   */\n  ban(user, deleteDays = 0) {\n    return this.client.rest.methods.banGuildMember(this, user, deleteDays);\n  }\n\n  /**\n   * Unbans a user from the guild.\n   * @param {UserResolvable} user The user to unban\n   * @returns {Promise<User>}\n   * @example\n   * // unban a user\n   * guild.unban('123123123123')\n   *  .then(user => console.log(`Unbanned ${user.username} from ${guild.name}`))\n   *  .catch(reject);\n   */\n  unban(user) {\n    return this.client.rest.methods.unbanGuildMember(this, user);\n  }\n\n  /**\n   * Prunes members from the guild based on how long they have been inactive.\n   * @param {number} days Number of days of inactivity required to kick\n   * @param {boolean} [dry=false] If true, will return number of users that will be kicked, without actually doing it\n   * @returns {Promise<number>} The number of members that were/will be kicked\n   * @example\n   * // see how many members will be pruned\n   * guild.pruneMembers(12, true)\n   *   .then(pruned => console.log(`This will prune ${pruned} people!`);\n   *   .catch(console.error);\n   * @example\n   * // actually prune the members\n   * guild.pruneMembers(12)\n   *   .then(pruned => console.log(`I just pruned ${pruned} people!`);\n   *   .catch(console.error);\n   */\n  pruneMembers(days, dry = false) {\n    if (typeof days !== 'number') throw new TypeError('Days must be a number.');\n    return this.client.rest.methods.pruneGuildMembers(this, days, dry);\n  }\n\n  /**\n   * Syncs this guild (already done automatically every 30 seconds).\n   * <warn>This is only available when using a user account.</warn>\n   */\n  sync() {\n    if (!this.client.user.bot) this.client.syncGuilds([this]);\n  }\n\n  /**\n   * Creates a new channel in the guild.\n   * @param {string} name The name of the new channel\n   * @param {string} type The type of the new channel, either `text` or `voice`\n   * @param {Array<PermissionOverwrites|Object>} overwrites Permission overwrites to apply to the new channel\n   * @returns {Promise<TextChannel|VoiceChannel>}\n   * @example\n   * // create a new text channel\n   * guild.createChannel('new-general', 'text')\n   *  .then(channel => console.log(`Created new channel ${channel}`))\n   *  .catch(console.error);\n   */\n  createChannel(name, type, overwrites) {\n    return this.client.rest.methods.createChannel(this, name, type, overwrites);\n  }\n\n  /**\n   * Creates a new role in the guild, and optionally updates it with the given information.\n   * @param {RoleData} [data] The data to update the role with\n   * @returns {Promise<Role>}\n   * @example\n   * // create a new role\n   * guild.createRole()\n   *  .then(role => console.log(`Created role ${role}`))\n   *  .catch(console.error);\n   * @example\n   * // create a new role with data\n   * guild.createRole({ name: 'Super Cool People' })\n   *   .then(role => console.log(`Created role ${role}`))\n   *   .catch(console.error)\n   */\n  createRole(data) {\n    const create = this.client.rest.methods.createGuildRole(this);\n    if (!data) return create;\n    return create.then(role => role.edit(data));\n  }\n\n  /**\n   * Creates a new custom emoji in the guild.\n   * @param {BufferResolvable} attachment The image for the emoji.\n   * @param {string} name The name for the emoji.\n   * @returns {Promise<Emoji>} The created emoji.\n   * @example\n   * // create a new emoji from a url\n   * guild.createEmoji('https://i.imgur.com/w3duR07.png', 'rip')\n   *  .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\n   *  .catch(console.error);\n   * @example\n   * // create a new emoji from a file on your computer\n   * guild.createEmoji('./memes/banana.png', 'banana')\n   *  .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\n   *  .catch(console.error);\n   */\n  createEmoji(attachment, name) {\n    return new Promise(resolve => {\n      if (attachment.startsWith('data:')) {\n        resolve(this.client.rest.methods.createEmoji(this, attachment, name));\n      } else {\n        this.client.resolver.resolveBuffer(attachment).then(data =>\n          resolve(this.client.rest.methods.createEmoji(this, data, name))\n        );\n      }\n    });\n  }\n\n  /**\n   * Delete an emoji.\n   * @param {Emoji|string} emoji The emoji to delete.\n   * @returns {Promise}\n   */\n  deleteEmoji(emoji) {\n    if (!(emoji instanceof Emoji)) emoji = this.emojis.get(emoji);\n    return this.client.rest.methods.deleteEmoji(emoji);\n  }\n\n  /**\n   * Causes the Client to leave the guild.\n   * @returns {Promise<Guild>}\n   * @example\n   * // leave a guild\n   * guild.leave()\n   *  .then(g => console.log(`Left the guild ${g}`))\n   *  .catch(console.error);\n   */\n  leave() {\n    return this.client.rest.methods.leaveGuild(this);\n  }\n\n  /**\n   * Causes the Client to delete the guild.\n   * @returns {Promise<Guild>}\n   * @example\n   * // delete a guild\n   * guild.delete()\n   *  .then(g => console.log(`Deleted the guild ${g}`))\n   *  .catch(console.error);\n   */\n  delete() {\n    return this.client.rest.methods.deleteGuild(this);\n  }\n\n  /**\n   * Set the position of a role in this guild\n   * @param {string|Role} role the role to edit, can be a role object or a role ID.\n   * @param {number} position the new position of the role\n   * @returns {Promise<Guild>}\n   */\n  setRolePosition(role, position) {\n    if (typeof role === 'string') {\n      role = this.roles.get(role);\n      if (!role) return Promise.reject(new Error('Supplied role is not a role or string.'));\n    }\n\n    position = Number(position);\n    if (isNaN(position)) return Promise.reject(new Error('Supplied position is not a number.'));\n\n    const lowestAffected = Math.min(role.position, position);\n    const highestAffected = Math.max(role.position, position);\n\n    const rolesToUpdate = this.roles.filter(r => r.position >= lowestAffected && r.position <= highestAffected);\n\n    // stop role positions getting stupidly inflated\n    if (position > role.position) {\n      position = rolesToUpdate.first().position;\n    } else {\n      position = rolesToUpdate.last().position;\n    }\n\n    const updatedRoles = [];\n\n    for (const uRole of rolesToUpdate.values()) {\n      updatedRoles.push({\n        id: uRole.id,\n        position: uRole.id === role.id ? position : uRole.position + (position < role.position ? 1 : -1),\n      });\n    }\n\n    return this.client.rest.methods.setRolePositions(this.id, updatedRoles);\n  }\n\n  /**\n   * Whether this Guild equals another Guild. It compares all properties, so for most operations\n   * it is advisable to just compare `guild.id === guild2.id` as it is much faster and is often\n   * what most users need.\n   * @param {Guild} guild Guild to compare with\n   * @returns {boolean}\n   */\n  equals(guild) {\n    let equal =\n      guild &&\n      this.id === guild.id &&\n      this.available === !guild.unavailable &&\n      this.splash === guild.splash &&\n      this.region === guild.region &&\n      this.name === guild.name &&\n      this.memberCount === guild.member_count &&\n      this.large === guild.large &&\n      this.icon === guild.icon &&\n      arraysEqual(this.features, guild.features) &&\n      this.ownerID === guild.owner_id &&\n      this.verificationLevel === guild.verification_level &&\n      this.embedEnabled === guild.embed_enabled;\n\n    if (equal) {\n      if (this.embedChannel) {\n        if (this.embedChannel.id !== guild.embed_channel_id) equal = false;\n      } else if (guild.embed_channel_id) {\n        equal = false;\n      }\n    }\n\n    return equal;\n  }\n\n  /**\n   * When concatenated with a string, this automatically concatenates the guild's name instead of the Guild object.\n   * @returns {string}\n   * @example\n   * // logs: Hello from My Guild!\n   * console.log(`Hello from ${guild}!`);\n   * @example\n   * // logs: Hello from My Guild!\n   * console.log(`Hello from ' + guild + '!');\n   */\n  toString() {\n    return this.name;\n  }\n\n  _addMember(guildUser, emitEvent = true) {\n    const existing = this.members.has(guildUser.user.id);\n    if (!(guildUser.user instanceof User)) guildUser.user = this.client.dataManager.newUser(guildUser.user);\n\n    guildUser.joined_at = guildUser.joined_at || 0;\n    const member = new GuildMember(this, guildUser);\n    this.members.set(member.id, member);\n\n    if (this._rawVoiceStates && this._rawVoiceStates.has(member.user.id)) {\n      const voiceState = this._rawVoiceStates.get(member.user.id);\n      member.serverMute = voiceState.mute;\n      member.serverDeaf = voiceState.deaf;\n      member.selfMute = voiceState.self_mute;\n      member.selfDeaf = voiceState.self_deaf;\n      member.voiceSessionID = voiceState.session_id;\n      member.voiceChannelID = voiceState.channel_id;\n      if (this.client.channels.has(voiceState.channel_id)) {\n        this.client.channels.get(voiceState.channel_id).members.set(member.user.id, member);\n      } else {\n        this.client.emit('warn', `Member ${member.id} added in guild ${this.id} with an uncached voice channel`);\n      }\n    }\n\n    /**\n     * Emitted whenever a user joins a guild.\n     * @event Client#guildMemberAdd\n     * @param {GuildMember} member The member that has joined a guild\n     */\n    if (this.client.ws.status === Constants.Status.READY && emitEvent && !existing) {\n      this.client.emit(Constants.Events.GUILD_MEMBER_ADD, member);\n    }\n\n    this._checkChunks();\n    return member;\n  }\n\n  _updateMember(member, data) {\n    const oldMember = cloneObject(member);\n\n    if (data.roles) member._roles = data.roles;\n    if (typeof data.nick !== 'undefined') member.nickname = data.nick;\n\n    const notSame = member.nickname !== oldMember.nickname || !arraysEqual(member._roles, oldMember._roles);\n\n    if (this.client.ws.status === Constants.Status.READY && notSame) {\n      /**\n       * Emitted whenever a guild member changes - i.e. new role, removed role, nickname\n       * @event Client#guildMemberUpdate\n       * @param {GuildMember} oldMember The member before the update\n       * @param {GuildMember} newMember The member after the update\n       */\n      this.client.emit(Constants.Events.GUILD_MEMBER_UPDATE, oldMember, member);\n    }\n\n    return {\n      old: oldMember,\n      mem: member,\n    };\n  }\n\n  _removeMember(guildMember) {\n    this.members.delete(guildMember.id);\n    this._checkChunks();\n  }\n\n  _memberSpeakUpdate(user, speaking) {\n    const member = this.members.get(user);\n    if (member && member.speaking !== speaking) {\n      member.speaking = speaking;\n      /**\n       * Emitted once a guild member starts/stops speaking\n       * @event Client#guildMemberSpeaking\n       * @param {GuildMember} member The member that started/stopped speaking\n       * @param {boolean} speaking Whether or not the member is speaking\n       */\n      this.client.emit(Constants.Events.GUILD_MEMBER_SPEAKING, member, speaking);\n    }\n  }\n\n  _setPresence(id, presence) {\n    if (this.presences.get(id)) {\n      this.presences.get(id).update(presence);\n      return;\n    }\n    this.presences.set(id, new Presence(presence));\n  }\n\n  _checkChunks() {\n    if (this._fetchWaiter) {\n      if (this.members.size === this.memberCount) {\n        this._fetchWaiter(this);\n        this._fetchWaiter = null;\n      }\n    }\n  }\n}\n\nmodule.exports = Guild;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/User.js":"const TextBasedChannel = require('./interface/TextBasedChannel');\nconst Constants = require('../util/Constants');\nconst Presence = require('./Presence').Presence;\n\n/**\n * Represents a user on Discord.\n * @implements {TextBasedChannel}\n */\nclass User {\n  constructor(client, data) {\n    /**\n     * The Client that created the instance of the the User.\n     * @name User#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    if (data) this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The ID of the user\n     * @type {string}\n     */\n    this.id = data.id;\n\n    /**\n     * The username of the user\n     * @type {string}\n     */\n    this.username = data.username;\n\n    /**\n     * A discriminator based on username for the user\n     * @type {string}\n     */\n    this.discriminator = data.discriminator;\n\n    /**\n     * The ID of the user's avatar\n     * @type {string}\n     */\n    this.avatar = data.avatar;\n\n    /**\n     * Whether or not the user is a bot.\n     * @type {boolean}\n     */\n    this.bot = Boolean(data.bot);\n\n    /**\n     * The ID of the last message sent by the user, if one was sent.\n     * @type {?string}\n     */\n    this.lastMessageID = null;\n  }\n\n  patch(data) {\n    for (const prop of ['id', 'username', 'discriminator', 'avatar', 'bot']) {\n      if (typeof data[prop] !== 'undefined') this[prop] = data[prop];\n    }\n    if (data.token) this.client.token = data.token;\n  }\n\n  /**\n   * The timestamp the user was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return (this.id / 4194304) + 1420070400000;\n  }\n\n  /**\n   * The time the user was created\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The presence of this user\n   * @type {Presence}\n   * @readonly\n   */\n  get presence() {\n    if (this.client.presences.has(this.id)) return this.client.presences.get(this.id);\n    for (const guild of this.client.guilds.values()) {\n      if (guild.presences.has(this.id)) return guild.presences.get(this.id);\n    }\n    return new Presence();\n  }\n\n  /**\n   * A link to the user's avatar (if they have one, otherwise null)\n   * @type {?string}\n   * @readonly\n   */\n  get avatarURL() {\n    if (!this.avatar) return null;\n    return Constants.Endpoints.avatar(this.id, this.avatar);\n  }\n\n  /**\n   * A link to the user's default avatar\n   * @type {string}\n   * @readonly\n   */\n  get defaultAvatarURL() {\n    let defaultAvatars = Object.values(Constants.DefaultAvatars);\n    let defaultAvatar = this.discriminator % defaultAvatars.length;\n    return Constants.Endpoints.assets(`${defaultAvatars[defaultAvatar]}.png`);\n  }\n\n  /**\n   * A link to the user's avatar if they have one. Otherwise a link to their default avatar will be returned\n   * @type {string}\n   * @readonly\n   */\n  get displayAvatarURL() {\n    return this.avatarURL || this.defaultAvatarURL;\n  }\n\n  /**\n   * The note that is set for the user\n   * <warn>This is only available when using a user account.</warn>\n   * @type {?string}\n   * @readonly\n   */\n  get note() {\n    return this.client.user.notes.get(this.id) || null;\n  }\n\n  /**\n   * Check whether the user is typing in a channel.\n   * @param {ChannelResolvable} channel The channel to check in\n   * @returns {boolean}\n   */\n  typingIn(channel) {\n    channel = this.client.resolver.resolveChannel(channel);\n    return channel._typing.has(this.id);\n  }\n\n  /**\n   * Get the time that the user started typing.\n   * @param {ChannelResolvable} channel The channel to get the time in\n   * @returns {?Date}\n   */\n  typingSinceIn(channel) {\n    channel = this.client.resolver.resolveChannel(channel);\n    return channel._typing.has(this.id) ? new Date(channel._typing.get(this.id).since) : null;\n  }\n\n  /**\n   * Get the amount of time the user has been typing in a channel for (in milliseconds), or -1 if they're not typing.\n   * @param {ChannelResolvable} channel The channel to get the time in\n   * @returns {number}\n   */\n  typingDurationIn(channel) {\n    channel = this.client.resolver.resolveChannel(channel);\n    return channel._typing.has(this.id) ? channel._typing.get(this.id).elapsedTime : -1;\n  }\n\n  /**\n   * The DM between the client's user and this user\n   * @type {?DMChannel}\n   */\n  get dmChannel() {\n    return this.client.channels.filter(c => c.type === 'dm').find(c => c.recipient.id === this.id);\n  }\n\n  /**\n   * Deletes a DM channel (if one exists) between the client and the user. Resolves with the channel if successful.\n   * @returns {Promise<DMChannel>}\n   */\n  deleteDM() {\n    return this.client.rest.methods.deleteChannel(this);\n  }\n\n  /**\n   * Sends a friend request to the user\n   * <warn>This is only available when using a user account.</warn>\n   * @returns {Promise<User>}\n   */\n  addFriend() {\n    return this.client.rest.methods.addFriend(this);\n  }\n\n  /**\n   * Removes the user from your friends\n   * <warn>This is only available when using a user account.</warn>\n   * @returns {Promise<User>}\n   */\n  removeFriend() {\n    return this.client.rest.methods.removeFriend(this);\n  }\n\n  /**\n   * Blocks the user\n   * <warn>This is only available when using a user account.</warn>\n   * @returns {Promise<User>}\n   */\n  block() {\n    return this.client.rest.methods.blockUser(this);\n  }\n\n  /**\n   * Unblocks the user\n   * <warn>This is only available when using a user account.</warn>\n   * @returns {Promise<User>}\n   */\n  unblock() {\n    return this.client.rest.methods.unblockUser(this);\n  }\n\n  /**\n   * Get the profile of the user\n   * <warn>This is only available when using a user account.</warn>\n   * @returns {Promise<UserProfile>}\n   */\n  fetchProfile() {\n    return this.client.rest.methods.fetchUserProfile(this);\n  }\n\n  /**\n   * Sets a note for the user\n   * <warn>This is only available when using a user account.</warn>\n   * @param {string} note The note to set for the user\n   * @returns {Promise<User>}\n   */\n  setNote(note) {\n    return this.client.rest.methods.setNote(this, note);\n  }\n\n  /**\n   * Checks if the user is equal to another. It compares ID, username, discriminator, avatar, and bot flags.\n   * It is recommended to compare equality by using `user.id === user2.id` unless you want to compare all properties.\n   * @param {User} user User to compare with\n   * @returns {boolean}\n   */\n  equals(user) {\n    let equal = user &&\n      this.id === user.id &&\n      this.username === user.username &&\n      this.discriminator === user.discriminator &&\n      this.avatar === user.avatar &&\n      this.bot === Boolean(user.bot);\n\n    return equal;\n  }\n\n  /**\n   * When concatenated with a string, this automatically concatenates the user's mention instead of the User object.\n   * @returns {string}\n   * @example\n   * // logs: Hello from <@123456789>!\n   * console.log(`Hello from ${user}!`);\n   */\n  toString() {\n    return `<@${this.id}>`;\n  }\n\n  // These are here only for documentation purposes - they are implemented by TextBasedChannel\n  send() { return; }\n  sendMessage() { return; }\n  sendEmbed() { return; }\n  sendFile() { return; }\n  sendCode() { return; }\n}\n\nTextBasedChannel.applyToClass(User);\n\nmodule.exports = User;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/interface/TextBasedChannel.js":"const path = require('path');\nconst Message = require('../Message');\nconst MessageCollector = require('../MessageCollector');\nconst Collection = require('../../util/Collection');\n\n\n/**\n * Interface for classes that have text-channel-like features\n * @interface\n */\nclass TextBasedChannel {\n  constructor() {\n    /**\n     * A collection containing the messages sent to this channel.\n     * @type {Collection<string, Message>}\n     */\n    this.messages = new Collection();\n\n    /**\n     * The ID of the last message in the channel, if one was sent.\n     * @type {?string}\n     */\n    this.lastMessageID = null;\n  }\n\n  /**\n   * Options that can be passed into send, sendMessage, sendFile, sendEmbed, sendCode, and Message#reply\n   * @typedef {Object} MessageOptions\n   * @property {boolean} [tts=false] Whether or not the message should be spoken aloud\n   * @property {string} [nonce=''] The nonce for the message\n   * @property {Object} [embed] An embed for the message\n   * (see [here](https://discordapp.com/developers/docs/resources/channel#embed-object) for more details)\n   * @property {boolean} [disableEveryone=this.client.options.disableEveryone] Whether or not @everyone and @here\n   * should be replaced with plain-text\n   * @property {FileOptions|string} [file] A file to send with the message\n   * @property {string|boolean} [code] Language for optional codeblock formatting to apply\n   * @property {boolean|SplitOptions} [split=false] Whether or not the message should be split into multiple messages if\n   * it exceeds the character limit. If an object is provided, these are the options for splitting the message.\n   */\n\n  /**\n   * @typedef {Object} FileOptions\n   * @property {BufferResolvable} attachment\n   * @property {string} [name='file.jpg']\n   */\n\n  /**\n   * Options for splitting a message\n   * @typedef {Object} SplitOptions\n   * @property {number} [maxLength=1950] Maximum character length per message piece\n   * @property {string} [char='\\n'] Character to split the message with\n   * @property {string} [prepend=''] Text to prepend to every piece except the first\n   * @property {string} [append=''] Text to append to every piece except the last\n   */\n\n  /**\n   * Send a message to this channel\n   * @param {StringResolvable} [content] Text for the message\n   * @param {MessageOptions} [options={}] Options for the message\n   * @returns {Promise<Message|Message[]>}\n   * @example\n   * // send a message\n   * channel.send('hello!')\n   *  .then(message => console.log(`Sent message: ${message.content}`))\n   *  .catch(console.error);\n   */\n  send(content, options) {\n    if (!options && typeof content === 'object' && !(content instanceof Array)) {\n      options = content;\n      content = '';\n    } else if (!options) {\n      options = {};\n    }\n    if (options.file) {\n      if (typeof options.file === 'string') options.file = { attachment: options.file };\n      if (!options.file.name) {\n        if (typeof options.file.attachment === 'string') {\n          options.file.name = path.basename(options.file.attachment);\n        } else if (options.file.attachment && options.file.attachment.path) {\n          options.file.name = path.basename(options.file.attachment.path);\n        } else {\n          options.file.name = 'file.jpg';\n        }\n      }\n      return this.client.resolver.resolveBuffer(options.file.attachment).then(file =>\n        this.client.rest.methods.sendMessage(this, content, options, {\n          file,\n          name: options.file.name,\n        })\n      );\n    }\n    return this.client.rest.methods.sendMessage(this, content, options);\n  }\n\n  /**\n   * Send a message to this channel\n   * @param {StringResolvable} content Text for the message\n   * @param {MessageOptions} [options={}] Options for the message\n   * @returns {Promise<Message|Message[]>}\n   * @example\n   * // send a message\n   * channel.sendMessage('hello!')\n   *  .then(message => console.log(`Sent message: ${message.content}`))\n   *  .catch(console.error);\n   */\n  sendMessage(content, options) {\n    return this.send(content, options);\n  }\n\n  /**\n   * Send an embed to this channel\n   * @param {RichEmbed|Object} embed Embed for the message\n   * @param {string} [content] Text for the message\n   * @param {MessageOptions} [options] Options for the message\n   * @returns {Promise<Message>}\n   */\n  sendEmbed(embed, content, options) {\n    if (!options && typeof content === 'object') {\n      options = content;\n      content = '';\n    } else if (!options) {\n      options = {};\n    }\n    return this.send(content, Object.assign(options, { embed }));\n  }\n\n  /**\n   * Send a file to this channel\n   * @param {BufferResolvable} attachment File to send\n   * @param {string} [name='file.jpg'] Name and extension of the file\n   * @param {StringResolvable} [content] Text for the message\n   * @param {MessageOptions} [options] Options for the message\n   * @returns {Promise<Message>}\n   */\n  sendFile(attachment, name, content, options = {}) {\n    return this.send(content, Object.assign(options, { file: { attachment, name } }));\n  }\n\n  /**\n   * Send a code block to this channel\n   * @param {string} lang Language for the code block\n   * @param {StringResolvable} content Content of the code block\n   * @param {MessageOptions} [options] Options for the message\n   * @returns {Promise<Message|Message[]>}\n   */\n  sendCode(lang, content, options = {}) {\n    return this.send(content, Object.assign(options, { code: lang }));\n  }\n\n  /**\n   * Gets a single message from this channel, regardless of it being cached or not.\n   * <warn>This is only available when using a bot account.</warn>\n   * @param {string} messageID ID of the message to get\n   * @returns {Promise<Message>}\n   * @example\n   * // get message\n   * channel.fetchMessage('99539446449315840')\n   *   .then(message => console.log(message.content))\n   *   .catch(console.error);\n   */\n  fetchMessage(messageID) {\n    return this.client.rest.methods.getChannelMessage(this, messageID).then(data => {\n      const msg = data instanceof Message ? data : new Message(this, data, this.client);\n      this._cacheMessage(msg);\n      return msg;\n    });\n  }\n\n  /**\n   * The parameters to pass in when requesting previous messages from a channel. `around`, `before` and\n   * `after` are mutually exclusive. All the parameters are optional.\n   * @typedef {Object} ChannelLogsQueryOptions\n   * @property {number} [limit=50] Number of messages to acquire\n   * @property {string} [before] ID of a message to get the messages that were posted before it\n   * @property {string} [after] ID of a message to get the messages that were posted after it\n   * @property {string} [around] ID of a message to get the messages that were posted around it\n   */\n\n  /**\n   * Gets the past messages sent in this channel. Resolves with a collection mapping message ID's to Message objects.\n   * @param {ChannelLogsQueryOptions} [options={}] Query parameters to pass in\n   * @returns {Promise<Collection<string, Message>>}\n   * @example\n   * // get messages\n   * channel.fetchMessages({limit: 10})\n   *  .then(messages => console.log(`Received ${messages.size} messages`))\n   *  .catch(console.error);\n   */\n  fetchMessages(options = {}) {\n    return this.client.rest.methods.getChannelMessages(this, options).then(data => {\n      const messages = new Collection();\n      for (const message of data) {\n        const msg = new Message(this, message, this.client);\n        messages.set(message.id, msg);\n        this._cacheMessage(msg);\n      }\n      return messages;\n    });\n  }\n\n  /**\n   * Fetches the pinned messages of this channel and returns a collection of them.\n   * @returns {Promise<Collection<string, Message>>}\n   */\n  fetchPinnedMessages() {\n    return this.client.rest.methods.getChannelPinnedMessages(this).then(data => {\n      const messages = new Collection();\n      for (const message of data) {\n        const msg = new Message(this, message, this.client);\n        messages.set(message.id, msg);\n        this._cacheMessage(msg);\n      }\n      return messages;\n    });\n  }\n\n  /**\n   * Starts a typing indicator in the channel.\n   * @param {number} [count] The number of times startTyping should be considered to have been called\n   * @example\n   * // start typing in a channel\n   * channel.startTyping();\n   */\n  startTyping(count) {\n    if (typeof count !== 'undefined' && count < 1) throw new RangeError('Count must be at least 1.');\n    if (!this.client.user._typing.has(this.id)) {\n      this.client.user._typing.set(this.id, {\n        count: count || 1,\n        interval: this.client.setInterval(() => {\n          this.client.rest.methods.sendTyping(this.id);\n        }, 4000),\n      });\n      this.client.rest.methods.sendTyping(this.id);\n    } else {\n      const entry = this.client.user._typing.get(this.id);\n      entry.count = count || entry.count + 1;\n    }\n  }\n\n  /**\n   * Stops the typing indicator in the channel.\n   * The indicator will only stop if this is called as many times as startTyping().\n   * <info>It can take a few seconds for the client user to stop typing.</info>\n   * @param {boolean} [force=false] Whether or not to reset the call count and force the indicator to stop\n   * @example\n   * // stop typing in a channel\n   * channel.stopTyping();\n   * @example\n   * // force typing to fully stop in a channel\n   * channel.stopTyping(true);\n   */\n  stopTyping(force = false) {\n    if (this.client.user._typing.has(this.id)) {\n      const entry = this.client.user._typing.get(this.id);\n      entry.count--;\n      if (entry.count <= 0 || force) {\n        this.client.clearInterval(entry.interval);\n        this.client.user._typing.delete(this.id);\n      }\n    }\n  }\n\n  /**\n   * Whether or not the typing indicator is being shown in the channel.\n   * @type {boolean}\n   * @readonly\n   */\n  get typing() {\n    return this.client.user._typing.has(this.id);\n  }\n\n  /**\n   * Number of times `startTyping` has been called.\n   * @type {number}\n   * @readonly\n   */\n  get typingCount() {\n    if (this.client.user._typing.has(this.id)) return this.client.user._typing.get(this.id).count;\n    return 0;\n  }\n\n  /**\n   * Creates a Message Collector\n   * @param {CollectorFilterFunction} filter The filter to create the collector with\n   * @param {CollectorOptions} [options={}] The options to pass to the collector\n   * @returns {MessageCollector}\n   * @example\n   * // create a message collector\n   * const collector = channel.createCollector(\n   *  m => m.content.includes('discord'),\n   *  { time: 15000 }\n   * );\n   * collector.on('message', m => console.log(`Collected ${m.content}`));\n   * collector.on('end', collected => console.log(`Collected ${collected.size} items`));\n   */\n  createCollector(filter, options = {}) {\n    return new MessageCollector(this, filter, options);\n  }\n\n  /**\n   * An object containing the same properties as CollectorOptions, but a few more:\n   * @typedef {CollectorOptions} AwaitMessagesOptions\n   * @property {string[]} [errors] Stop/end reasons that cause the promise to reject\n   */\n\n  /**\n   * Similar to createCollector but in promise form. Resolves with a collection of messages that pass the specified\n   * filter.\n   * @param {CollectorFilterFunction} filter The filter function to use\n   * @param {AwaitMessagesOptions} [options={}] Optional options to pass to the internal collector\n   * @returns {Promise<Collection<string, Message>>}\n   * @example\n   * // await !vote messages\n   * const filter = m => m.content.startsWith('!vote');\n   * // errors: ['time'] treats ending because of the time limit as an error\n   * channel.awaitMessages(filter, { max: 4, time: 60000, errors: ['time'] })\n   *  .then(collected => console.log(collected.size))\n   *  .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));\n   */\n  awaitMessages(filter, options = {}) {\n    return new Promise((resolve, reject) => {\n      const collector = this.createCollector(filter, options);\n      collector.on('end', (collection, reason) => {\n        if (options.errors && options.errors.includes(reason)) {\n          reject(collection);\n        } else {\n          resolve(collection);\n        }\n      });\n    });\n  }\n\n  /**\n   * Bulk delete given messages.\n   * <warn>This is only available when using a bot account.</warn>\n   * @param {Collection<string, Message>|Message[]|number} messages Messages to delete, or number of messages to delete\n   * @returns {Promise<Collection<string, Message>>} Deleted messages\n   */\n  bulkDelete(messages) {\n    if (!isNaN(messages)) return this.fetchMessages({ limit: messages }).then(msgs => this.bulkDelete(msgs));\n    if (messages instanceof Array || messages instanceof Collection) {\n      const messageIDs = messages instanceof Collection ? messages.keyArray() : messages.map(m => m.id);\n      return this.client.rest.methods.bulkDeleteMessages(this, messageIDs);\n    }\n    throw new TypeError('The messages must be an Array, Collection, or number.');\n  }\n\n  _cacheMessage(message) {\n    const maxSize = this.client.options.messageCacheMaxSize;\n    if (maxSize === 0) return null;\n    if (this.messages.size >= maxSize && maxSize > 0) this.messages.delete(this.messages.firstKey());\n    this.messages.set(message.id, message);\n    return message;\n  }\n}\n\nexports.applyToClass = (structure, full = false) => {\n  const props = ['send', 'sendMessage', 'sendEmbed', 'sendFile', 'sendCode'];\n  if (full) {\n    props.push(\n      '_cacheMessage',\n      'fetchMessages',\n      'fetchMessage',\n      'bulkDelete',\n      'startTyping',\n      'stopTyping',\n      'typing',\n      'typingCount',\n      'fetchPinnedMessages',\n      'createCollector',\n      'awaitMessages'\n    );\n  }\n  for (const prop of props) {\n    Object.defineProperty(structure.prototype, prop, Object.getOwnPropertyDescriptor(TextBasedChannel.prototype, prop));\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/Message.js":"const Attachment = require('./MessageAttachment');\nconst Embed = require('./MessageEmbed');\nconst MessageReaction = require('./MessageReaction');\nconst Collection = require('../util/Collection');\nconst Constants = require('../util/Constants');\nconst escapeMarkdown = require('../util/EscapeMarkdown');\n\n// Done purely for GuildMember, which would cause a bad circular dependency\nconst Discord = require('..');\n\n/**\n * Represents a message on Discord\n */\nclass Message {\n  constructor(channel, data, client) {\n    /**\n     * The Client that instantiated the Message\n     * @name Message#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    /**\n     * The channel that the message was sent in\n     * @type {TextChannel|DMChannel|GroupDMChannel}\n     */\n    this.channel = channel;\n\n    if (data) this.setup(data);\n  }\n\n  setup(data) { // eslint-disable-line complexity\n    /**\n     * The ID of the message (unique in the channel it was sent)\n     * @type {string}\n     */\n    this.id = data.id;\n\n    /**\n     * The type of the message\n     * @type {string}\n     */\n    this.type = Constants.MessageTypes[data.type];\n\n    /**\n     * The content of the message\n     * @type {string}\n     */\n    this.content = data.content;\n\n    /**\n     * The author of the message\n     * @type {User}\n     */\n    this.author = this.client.dataManager.newUser(data.author);\n\n    /**\n     * Represents the author of the message as a guild member. Only available if the message comes from a guild\n     * where the author is still a member.\n     * @type {GuildMember}\n     */\n    this.member = this.guild ? this.guild.member(this.author) || null : null;\n\n    /**\n     * Whether or not this message is pinned\n     * @type {boolean}\n     */\n    this.pinned = data.pinned;\n\n    /**\n     * Whether or not the message was Text-To-Speech\n     * @type {boolean}\n     */\n    this.tts = data.tts;\n\n    /**\n     * A random number used for checking message delivery\n     * @type {string}\n     */\n    this.nonce = data.nonce;\n\n    /**\n     * Whether or not this message was sent by Discord, not actually a user (e.g. pin notifications)\n     * @type {boolean}\n     */\n    this.system = data.type === 6;\n\n    /**\n     * A list of embeds in the message - e.g. YouTube Player\n     * @type {MessageEmbed[]}\n     */\n    this.embeds = data.embeds.map(e => new Embed(this, e));\n\n    /**\n     * A collection of attachments in the message - e.g. Pictures - mapped by their ID.\n     * @type {Collection<string, MessageAttachment>}\n     */\n    this.attachments = new Collection();\n    for (const attachment of data.attachments) this.attachments.set(attachment.id, new Attachment(this, attachment));\n\n    /**\n     * The timestamp the message was sent at\n     * @type {number}\n     */\n    this.createdTimestamp = new Date(data.timestamp).getTime();\n\n    /**\n     * The timestamp the message was last edited at (if applicable)\n     * @type {?number}\n     */\n    this.editedTimestamp = data.edited_timestamp ? new Date(data.edited_timestamp).getTime() : null;\n\n    /**\n     * An object containing a further users, roles or channels collections\n     * @type {Object}\n     * @property {Collection<string, User>} mentions.users Mentioned users, maps their ID to the user object.\n     * @property {Collection<string, Role>} mentions.roles Mentioned roles, maps their ID to the role object.\n     * @property {Collection<string, GuildChannel>} mentions.channels Mentioned channels,\n     * maps their ID to the channel object.\n     * @property {boolean} mentions.everyone Whether or not @everyone was mentioned.\n     */\n    this.mentions = {\n      users: new Collection(),\n      roles: new Collection(),\n      channels: new Collection(),\n      everyone: data.mention_everyone,\n    };\n\n    for (const mention of data.mentions) {\n      let user = this.client.users.get(mention.id);\n      if (user) {\n        this.mentions.users.set(user.id, user);\n      } else {\n        user = this.client.dataManager.newUser(mention);\n        this.mentions.users.set(user.id, user);\n      }\n    }\n\n    if (data.mention_roles) {\n      for (const mention of data.mention_roles) {\n        const role = this.channel.guild.roles.get(mention);\n        if (role) this.mentions.roles.set(role.id, role);\n      }\n    }\n\n    if (this.channel.guild) {\n      const channMentionsRaw = data.content.match(/<#([0-9]{14,20})>/g) || [];\n      for (const raw of channMentionsRaw) {\n        const chan = this.channel.guild.channels.get(raw.match(/([0-9]{14,20})/g)[0]);\n        if (chan) this.mentions.channels.set(chan.id, chan);\n      }\n    }\n\n    this._edits = [];\n\n    /**\n     * A collection of reactions to this message, mapped by the reaction \"id\".\n     * @type {Collection<string, MessageReaction>}\n     */\n    this.reactions = new Collection();\n\n    if (data.reactions && data.reactions.length > 0) {\n      for (const reaction of data.reactions) {\n        const id = reaction.emoji.id ? `${reaction.emoji.name}:${reaction.emoji.id}` : reaction.emoji.name;\n        this.reactions.set(id, new MessageReaction(this, reaction.emoji, reaction.count, reaction.me));\n      }\n    }\n\n    /**\n     * ID of the webhook that sent the message, if applicable\n     * @type {?string}\n     */\n    this.webhookID = data.webhook_id || null;\n  }\n\n  patch(data) { // eslint-disable-line complexity\n    if (data.author) {\n      this.author = this.client.users.get(data.author.id);\n      if (this.guild) this.member = this.guild.member(this.author);\n    }\n    if (data.content) this.content = data.content;\n    if (data.timestamp) this.createdTimestamp = new Date(data.timestamp).getTime();\n    if (data.edited_timestamp) {\n      this.editedTimestamp = data.edited_timestamp ? new Date(data.edited_timestamp).getTime() : null;\n    }\n    if ('tts' in data) this.tts = data.tts;\n    if ('mention_everyone' in data) this.mentions.everyone = data.mention_everyone;\n    if (data.nonce) this.nonce = data.nonce;\n    if (data.embeds) this.embeds = data.embeds.map(e => new Embed(this, e));\n    if (data.type > -1) {\n      this.system = false;\n      if (data.type === 6) this.system = true;\n    }\n    if (data.attachments) {\n      this.attachments = new Collection();\n      for (const attachment of data.attachments) {\n        this.attachments.set(attachment.id, new Attachment(this, attachment));\n      }\n    }\n    if (data.mentions) {\n      for (const mention of data.mentions) {\n        let user = this.client.users.get(mention.id);\n        if (user) {\n          this.mentions.users.set(user.id, user);\n        } else {\n          user = this.client.dataManager.newUser(mention);\n          this.mentions.users.set(user.id, user);\n        }\n      }\n    }\n    if (data.mention_roles) {\n      for (const mention of data.mention_roles) {\n        const role = this.channel.guild.roles.get(mention);\n        if (role) this.mentions.roles.set(role.id, role);\n      }\n    }\n    if (data.id) this.id = data.id;\n    if (this.channel.guild && data.content) {\n      const channMentionsRaw = data.content.match(/<#([0-9]{14,20})>/g) || [];\n      for (const raw of channMentionsRaw) {\n        const chan = this.channel.guild.channels.get(raw.match(/([0-9]{14,20})/g)[0]);\n        if (chan) this.mentions.channels.set(chan.id, chan);\n      }\n    }\n    if (data.reactions) {\n      this.reactions = new Collection();\n      if (data.reactions.length > 0) {\n        for (const reaction of data.reactions) {\n          const id = reaction.emoji.id ? `${reaction.emoji.name}:${reaction.emoji.id}` : reaction.emoji.name;\n          this.reactions.set(id, new MessageReaction(this, data.emoji, data.count, data.me));\n        }\n      }\n    }\n  }\n\n  /**\n   * The time the message was sent\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The time the message was last edited at (if applicable)\n   * @type {?Date}\n   * @readonly\n   */\n  get editedAt() {\n    return this.editedTimestamp ? new Date(this.editedTimestamp) : null;\n  }\n\n  /**\n   * The guild the message was sent in (if in a guild channel)\n   * @type {?Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.channel.guild || null;\n  }\n\n  /**\n   * The message contents with all mentions replaced by the equivalent text. If mentions cannot be resolved to a name,\n   * the relevant mention in the message content will not be converted.\n   * @type {string}\n   * @readonly\n   */\n  get cleanContent() {\n    return this.content\n      .replace(/@(everyone|here)/g, '@\\u200b$1')\n      .replace(/<@!?[0-9]+>/g, (input) => {\n        const id = input.replace(/<|!|>|@/g, '');\n        if (this.channel.type === 'dm' || this.channel.type === 'group') {\n          return this.client.users.has(id) ? `@${this.client.users.get(id).username}` : input;\n        }\n\n        const member = this.channel.guild.members.get(id);\n        if (member) {\n          if (member.nickname) return `@${member.nickname}`;\n          return `@${member.user.username}`;\n        } else {\n          const user = this.client.users.get(id);\n          if (user) return `@${user.username}`;\n          return input;\n        }\n      })\n      .replace(/<#[0-9]+>/g, (input) => {\n        const channel = this.client.channels.get(input.replace(/<|#|>/g, ''));\n        if (channel) return `#${channel.name}`;\n        return input;\n      })\n      .replace(/<@&[0-9]+>/g, (input) => {\n        if (this.channel.type === 'dm' || this.channel.type === 'group') return input;\n        const role = this.guild.roles.get(input.replace(/<|@|>|&/g, ''));\n        if (role) return `@${role.name}`;\n        return input;\n      });\n  }\n\n  /**\n   * An array of cached versions of the message, including the current version.\n   * Sorted from latest (first) to oldest (last).\n   * @type {Message[]}\n   * @readonly\n   */\n  get edits() {\n    const copy = this._edits.slice();\n    copy.unshift(this);\n    return copy;\n  }\n\n  /**\n   * Whether the message is editable by the client user.\n   * @type {boolean}\n   * @readonly\n   */\n  get editable() {\n    return this.author.id === this.client.user.id;\n  }\n\n  /**\n   * Whether the message is deletable by the client user.\n   * @type {boolean}\n   * @readonly\n   */\n  get deletable() {\n    return this.author.id === this.client.user.id || (this.guild &&\n      this.channel.permissionsFor(this.client.user).hasPermission(Constants.PermissionFlags.MANAGE_MESSAGES)\n    );\n  }\n\n  /**\n   * Whether the message is pinnable by the client user.\n   * @type {boolean}\n   * @readonly\n   */\n  get pinnable() {\n    return !this.guild ||\n      this.channel.permissionsFor(this.client.user).hasPermission(Constants.PermissionFlags.MANAGE_MESSAGES);\n  }\n\n  /**\n   * Whether or not a user, channel or role is mentioned in this message.\n   * @param {GuildChannel|User|Role|string} data either a guild channel, user or a role object, or a string representing\n   * the ID of any of these.\n   * @returns {boolean}\n   */\n  isMentioned(data) {\n    data = data && data.id ? data.id : data;\n    return this.mentions.users.has(data) || this.mentions.channels.has(data) || this.mentions.roles.has(data);\n  }\n\n  /**\n   * Whether or not a guild member is mentioned in this message. Takes into account\n   * user mentions, role mentions, and @everyone/@here mentions.\n   * @param {GuildMember|User} member Member/user to check for a mention of\n   * @returns {boolean}\n   */\n  isMemberMentioned(member) {\n    if (this.mentions.everyone) return true;\n    if (this.mentions.users.has(member.id)) return true;\n    if (member instanceof Discord.GuildMember && member.roles.some(r => this.mentions.roles.has(r.id))) return true;\n    return false;\n  }\n\n  /**\n   * Options that can be passed into editMessage\n   * @typedef {Object} MessageEditOptions\n   * @property {Object} [embed] An embed to be added/edited\n   * @property {string|boolean} [code] Language for optional codeblock formatting to apply\n   */\n\n  /**\n   * Edit the content of the message\n   * @param {StringResolvable} [content] The new content for the message\n   * @param {MessageEditOptions} [options] The options to provide\n   * @returns {Promise<Message>}\n   * @example\n   * // update the content of a message\n   * message.edit('This is my new content!')\n   *  .then(msg => console.log(`Updated the content of a message from ${msg.author}`))\n   *  .catch(console.error);\n   */\n  edit(content, options) {\n    if (!options && typeof content === 'object') {\n      options = content;\n      content = '';\n    } else if (!options) {\n      options = {};\n    }\n    return this.client.rest.methods.updateMessage(this, content, options);\n  }\n\n  /**\n   * Edit the content of the message, with a code block\n   * @param {string} lang Language for the code block\n   * @param {StringResolvable} content The new content for the message\n   * @returns {Promise<Message>}\n   */\n  editCode(lang, content) {\n    content = escapeMarkdown(this.client.resolver.resolveString(content), true);\n    return this.edit(`\\`\\`\\`${lang || ''}\\n${content}\\n\\`\\`\\``);\n  }\n\n  /**\n   * Pins this message to the channel's pinned messages\n   * @returns {Promise<Message>}\n   */\n  pin() {\n    return this.client.rest.methods.pinMessage(this);\n  }\n\n  /**\n   * Unpins this message from the channel's pinned messages\n   * @returns {Promise<Message>}\n   */\n  unpin() {\n    return this.client.rest.methods.unpinMessage(this);\n  }\n\n  /**\n   * Add a reaction to the message\n   * @param {string|Emoji|ReactionEmoji} emoji Emoji to react with\n   * @returns {Promise<MessageReaction>}\n   */\n  react(emoji) {\n    emoji = this.client.resolver.resolveEmojiIdentifier(emoji);\n    if (!emoji) throw new TypeError('Emoji must be a string or Emoji/ReactionEmoji');\n\n    return this.client.rest.methods.addMessageReaction(this, emoji);\n  }\n\n  /**\n   * Remove all reactions from a message\n   * @returns {Promise<Message>}\n   */\n  clearReactions() {\n    return this.client.rest.methods.removeMessageReactions(this);\n  }\n\n  /**\n   * Deletes the message\n   * @param {number} [timeout=0] How long to wait to delete the message in milliseconds\n   * @returns {Promise<Message>}\n   * @example\n   * // delete a message\n   * message.delete()\n   *  .then(msg => console.log(`Deleted message from ${msg.author}`))\n   *  .catch(console.error);\n   */\n  delete(timeout = 0) {\n    if (timeout <= 0) {\n      return this.client.rest.methods.deleteMessage(this);\n    } else {\n      return new Promise(resolve => {\n        this.client.setTimeout(() => {\n          resolve(this.delete());\n        }, timeout);\n      });\n    }\n  }\n\n  /**\n   * Reply to the message\n   * @param {StringResolvable} content The content for the message\n   * @param {MessageOptions} [options = {}] The options to provide\n   * @returns {Promise<Message|Message[]>}\n   * @example\n   * // reply to a message\n   * message.reply('Hey, I\\'m a reply!')\n   *  .then(msg => console.log(`Sent a reply to ${msg.author}`))\n   *  .catch(console.error);\n   */\n  reply(content, options = {}) {\n    content = `${this.guild || this.channel.type === 'group' ? `${this.author}, ` : ''}${content}`;\n    return this.channel.send(content, options);\n  }\n\n  /**\n   * Fetches the webhook used to create this message.\n   * @returns {Promise<?Webhook>}\n   */\n  fetchWebhook() {\n    if (!this.webhookID) return Promise.reject(new Error('The message was not sent by a webhook.'));\n    return this.client.fetchWebhook(this.webhookID);\n  }\n\n  /**\n   * Used mainly internally. Whether two messages are identical in properties. If you want to compare messages\n   * without checking all the properties, use `message.id === message2.id`, which is much more efficient. This\n   * method allows you to see if there are differences in content, embeds, attachments, nonce and tts properties.\n   * @param {Message} message The message to compare it to\n   * @param {Object} rawData Raw data passed through the WebSocket about this message\n   * @returns {boolean}\n   */\n  equals(message, rawData) {\n    if (!message) return false;\n    const embedUpdate = !message.author && !message.attachments;\n    if (embedUpdate) return this.id === message.id && this.embeds.length === message.embeds.length;\n\n    let equal = this.id === message.id &&\n        this.author.id === message.author.id &&\n        this.content === message.content &&\n        this.tts === message.tts &&\n        this.nonce === message.nonce &&\n        this.embeds.length === message.embeds.length &&\n        this.attachments.length === message.attachments.length;\n\n    if (equal && rawData) {\n      equal = this.mentions.everyone === message.mentions.everyone &&\n        this.createdTimestamp === new Date(rawData.timestamp).getTime() &&\n        this.editedTimestamp === new Date(rawData.edited_timestamp).getTime();\n    }\n\n    return equal;\n  }\n\n  /**\n   * When concatenated with a string, this automatically concatenates the message's content instead of the object.\n   * @returns {string}\n   * @example\n   * // logs: Message: This is a message!\n   * console.log(`Message: ${message}`);\n   */\n  toString() {\n    return this.content;\n  }\n\n  _addReaction(emoji, user) {\n    const emojiID = emoji.id ? `${emoji.name}:${emoji.id}` : emoji.name;\n    let reaction;\n    if (this.reactions.has(emojiID)) {\n      reaction = this.reactions.get(emojiID);\n      if (!reaction.me) reaction.me = user.id === this.client.user.id;\n    } else {\n      reaction = new MessageReaction(this, emoji, 0, user.id === this.client.user.id);\n      this.reactions.set(emojiID, reaction);\n    }\n    if (!reaction.users.has(user.id)) {\n      reaction.users.set(user.id, user);\n      reaction.count++;\n      return reaction;\n    }\n    return null;\n  }\n\n  _removeReaction(emoji, user) {\n    const emojiID = emoji.id || emoji;\n    if (this.reactions.has(emojiID)) {\n      const reaction = this.reactions.get(emojiID);\n      if (reaction.users.has(user.id)) {\n        reaction.users.delete(user.id);\n        reaction.count--;\n        if (user.id === this.client.user.id) reaction.me = false;\n        return reaction;\n      }\n    }\n    return null;\n  }\n\n  _clearReactions() {\n    this.reactions.clear();\n  }\n}\n\nmodule.exports = Message;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/MessageAttachment.js":"/**\n * Represents an attachment in a message\n */\nclass MessageAttachment {\n  constructor(message, data) {\n    /**\n     * The Client that instantiated this MessageAttachment.\n     * @name MessageAttachment#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: message.client });\n\n    /**\n     * The message this attachment is part of.\n     * @type {Message}\n     */\n    this.message = message;\n\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The ID of this attachment\n     * @type {string}\n     */\n    this.id = data.id;\n\n    /**\n     * The file name of this attachment\n     * @type {string}\n     */\n    this.filename = data.filename;\n\n    /**\n     * The size of this attachment in bytes\n     * @type {number}\n     */\n    this.filesize = data.size;\n\n    /**\n     * The URL to this attachment\n     * @type {string}\n     */\n    this.url = data.url;\n\n    /**\n     * The Proxy URL to this attachment\n     * @type {string}\n     */\n    this.proxyURL = data.proxy_url;\n\n    /**\n     * The height of this attachment (if an image)\n     * @type {?number}\n     */\n    this.height = data.height;\n\n    /**\n     * The width of this attachment (if an image)\n     * @type {?number}\n     */\n    this.width = data.width;\n  }\n}\n\nmodule.exports = MessageAttachment;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/MessageEmbed.js":"/**\n * Represents an embed in a message (image/video preview, rich embed, etc.)\n */\nclass MessageEmbed {\n  constructor(message, data) {\n    /**\n     * The client that instantiated this embed\n     * @name MessageEmbed#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: message.client });\n\n    /**\n     * The message this embed is part of\n     * @type {Message}\n     */\n    this.message = message;\n\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The type of this embed\n     * @type {string}\n     */\n    this.type = data.type;\n\n    /**\n     * The title of this embed, if there is one\n     * @type {?string}\n     */\n    this.title = data.title;\n\n    /**\n     * The description of this embed, if there is one\n     * @type {?string}\n     */\n    this.description = data.description;\n\n    /**\n     * The URL of this embed\n     * @type {string}\n     */\n    this.url = data.url;\n\n    /**\n     * The color of the embed\n     * @type {number}\n     */\n    this.color = data.color;\n\n    /**\n     * The fields of this embed\n     * @type {MessageEmbedField[]}\n     */\n    this.fields = [];\n    if (data.fields) for (const field of data.fields) this.fields.push(new MessageEmbedField(this, field));\n\n    /**\n     * The timestamp of this embed\n     * @type {number}\n     */\n    this.createdTimestamp = data.timestamp;\n\n    /**\n     * The thumbnail of this embed, if there is one\n     * @type {MessageEmbedThumbnail}\n     */\n    this.thumbnail = data.thumbnail ? new MessageEmbedThumbnail(this, data.thumbnail) : null;\n\n    /**\n     * The author of this embed, if there is one\n     * @type {MessageEmbedAuthor}\n     */\n    this.author = data.author ? new MessageEmbedAuthor(this, data.author) : null;\n\n    /**\n     * The provider of this embed, if there is one\n     * @type {MessageEmbedProvider}\n     */\n    this.provider = data.provider ? new MessageEmbedProvider(this, data.provider) : null;\n\n    /**\n     * The footer of this embed\n     * @type {MessageEmbedFooter}\n     */\n    this.footer = data.footer ? new MessageEmbedFooter(this, data.footer) : null;\n  }\n\n  /**\n   * The date this embed was created\n   * @type {Date}\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The hexadecimal version of the embed color, with a leading hash.\n   * @type {string}\n   * @readonly\n   */\n  get hexColor() {\n    let col = this.color.toString(16);\n    while (col.length < 6) col = `0${col}`;\n    return `#${col}`;\n  }\n}\n\n/**\n * Represents a thumbnail for a message embed\n */\nclass MessageEmbedThumbnail {\n  constructor(embed, data) {\n    /**\n     * The embed this thumbnail is part of\n     * @type {MessageEmbed}\n     */\n    this.embed = embed;\n\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The URL for this thumbnail\n     * @type {string}\n     */\n    this.url = data.url;\n\n    /**\n     * The Proxy URL for this thumbnail\n     * @type {string}\n     */\n    this.proxyURL = data.proxy_url;\n\n    /**\n     * The height of the thumbnail\n     * @type {number}\n     */\n    this.height = data.height;\n\n    /**\n     * The width of the thumbnail\n     * @type {number}\n     */\n    this.width = data.width;\n  }\n}\n\n/**\n * Represents a provider for a message embed\n */\nclass MessageEmbedProvider {\n  constructor(embed, data) {\n    /**\n     * The embed this provider is part of\n     * @type {MessageEmbed}\n     */\n    this.embed = embed;\n\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The name of this provider\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The URL of this provider\n     * @type {string}\n     */\n    this.url = data.url;\n  }\n}\n\n/**\n * Represents an author for a message embed\n */\nclass MessageEmbedAuthor {\n  constructor(embed, data) {\n    /**\n     * The embed this author is part of\n     * @type {MessageEmbed}\n     */\n    this.embed = embed;\n\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The name of this author\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The URL of this author\n     * @type {string}\n     */\n    this.url = data.url;\n\n    /**\n     * The icon URL of this author\n     * @type {string}\n     */\n    this.iconURL = data.icon_url;\n  }\n}\n\n/**\n * Represents a field for a message embed\n */\nclass MessageEmbedField {\n  constructor(embed, data) {\n    /**\n     * The embed this footer is part of\n     * @type {MessageEmbed}\n     */\n    this.embed = embed;\n\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The name of this field\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The value of this field\n     * @type {string}\n     */\n    this.value = data.value;\n\n    /**\n     * If this field is displayed inline\n     * @type {boolean}\n     */\n    this.inline = data.inline;\n  }\n}\n\n/**\n * Represents the footer of a message embed\n */\nclass MessageEmbedFooter {\n  constructor(embed, data) {\n    /**\n     * The embed this footer is part of\n     * @type {MessageEmbed}\n     */\n    this.embed = embed;\n\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The text in this footer\n     * @type {string}\n     */\n    this.text = data.text;\n\n    /**\n     * The icon URL of this footer\n     * @type {string}\n     */\n    this.iconURL = data.icon_url;\n\n    /**\n     * The proxy icon URL of this footer\n     * @type {string}\n     */\n    this.proxyIconUrl = data.proxy_icon_url;\n  }\n}\n\nMessageEmbed.Thumbnail = MessageEmbedThumbnail;\nMessageEmbed.Provider = MessageEmbedProvider;\nMessageEmbed.Author = MessageEmbedAuthor;\nMessageEmbed.Field = MessageEmbedField;\nMessageEmbed.Footer = MessageEmbedFooter;\n\nmodule.exports = MessageEmbed;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/MessageReaction.js":"const Collection = require('../util/Collection');\nconst Emoji = require('./Emoji');\nconst ReactionEmoji = require('./ReactionEmoji');\n\n/**\n * Represents a reaction to a message\n */\nclass MessageReaction {\n  constructor(message, emoji, count, me) {\n    /**\n     * The message that this reaction refers to\n     * @type {Message}\n     */\n    this.message = message;\n\n    /**\n     * Whether the client has given this reaction\n     * @type {boolean}\n     */\n    this.me = me;\n\n    /**\n     * The number of people that have given the same reaction.\n     * @type {number}\n     */\n    this.count = count || 0;\n\n    /**\n     * The users that have given this reaction, mapped by their ID.\n     * @type {Collection<string, User>}\n     */\n    this.users = new Collection();\n\n    this._emoji = new ReactionEmoji(this, emoji.name, emoji.id);\n  }\n\n  /**\n   * The emoji of this reaction, either an Emoji object for known custom emojis, or a ReactionEmoji\n   * object which has fewer properties. Whatever the prototype of the emoji, it will still have\n   * `name`, `id`, `identifier` and `toString()`\n   * @type {Emoji|ReactionEmoji}\n   */\n  get emoji() {\n    if (this._emoji instanceof Emoji) return this._emoji;\n    // check to see if the emoji has become known to the client\n    if (this._emoji.id) {\n      const emojis = this.message.client.emojis;\n      if (emojis.has(this._emoji.id)) {\n        const emoji = emojis.get(this._emoji.id);\n        this._emoji = emoji;\n        return emoji;\n      }\n    }\n    return this._emoji;\n  }\n\n  /**\n   * Removes a user from this reaction.\n   * @param {UserResolvable} [user=this.message.client.user] User to remove the reaction of\n   * @returns {Promise<MessageReaction>}\n   */\n  remove(user = this.message.client.user) {\n    const message = this.message;\n    user = this.message.client.resolver.resolveUserID(user);\n    if (!user) return Promise.reject('Couldn\\'t resolve the user ID to remove from the reaction.');\n    return message.client.rest.methods.removeMessageReaction(\n      message, this.emoji.identifier, user\n    );\n  }\n\n  /**\n   * Fetch all the users that gave this reaction. Resolves with a collection of users, mapped by their IDs.\n   * @param {number} [limit=100] the maximum amount of users to fetch, defaults to 100\n   * @returns {Promise<Collection<string, User>>}\n   */\n  fetchUsers(limit = 100) {\n    const message = this.message;\n    return message.client.rest.methods.getMessageReactionUsers(\n      message, this.emoji.identifier, limit\n    ).then(users => {\n      this.users = new Collection();\n      for (const rawUser of users) {\n        const user = this.message.client.dataManager.newUser(rawUser);\n        this.users.set(user.id, user);\n      }\n      this.count = this.users.size;\n      return users;\n    });\n  }\n}\n\nmodule.exports = MessageReaction;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/Emoji.js":"const Constants = require('../util/Constants');\nconst Collection = require('../util/Collection');\n\n/**\n * Represents a custom emoji\n */\nclass Emoji {\n  constructor(guild, data) {\n    /**\n     * The Client that instantiated this object\n     * @name Emoji#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: guild.client });\n\n    /**\n     * The guild this emoji is part of\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The ID of the emoji\n     * @type {string}\n     */\n    this.id = data.id;\n\n    /**\n     * The name of the emoji\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * Whether or not this emoji requires colons surrounding it\n     * @type {boolean}\n     */\n    this.requiresColons = data.require_colons;\n\n    /**\n     * Whether this emoji is managed by an external service\n     * @type {boolean}\n     */\n    this.managed = data.managed;\n\n    this._roles = data.roles;\n  }\n\n  /**\n   * The timestamp the emoji was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return (this.id / 4194304) + 1420070400000;\n  }\n\n  /**\n   * The time the emoji was created\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * A collection of roles this emoji is active for (empty if all), mapped by role ID.\n   * @type {Collection<string, Role>}\n   * @readonly\n   */\n  get roles() {\n    const roles = new Collection();\n    for (const role of this._roles) {\n      if (this.guild.roles.has(role)) roles.set(role, this.guild.roles.get(role));\n    }\n    return roles;\n  }\n\n  /**\n   * The URL to the emoji file\n   * @type {string}\n   * @readonly\n   */\n  get url() {\n    return Constants.Endpoints.emoji(this.id);\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the emoji mention rather than the object.\n   * @returns {string}\n   * @example\n   * // send an emoji:\n   * const emoji = guild.emojis.first();\n   * msg.reply(`Hello! ${emoji}`);\n   */\n  toString() {\n    return this.requiresColons ? `<:${this.name}:${this.id}>` : this.name;\n  }\n\n  /**\n   * Whether this emoji is the same as another one\n   * @param {Emoji|Object} other the emoji to compare it to\n   * @returns {boolean} whether the emoji is equal to the given emoji or not\n   */\n  equals(other) {\n    if (other instanceof Emoji) {\n      return (\n        other.id === this.id &&\n        other.name === this.name &&\n        other.managed === this.managed &&\n        other.requiresColons === this.requiresColons\n      );\n    } else {\n      return (\n        other.id === this.id &&\n        other.name === this.name\n      );\n    }\n  }\n\n  /**\n   * The identifier of this emoji, used for message reactions\n   * @readonly\n   * @type {string}\n   */\n  get identifier() {\n    if (this.id) {\n      return `${this.name}:${this.id}`;\n    }\n    return encodeURIComponent(this.name);\n  }\n}\n\nmodule.exports = Emoji;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/ReactionEmoji.js":"/**\n * Represents a limited emoji set used for both custom and unicode emojis. Custom emojis\n * will use this class opposed to the Emoji class when the client doesn't know enough\n * information about them.\n */\nclass ReactionEmoji {\n  constructor(reaction, name, id) {\n    /**\n     * The message reaction this emoji refers to\n     * @type {MessageReaction}\n     */\n    this.reaction = reaction;\n\n    /**\n     * The name of this reaction emoji.\n     * @type {string}\n     */\n    this.name = name;\n\n    /**\n     * The ID of this reaction emoji.\n     * @type {string}\n     */\n    this.id = id;\n  }\n\n  /**\n   * The identifier of this emoji, used for message reactions\n   * @readonly\n   * @type {string}\n   */\n  get identifier() {\n    if (this.id) return `${this.name}:${this.id}`;\n    return encodeURIComponent(this.name);\n  }\n\n  /**\n   * Creates the text required to form a graphical emoji on Discord.\n   * @example\n   * // send the emoji used in a reaction to the channel the reaction is part of\n   * reaction.message.channel.sendMessage(`The emoji used is ${reaction.emoji}`);\n   * @returns {string}\n   */\n  toString() {\n    return this.id ? `<:${this.name}:${this.id}>` : this.name;\n  }\n}\n\nmodule.exports = ReactionEmoji;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/util/EscapeMarkdown.js":"module.exports = function escapeMarkdown(text, onlyCodeBlock = false, onlyInlineCode = false) {\n  if (onlyCodeBlock) return text.replace(/```/g, '`\\u200b``');\n  if (onlyInlineCode) return text.replace(/\\\\(`|\\\\)/g, '$1').replace(/(`|\\\\)/g, '\\\\$1');\n  return text.replace(/\\\\(\\*|_|`|~|\\\\)/g, '$1').replace(/(\\*|_|`|~|\\\\)/g, '\\\\$1');\n};\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/ClientDataResolver.js":"const path = require('path');\nconst fs = require('fs');\nconst request = require('superagent');\n\nconst Constants = require('../util/Constants');\nconst convertArrayBuffer = require('../util/ConvertArrayBuffer');\nconst User = require('../structures/User');\nconst Message = require('../structures/Message');\nconst Guild = require('../structures/Guild');\nconst Channel = require('../structures/Channel');\nconst GuildMember = require('../structures/GuildMember');\nconst Emoji = require('../structures/Emoji');\nconst ReactionEmoji = require('../structures/ReactionEmoji');\n\n/**\n * The DataResolver identifies different objects and tries to resolve a specific piece of information from them, e.g.\n * extracting a User from a Message object.\n * @private\n */\nclass ClientDataResolver {\n  /**\n   * @param {Client} client The client the resolver is for\n   */\n  constructor(client) {\n    this.client = client;\n  }\n\n  /**\n   * Data that resolves to give a User object. This can be:\n   * * A User object\n   * * A user ID\n   * * A Message object (resolves to the message author)\n   * * A Guild object (owner of the guild)\n   * * A GuildMember object\n   * @typedef {User|string|Message|Guild|GuildMember} UserResolvable\n   */\n\n  /**\n   * Resolves a UserResolvable to a User object\n   * @param {UserResolvable} user The UserResolvable to identify\n   * @returns {?User}\n   */\n  resolveUser(user) {\n    if (user instanceof User) return user;\n    if (typeof user === 'string') return this.client.users.get(user) || null;\n    if (user instanceof GuildMember) return user.user;\n    if (user instanceof Message) return user.author;\n    if (user instanceof Guild) return user.owner;\n    return null;\n  }\n\n  /**\n   * Resolves a UserResolvable to a user ID string\n   * @param {UserResolvable} user The UserResolvable to identify\n   * @returns {?string}\n   */\n  resolveUserID(user) {\n    if (user instanceof User || user instanceof GuildMember) return user.id;\n    if (typeof user === 'string') return user || null;\n    if (user instanceof Message) return user.author.id;\n    if (user instanceof Guild) return user.ownerID;\n    return null;\n  }\n\n  /**\n   * Data that resolves to give a Guild object. This can be:\n   * * A Guild object\n   * * A Guild ID\n   * @typedef {Guild|string} GuildResolvable\n   */\n\n  /**\n   * Resolves a GuildResolvable to a Guild object\n   * @param {GuildResolvable} guild The GuildResolvable to identify\n   * @returns {?Guild}\n   */\n  resolveGuild(guild) {\n    if (guild instanceof Guild) return guild;\n    if (typeof guild === 'string') return this.client.guilds.get(guild) || null;\n    return null;\n  }\n\n  /**\n   * Data that resolves to give a GuildMember object. This can be:\n   * * A GuildMember object\n   * * A User object\n   * @typedef {Guild} GuildMemberResolvable\n   */\n\n  /**\n   * Resolves a GuildMemberResolvable to a GuildMember object\n   * @param {GuildResolvable} guild The guild that the member is part of\n   * @param {UserResolvable} user The user that is part of the guild\n   * @returns {?GuildMember}\n   */\n  resolveGuildMember(guild, user) {\n    if (user instanceof GuildMember) return user;\n    guild = this.resolveGuild(guild);\n    user = this.resolveUser(user);\n    if (!guild || !user) return null;\n    return guild.members.get(user.id) || null;\n  }\n\n  /**\n   * Data that can be resolved to give a Channel. This can be:\n   * * A Channel object\n   * * A Message object (the channel the message was sent in)\n   * * A Guild object (the #general channel)\n   * * A channel ID\n   * @typedef {Channel|Guild|Message|string} ChannelResolvable\n   */\n\n  /**\n   * Resolves a ChannelResolvable to a Channel object\n   * @param {ChannelResolvable} channel The channel resolvable to resolve\n   * @returns {?Channel}\n   */\n  resolveChannel(channel) {\n    if (channel instanceof Channel) return channel;\n    if (channel instanceof Message) return channel.channel;\n    if (channel instanceof Guild) return channel.channels.get(channel.id) || null;\n    if (typeof channel === 'string') return this.client.channels.get(channel) || null;\n    return null;\n  }\n\n  /**\n   * Data that can be resolved to give an invite code. This can be:\n   * * An invite code\n   * * An invite URL\n   * @typedef {string} InviteResolvable\n   */\n\n  /**\n   * Resolves InviteResolvable to an invite code\n   * @param {InviteResolvable} data The invite resolvable to resolve\n   * @returns {string}\n   */\n  resolveInviteCode(data) {\n    const inviteRegex = /discord(?:app)?\\.(?:gg|com\\/invite)\\/([a-z0-9]{5})/i;\n    const match = inviteRegex.exec(data);\n    if (match && match[1]) return match[1];\n    return data;\n  }\n\n  /**\n   * Data that can be resolved to give a permission number. This can be:\n   * * A string\n   * * A permission number\n   *\n   * Possible strings:\n   * ```js\n   * [\n   *   \"CREATE_INSTANT_INVITE\",\n   *   \"KICK_MEMBERS\",\n   *   \"BAN_MEMBERS\",\n   *   \"ADMINISTRATOR\",\n   *   \"MANAGE_CHANNELS\",\n   *   \"MANAGE_GUILD\",\n   *   \"ADD_REACTIONS\", // add reactions to messages\n   *   \"READ_MESSAGES\",\n   *   \"SEND_MESSAGES\",\n   *   \"SEND_TTS_MESSAGES\",\n   *   \"MANAGE_MESSAGES\",\n   *   \"EMBED_LINKS\",\n   *   \"ATTACH_FILES\",\n   *   \"READ_MESSAGE_HISTORY\",\n   *   \"MENTION_EVERYONE\",\n   *   \"EXTERNAL_EMOJIS\", // use external emojis\n   *   \"CONNECT\", // connect to voice\n   *   \"SPEAK\", // speak on voice\n   *   \"MUTE_MEMBERS\", // globally mute members on voice\n   *   \"DEAFEN_MEMBERS\", // globally deafen members on voice\n   *   \"MOVE_MEMBERS\", // move member's voice channels\n   *   \"USE_VAD\", // use voice activity detection\n   *   \"CHANGE_NICKNAME\",\n   *   \"MANAGE_NICKNAMES\", // change nicknames of others\n   *   \"MANAGE_ROLES_OR_PERMISSIONS\",\n   *   \"MANAGE_WEBHOOKS\",\n   *   \"MANAGE_EMOJIS\"\n   * ]\n   * ```\n   * @typedef {string|number} PermissionResolvable\n   */\n\n  /**\n   * Resolves a PermissionResolvable to a permission number\n   * @param {PermissionResolvable} permission The permission resolvable to resolve\n   * @returns {number}\n   */\n  resolvePermission(permission) {\n    if (typeof permission === 'string') permission = Constants.PermissionFlags[permission];\n    if (typeof permission !== 'number' || permission < 1) throw new Error(Constants.Errors.NOT_A_PERMISSION);\n    return permission;\n  }\n\n  /**\n   * Turn an array of permissions into a valid Discord permission bitfield\n   * @param {PermissionResolvable[]} permissions Permissions to resolve together\n   * @returns {number}\n   */\n  resolvePermissions(permissions) {\n    let bitfield = 0;\n    for (const permission of permissions) bitfield |= this.resolvePermission(permission);\n    return bitfield;\n  }\n\n  /**\n   * Data that can be resolved to give a string. This can be:\n   * * A string\n   * * An array (joined with a new line delimiter to give a string)\n   * * Any value\n   * @typedef {string|Array|*} StringResolvable\n   */\n\n  /**\n   * Resolves a StringResolvable to a string\n   * @param {StringResolvable} data The string resolvable to resolve\n   * @returns {string}\n   */\n  resolveString(data) {\n    if (typeof data === 'string') return data;\n    if (data instanceof Array) return data.join('\\n');\n    return String(data);\n  }\n\n  /**\n   * Data that resolves to give a Base64 string, typically for image uploading. This can be:\n   * * A Buffer\n   * * A base64 string\n   * @typedef {Buffer|string} Base64Resolvable\n   */\n\n  /**\n   * Resolves a Base64Resolvable to a Base 64 image\n   * @param {Base64Resolvable} data The base 64 resolvable you want to resolve\n   * @returns {?string}\n   */\n  resolveBase64(data) {\n    if (data instanceof Buffer) return `data:image/jpg;base64,${data.toString('base64')}`;\n    return data;\n  }\n\n  /**\n   * Data that can be resolved to give a Buffer. This can be:\n   * * A Buffer\n   * * The path to a local file\n   * * A URL\n   * @typedef {string|Buffer} BufferResolvable\n   */\n\n  /**\n   * Resolves a BufferResolvable to a Buffer\n   * @param {BufferResolvable} resource The buffer resolvable to resolve\n   * @returns {Promise<Buffer>}\n   */\n  resolveBuffer(resource) {\n    if (resource instanceof Buffer) return Promise.resolve(resource);\n    if (this.client.browser && resource instanceof ArrayBuffer) return Promise.resolve(convertArrayBuffer(resource));\n\n    if (typeof resource === 'string') {\n      return new Promise((resolve, reject) => {\n        if (/^https?:\\/\\//.test(resource)) {\n          const req = request.get(resource).set('Content-Type', 'blob');\n          if (this.client.browser) req.responseType('arraybuffer');\n          req.end((err, res) => {\n            if (err) return reject(err);\n            if (this.client.browser) return resolve(convertArrayBuffer(res.xhr.response));\n            if (!(res.body instanceof Buffer)) return reject(new TypeError('The response body isn\\'t a Buffer.'));\n            return resolve(res.body);\n          });\n        } else {\n          const file = path.resolve(resource);\n          fs.stat(file, (err, stats) => {\n            if (err) reject(err);\n            if (!stats || !stats.isFile()) throw new Error(`The file could not be found: ${file}`);\n            fs.readFile(file, (err2, data) => {\n              if (err2) reject(err2); else resolve(data);\n            });\n          });\n        }\n      });\n    }\n\n    return Promise.reject(new TypeError('The resource must be a string or Buffer.'));\n  }\n\n  /**\n   * Data that can be resolved to give an emoji identifier. This can be:\n   * * A string\n   * * An Emoji\n   * * A ReactionEmoji\n   * @typedef {string|Emoji|ReactionEmoji} EmojiIdentifierResolvable\n   */\n\n  /**\n   * Resolves an EmojiResolvable to an emoji identifier\n   * @param {EmojiIdentifierResolvable} emoji The emoji resolvable to resolve\n   * @returns {string}\n   */\n  resolveEmojiIdentifier(emoji) {\n    if (emoji instanceof Emoji || emoji instanceof ReactionEmoji) return emoji.identifier;\n    if (typeof emoji === 'string') {\n      if (!emoji.includes('%')) return encodeURIComponent(emoji);\n    }\n    return null;\n  }\n}\n\nmodule.exports = ClientDataResolver;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/util/ConvertArrayBuffer.js":"function arrayBufferToBuffer(ab) {\n  const buffer = new Buffer(ab.byteLength);\n  const view = new Uint8Array(ab);\n  for (var i = 0; i < buffer.length; ++i) buffer[i] = view[i];\n  return buffer;\n}\n\nfunction str2ab(str) {\n  const buffer = new ArrayBuffer(str.length * 2);\n  const view = new Uint16Array(buffer);\n  for (var i = 0, strLen = str.length; i < strLen; i++) view[i] = str.charCodeAt(i);\n  return buffer;\n}\n\nmodule.exports = function convertArrayBuffer(x) {\n  if (typeof x === 'string') x = str2ab(x);\n  return arrayBufferToBuffer(x);\n};\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/ClientManager.js":"const Constants = require('../util/Constants');\n\n/**\n * Manages the State and Background Tasks of the Client\n * @private\n */\nclass ClientManager {\n  constructor(client) {\n    /**\n     * The Client that instantiated this Manager\n     * @type {Client}\n     */\n    this.client = client;\n\n    /**\n     * The heartbeat interval, null if not yet set\n     * @type {?number}\n     */\n    this.heartbeatInterval = null;\n  }\n\n  /**\n   * Connects the Client to the WebSocket\n   * @param {string} token The authorization token\n   * @param {Function} resolve Function to run when connection is successful\n   * @param {Function} reject Function to run when connection fails\n   */\n  connectToWebSocket(token, resolve, reject) {\n    this.client.emit(Constants.Events.DEBUG, `Authenticated using token ${token}`);\n    this.client.token = token;\n    const timeout = this.client.setTimeout(() => reject(new Error(Constants.Errors.TOOK_TOO_LONG)), 1000 * 300);\n    this.client.rest.methods.getGateway().then(gateway => {\n      this.client.emit(Constants.Events.DEBUG, `Using gateway ${gateway}`);\n      this.client.ws.connect(gateway);\n      this.client.ws.once('close', event => {\n        if (event.code === 4004) reject(new Error(Constants.Errors.BAD_LOGIN));\n        if (event.code === 4010) reject(new Error(Constants.Errors.INVALID_SHARD));\n      });\n      this.client.once(Constants.Events.READY, () => {\n        resolve(token);\n        this.client.clearTimeout(timeout);\n      });\n    }, reject);\n  }\n\n  /**\n   * Sets up a keep-alive interval to keep the Client's connection valid\n   * @param {number} time The interval in milliseconds at which heartbeat packets should be sent\n   */\n  setupKeepAlive(time) {\n    this.heartbeatInterval = this.client.setInterval(() => this.client.ws.heartbeat(true), time);\n  }\n\n  destroy() {\n    this.client.ws.destroy();\n    if (this.client.user.bot) {\n      this.client.token = null;\n      return Promise.resolve();\n    } else {\n      return this.client.rest.methods.logout().then(() => {\n        this.client.token = null;\n      });\n    }\n  }\n}\n\nmodule.exports = ClientManager;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/WebhookClient.js":"const Webhook = require('../structures/Webhook');\nconst RESTManager = require('./rest/RESTManager');\nconst ClientDataResolver = require('./ClientDataResolver');\nconst mergeDefault = require('../util/MergeDefault');\nconst Constants = require('../util/Constants');\n\n/**\n * The Webhook Client\n * @extends {Webhook}\n */\nclass WebhookClient extends Webhook {\n  /**\n   * @param {string} id The id of the webhook.\n   * @param {string} token the token of the webhook.\n   * @param {ClientOptions} [options] Options for the client\n   * @example\n   * // create a new webhook and send a message\n   * let hook = new Discord.WebhookClient('1234', 'abcdef')\n   * hook.sendMessage('This will send a message').catch(console.error)\n   */\n  constructor(id, token, options) {\n    super(null, id, token);\n\n    /**\n     * The options the client was instantiated with\n     * @type {ClientOptions}\n     */\n    this.options = mergeDefault(Constants.DefaultOptions, options);\n\n    /**\n     * The REST manager of the client\n     * @type {RESTManager}\n     * @private\n     */\n    this.rest = new RESTManager(this);\n\n    /**\n     * The Data Resolver of the Client\n     * @type {ClientDataResolver}\n     * @private\n     */\n    this.resolver = new ClientDataResolver(this);\n  }\n}\n\nmodule.exports = WebhookClient;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/Webhook.js":"const path = require('path');\nconst escapeMarkdown = require('../util/EscapeMarkdown');\n\n/**\n * Represents a webhook\n */\nclass Webhook {\n  constructor(client, dataOrID, token) {\n    if (client) {\n      /**\n       * The Client that instantiated the Webhook\n       * @name Webhook#client\n       * @type {Client}\n       * @readonly\n       */\n      Object.defineProperty(this, 'client', { value: client });\n      if (dataOrID) this.setup(dataOrID);\n    } else {\n      this.id = dataOrID;\n      this.token = token;\n      Object.defineProperty(this, 'client', { value: this });\n    }\n  }\n\n  setup(data) {\n    /**\n     * The name of the webhook\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The token for the webhook\n     * @type {string}\n     */\n    this.token = data.token;\n\n    /**\n     * The avatar for the webhook\n     * @type {string}\n     */\n    this.avatar = data.avatar;\n\n    /**\n     * The ID of the webhook\n     * @type {string}\n     */\n    this.id = data.id;\n\n    /**\n     * The guild the webhook belongs to\n     * @type {string}\n     */\n    this.guildID = data.guild_id;\n\n    /**\n     * The channel the webhook belongs to\n     * @type {string}\n     */\n    this.channelID = data.channel_id;\n\n    /**\n     * The owner of the webhook\n     * @type {User}\n     */\n    if (data.user) this.owner = data.user;\n  }\n\n  /**\n   * Options that can be passed into sendMessage, sendTTSMessage, sendFile, sendCode\n   * @typedef {Object} WebhookMessageOptions\n   * @property {boolean} [tts=false] Whether or not the message should be spoken aloud\n   * @property {boolean} [disableEveryone=this.options.disableEveryone] Whether or not @everyone and @here\n   * should be replaced with plain-text\n   */\n\n  /**\n   * Send a message with this webhook\n   * @param {StringResolvable} content The content to send.\n   * @param {WebhookMessageOptions} [options={}] The options to provide.\n   * @returns {Promise<Message|Message[]>}\n   * @example\n   * // send a message\n   * webhook.sendMessage('hello!')\n   *  .then(message => console.log(`Sent message: ${message.content}`))\n   *  .catch(console.error);\n   */\n  sendMessage(content, options = {}) {\n    return this.client.rest.methods.sendWebhookMessage(this, content, options);\n  }\n\n  /**\n   * Send a raw slack message with this webhook\n   * @param {Object} body The raw body to send.\n   * @returns {Promise}\n   * @example\n   * // send a slack message\n   * webhook.sendSlackMessage({\n   *   'username': 'Wumpus',\n   *   'attachments': [{\n   *     'pretext': 'this looks pretty cool',\n   *     'color': '#F0F',\n   *     'footer_icon': 'http://snek.s3.amazonaws.com/topSnek.png',\n   *     'footer': 'Powered by sneks',\n   *     'ts': Date.now() / 1000\n   *   }]\n   * }).catch(console.error);\n   */\n  sendSlackMessage(body) {\n    return this.client.rest.methods.sendSlackWebhookMessage(this, body);\n  }\n\n  /**\n   * Send a text-to-speech message with this webhook\n   * @param {StringResolvable} content The content to send\n   * @param {WebhookMessageOptions} [options={}] The options to provide\n   * @returns {Promise<Message|Message[]>}\n   * @example\n   * // send a TTS message\n   * webhook.sendTTSMessage('hello!')\n   *  .then(message => console.log(`Sent tts message: ${message.content}`))\n   *  .catch(console.error);\n   */\n  sendTTSMessage(content, options = {}) {\n    Object.assign(options, { tts: true });\n    return this.client.rest.methods.sendWebhookMessage(this, content, options);\n  }\n\n  /**\n   * Send a file with this webhook\n   * @param {BufferResolvable} attachment The file to send\n   * @param {string} [fileName=\"file.jpg\"] The name and extension of the file\n   * @param {StringResolvable} [content] Text message to send with the attachment\n   * @param {WebhookMessageOptions} [options] The options to provide\n   * @returns {Promise<Message>}\n   */\n  sendFile(attachment, fileName, content, options = {}) {\n    if (!fileName) {\n      if (typeof attachment === 'string') {\n        fileName = path.basename(attachment);\n      } else if (attachment && attachment.path) {\n        fileName = path.basename(attachment.path);\n      } else {\n        fileName = 'file.jpg';\n      }\n    }\n    return this.client.resolver.resolveBuffer(attachment).then(file =>\n      this.client.rest.methods.sendWebhookMessage(this, content, options, {\n        file,\n        name: fileName,\n      })\n    );\n  }\n\n  /**\n   * Send a code block with this webhook\n   * @param {string} lang Language for the code block\n   * @param {StringResolvable} content Content of the code block\n   * @param {WebhookMessageOptions} options The options to provide\n   * @returns {Promise<Message|Message[]>}\n   */\n  sendCode(lang, content, options = {}) {\n    if (options.split) {\n      if (typeof options.split !== 'object') options.split = {};\n      if (!options.split.prepend) options.split.prepend = `\\`\\`\\`${lang || ''}\\n`;\n      if (!options.split.append) options.split.append = '\\n```';\n    }\n    content = escapeMarkdown(this.client.resolver.resolveString(content), true);\n    return this.sendMessage(`\\`\\`\\`${lang || ''}\\n${content}\\n\\`\\`\\``, options);\n  }\n\n  /**\n   * Edit the webhook.\n   * @param {string} name The new name for the Webhook\n   * @param {BufferResolvable} avatar The new avatar for the Webhook.\n   * @returns {Promise<Webhook>}\n   */\n  edit(name = this.name, avatar) {\n    if (avatar) {\n      return this.client.resolver.resolveBuffer(avatar).then(file => {\n        const dataURI = this.client.resolver.resolveBase64(file);\n        return this.client.rest.methods.editWebhook(this, name, dataURI);\n      });\n    }\n    return this.client.rest.methods.editWebhook(this, name).then(data => {\n      this.setup(data);\n      return this;\n    });\n  }\n\n  /**\n   * Delete the webhook\n   * @returns {Promise}\n   */\n  delete() {\n    return this.client.rest.methods.deleteWebhook(this);\n  }\n}\n\nmodule.exports = Webhook;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/sharding/ShardClientUtil.js":"const makeError = require('../util/MakeError');\nconst makePlainError = require('../util/MakePlainError');\n\n/**\n * Helper class for sharded clients spawned as a child process, such as from a ShardingManager\n */\nclass ShardClientUtil {\n  /**\n   * @param {Client} client Client of the current shard\n   */\n  constructor(client) {\n    this.client = client;\n    process.on('message', this._handleMessage.bind(this));\n  }\n\n  /**\n   * ID of this shard\n   * @type {number}\n   * @readonly\n   */\n  get id() {\n    return this.client.options.shardId;\n  }\n\n  /**\n   * Total number of shards\n   * @type {number}\n   * @readonly\n   */\n  get count() {\n    return this.client.options.shardCount;\n  }\n\n  /**\n   * Sends a message to the master process\n   * @param {*} message Message to send\n   * @returns {Promise<void>}\n   */\n  send(message) {\n    return new Promise((resolve, reject) => {\n      const sent = process.send(message, err => {\n        if (err) reject(err); else resolve();\n      });\n      if (!sent) throw new Error('Failed to send message to master process.');\n    });\n  }\n\n  /**\n   * Fetches a Client property value of each shard.\n   * @param {string} prop Name of the Client property to get, using periods for nesting\n   * @returns {Promise<Array>}\n   * @example\n   * client.shard.fetchClientValues('guilds.size').then(results => {\n   *   console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`);\n   * }).catch(console.error);\n   */\n  fetchClientValues(prop) {\n    return new Promise((resolve, reject) => {\n      const listener = message => {\n        if (!message || message._sFetchProp !== prop) return;\n        process.removeListener('message', listener);\n        if (!message._error) resolve(message._result); else reject(makeError(message._error));\n      };\n      process.on('message', listener);\n\n      this.send({ _sFetchProp: prop }).catch(err => {\n        process.removeListener('message', listener);\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * Evaluates a script on all shards, in the context of the Clients.\n   * @param {string} script JavaScript to run on each shard\n   * @returns {Promise<Array>} Results of the script execution\n   */\n  broadcastEval(script) {\n    return new Promise((resolve, reject) => {\n      const listener = message => {\n        if (!message || message._sEval !== script) return;\n        process.removeListener('message', listener);\n        if (!message._error) resolve(message._result); else reject(makeError(message._error));\n      };\n      process.on('message', listener);\n\n      this.send({ _sEval: script }).catch(err => {\n        process.removeListener('message', listener);\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * Handles an IPC message\n   * @param {*} message Message received\n   * @private\n   */\n  _handleMessage(message) {\n    if (!message) return;\n    if (message._fetchProp) {\n      const props = message._fetchProp.split('.');\n      let value = this.client;\n      for (const prop of props) value = value[prop];\n      this._respond('fetchProp', { _fetchProp: message._fetchProp, _result: value });\n    } else if (message._eval) {\n      try {\n        this._respond('eval', { _eval: message._eval, _result: this.client._eval(message._eval) });\n      } catch (err) {\n        this._respond('eval', { _eval: message._eval, _error: makePlainError(err) });\n      }\n    }\n  }\n\n  /**\n   * Sends a message to the master process, emitting an error from the client upon failure\n   * @param {string} type Type of response to send\n   * @param {*} message Message to send\n   * @private\n   */\n  _respond(type, message) {\n    this.send(message).catch(err => {\n      err.message = `Error when sending ${type} response to master process: ${err.message}`;\n      this.client.emit('error', err);\n    });\n  }\n\n  /**\n   * Creates/gets the singleton of this class\n   * @param {Client} client Client to use\n   * @returns {ShardClientUtil}\n   */\n  static singleton(client) {\n    if (!this._singleton) {\n      this._singleton = new this(client);\n    } else {\n      client.emit('warn', 'Multiple clients created in child process; only the first will handle sharding helpers.');\n    }\n    return this._singleton;\n  }\n}\n\nmodule.exports = ShardClientUtil;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/util/MakeError.js":"module.exports = function makeError(obj) {\n  const err = new Error(obj.message);\n  err.name = obj.name;\n  err.stack = obj.stack;\n  return err;\n};\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/util/MakePlainError.js":"module.exports = function makePlainError(err) {\n  const obj = {};\n  obj.name = err.name;\n  obj.message = err.message;\n  obj.stack = err.stack;\n  return obj;\n};\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/sharding/ShardingManager.js":"const path = require('path');\nconst fs = require('fs');\nconst EventEmitter = require('events').EventEmitter;\nconst mergeDefault = require('../util/MergeDefault');\nconst Shard = require('./Shard');\nconst Collection = require('../util/Collection');\nconst fetchRecommendedShards = require('../util/FetchRecommendedShards');\n\n/**\n * This is a utility class that can be used to help you spawn shards of your Client. Each shard is completely separate\n * from the other. The Shard Manager takes a path to a file and spawns it under the specified amount of shards safely.\n * If you do not select an amount of shards, the manager will automatically decide the best amount.\n * @extends {EventEmitter}\n */\nclass ShardingManager extends EventEmitter {\n  /**\n   * @param {string} file Path to your shard script file\n   * @param {Object} [options] Options for the sharding manager\n   * @param {number|string} [options.totalShards='auto'] Number of shards to spawn, or \"auto\"\n   * @param {boolean} [options.respawn=true] Whether shards should automatically respawn upon exiting\n   * @param {string[]} [options.shardArgs=[]] Arguments to pass to the shard script when spawning\n   * @param {string} [options.token] Token to use for automatic shard count and passing to shards\n   */\n  constructor(file, options = {}) {\n    super();\n    options = mergeDefault({\n      totalShards: 'auto',\n      respawn: true,\n      shardArgs: [],\n      token: null,\n    }, options);\n\n    /**\n     * Path to the shard script file\n     * @type {string}\n     */\n    this.file = file;\n    if (!file) throw new Error('File must be specified.');\n    if (!path.isAbsolute(file)) this.file = path.resolve(process.cwd(), file);\n    const stats = fs.statSync(this.file);\n    if (!stats.isFile()) throw new Error('File path does not point to a file.');\n\n    /**\n     * Amount of shards that this manager is going to spawn\n     * @type {number|string}\n     */\n    this.totalShards = options.totalShards;\n    if (this.totalShards !== 'auto') {\n      if (typeof this.totalShards !== 'number' || isNaN(this.totalShards)) {\n        throw new TypeError('Amount of shards must be a number.');\n      }\n      if (this.totalShards < 1) throw new RangeError('Amount of shards must be at least 1.');\n      if (this.totalShards !== Math.floor(this.totalShards)) {\n        throw new RangeError('Amount of shards must be an integer.');\n      }\n    }\n\n    /**\n     * Whether shards should automatically respawn upon exiting\n     * @type {boolean}\n     */\n    this.respawn = options.respawn;\n\n    /**\n     * An array of arguments to pass to shards.\n     * @type {string[]}\n     */\n    this.shardArgs = options.shardArgs;\n\n    /**\n     * Token to use for obtaining the automatic shard count, and passing to shards\n     * @type {?string}\n     */\n    this.token = options.token ? options.token.replace(/^Bot\\s*/i, '') : null;\n\n    /**\n     * A collection of shards that this manager has spawned\n     * @type {Collection<number, Shard>}\n     */\n    this.shards = new Collection();\n  }\n\n  /**\n   * Spawns a single shard.\n   * @param {number} id The ID of the shard to spawn. **This is usually not necessary.**\n   * @returns {Promise<Shard>}\n   */\n  createShard(id = this.shards.size) {\n    const shard = new Shard(this, id, this.shardArgs);\n    this.shards.set(id, shard);\n    /**\n     * Emitted upon launching a shard\n     * @event ShardingManager#launch\n     * @param {Shard} shard Shard that was launched\n     */\n    this.emit('launch', shard);\n    return Promise.resolve(shard);\n  }\n\n  /**\n   * Spawns multiple shards.\n   * @param {number} [amount=this.totalShards] Number of shards to spawn\n   * @param {number} [delay=5500] How long to wait in between spawning each shard (in milliseconds)\n   * @returns {Promise<Collection<number, Shard>>}\n   */\n  spawn(amount = this.totalShards, delay = 5500) {\n    if (amount === 'auto') {\n      return fetchRecommendedShards(this.token).then(count => {\n        this.totalShards = count;\n        return this._spawn(count, delay);\n      });\n    } else {\n      if (typeof amount !== 'number' || isNaN(amount)) throw new TypeError('Amount of shards must be a number.');\n      if (amount < 1) throw new RangeError('Amount of shards must be at least 1.');\n      if (amount !== Math.floor(amount)) throw new TypeError('Amount of shards must be an integer.');\n      return this._spawn(amount, delay);\n    }\n  }\n\n  /**\n   * Actually spawns shards, unlike that poser above >:(\n   * @param {number} amount Number of shards to spawn\n   * @param {number} delay How long to wait in between spawning each shard (in milliseconds)\n   * @returns {Promise<Collection<number, Shard>>}\n   * @private\n   */\n  _spawn(amount, delay) {\n    return new Promise(resolve => {\n      if (this.shards.size >= amount) throw new Error(`Already spawned ${this.shards.size} shards.`);\n      this.totalShards = amount;\n\n      this.createShard();\n      if (this.shards.size >= this.totalShards) {\n        resolve(this.shards);\n        return;\n      }\n\n      if (delay <= 0) {\n        while (this.shards.size < this.totalShards) this.createShard();\n        resolve(this.shards);\n      } else {\n        const interval = setInterval(() => {\n          this.createShard();\n          if (this.shards.size >= this.totalShards) {\n            clearInterval(interval);\n            resolve(this.shards);\n          }\n        }, delay);\n      }\n    });\n  }\n\n  /**\n   * Send a message to all shards.\n   * @param {*} message Message to be sent to the shards\n   * @returns {Promise<Shard[]>}\n   */\n  broadcast(message) {\n    const promises = [];\n    for (const shard of this.shards.values()) promises.push(shard.send(message));\n    return Promise.all(promises);\n  }\n\n  /**\n   * Evaluates a script on all shards, in the context of the Clients.\n   * @param {string} script JavaScript to run on each shard\n   * @returns {Promise<Array>} Results of the script execution\n   */\n  broadcastEval(script) {\n    const promises = [];\n    for (const shard of this.shards.values()) promises.push(shard.eval(script));\n    return Promise.all(promises);\n  }\n\n  /**\n   * Fetches a Client property value of each shard.\n   * @param {string} prop Name of the Client property to get, using periods for nesting\n   * @returns {Promise<Array>}\n   * @example\n   * manager.fetchClientValues('guilds.size').then(results => {\n   *   console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`);\n   * }).catch(console.error);\n   */\n  fetchClientValues(prop) {\n    if (this.shards.size === 0) return Promise.reject(new Error('No shards have been spawned.'));\n    if (this.shards.size !== this.totalShards) return Promise.reject(new Error('Still spawning shards.'));\n    const promises = [];\n    for (const shard of this.shards.values()) promises.push(shard.fetchClientValue(prop));\n    return Promise.all(promises);\n  }\n}\n\nmodule.exports = ShardingManager;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/sharding/Shard.js":"const childProcess = require('child_process');\nconst path = require('path');\nconst makeError = require('../util/MakeError');\nconst makePlainError = require('../util/MakePlainError');\n\n/**\n * Represents a Shard spawned by the ShardingManager.\n */\nclass Shard {\n  /**\n   * @param {ShardingManager} manager The sharding manager\n   * @param {number} id The ID of this shard\n   * @param {Array} [args=[]] Command line arguments to pass to the script\n   */\n  constructor(manager, id, args = []) {\n    /**\n     * Manager that created the shard\n     * @type {ShardingManager}\n     */\n    this.manager = manager;\n\n    /**\n     * ID of the shard\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * The environment variables for the shard\n     * @type {Object}\n     */\n    this.env = Object.assign({}, process.env, {\n      SHARD_ID: this.id,\n      SHARD_COUNT: this.manager.totalShards,\n      CLIENT_TOKEN: this.manager.token,\n    });\n\n    /**\n     * Process of the shard\n     * @type {ChildProcess}\n     */\n    this.process = childProcess.fork(path.resolve(this.manager.file), args, {\n      env: this.env,\n    });\n    this.process.on('message', this._handleMessage.bind(this));\n    this.process.once('exit', () => {\n      if (this.manager.respawn) this.manager.createShard(this.id);\n    });\n\n    this._evals = new Map();\n    this._fetches = new Map();\n  }\n\n  /**\n   * Sends a message to the shard's process.\n   * @param {*} message Message to send to the shard\n   * @returns {Promise<Shard>}\n   */\n  send(message) {\n    return new Promise((resolve, reject) => {\n      const sent = this.process.send(message, err => {\n        if (err) reject(err); else resolve(this);\n      });\n      if (!sent) throw new Error('Failed to send message to shard\\'s process.');\n    });\n  }\n\n  /**\n   * Fetches a Client property value of the shard.\n   * @param {string} prop Name of the Client property to get, using periods for nesting\n   * @returns {Promise<*>}\n   * @example\n   * shard.fetchClientValue('guilds.size').then(count => {\n   *   console.log(`${count} guilds in shard ${shard.id}`);\n   * }).catch(console.error);\n   */\n  fetchClientValue(prop) {\n    if (this._fetches.has(prop)) return this._fetches.get(prop);\n\n    const promise = new Promise((resolve, reject) => {\n      const listener = message => {\n        if (!message || message._fetchProp !== prop) return;\n        this.process.removeListener('message', listener);\n        this._fetches.delete(prop);\n        resolve(message._result);\n      };\n      this.process.on('message', listener);\n\n      this.send({ _fetchProp: prop }).catch(err => {\n        this.process.removeListener('message', listener);\n        this._fetches.delete(prop);\n        reject(err);\n      });\n    });\n\n    this._fetches.set(prop, promise);\n    return promise;\n  }\n\n  /**\n   * Evaluates a script on the shard, in the context of the Client.\n   * @param {string} script JavaScript to run on the shard\n   * @returns {Promise<*>} Result of the script execution\n   */\n  eval(script) {\n    if (this._evals.has(script)) return this._evals.get(script);\n\n    const promise = new Promise((resolve, reject) => {\n      const listener = message => {\n        if (!message || message._eval !== script) return;\n        this.process.removeListener('message', listener);\n        this._evals.delete(script);\n        if (!message._error) resolve(message._result); else reject(makeError(message._error));\n      };\n      this.process.on('message', listener);\n\n      this.send({ _eval: script }).catch(err => {\n        this.process.removeListener('message', listener);\n        this._evals.delete(script);\n        reject(err);\n      });\n    });\n\n    this._evals.set(script, promise);\n    return promise;\n  }\n\n  /**\n   * Handles an IPC message\n   * @param {*} message Message received\n   * @private\n   */\n  _handleMessage(message) {\n    if (message) {\n      // Shard is requesting a property fetch\n      if (message._sFetchProp) {\n        this.manager.fetchClientValues(message._sFetchProp).then(\n          results => this.send({ _sFetchProp: message._sFetchProp, _result: results }),\n          err => this.send({ _sFetchProp: message._sFetchProp, _error: makePlainError(err) })\n        );\n        return;\n      }\n\n      // Shard is requesting an eval broadcast\n      if (message._sEval) {\n        this.manager.broadcastEval(message._sEval).then(\n          results => this.send({ _sEval: message._sEval, _result: results }),\n          err => this.send({ _sEval: message._sEval, _error: makePlainError(err) })\n        );\n        return;\n      }\n    }\n\n    /**\n     * Emitted upon recieving a message from a shard\n     * @event ShardingManager#message\n     * @param {Shard} shard Shard that sent the message\n     * @param {*} message Message that was received\n     */\n    this.manager.emit('message', this, message);\n  }\n}\n\nmodule.exports = Shard;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/util/FetchRecommendedShards.js":"const superagent = require('superagent');\nconst botGateway = require('./Constants').Endpoints.botGateway;\n\n/**\n * Gets the recommended shard count from Discord\n * @param {number} token Discord auth token\n * @returns {Promise<number>} the recommended number of shards\n */\nmodule.exports = function fetchRecommendedShards(token) {\n  return new Promise((resolve, reject) => {\n    if (!token) throw new Error('A token must be provided.');\n    superagent.get(botGateway)\n      .set('Authorization', `Bot ${token.replace(/^Bot\\s*/i, '')}`)\n      .end((err, res) => {\n        if (err) reject(err);\n        resolve(res.body.shards);\n      });\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/Channel.js":"/**\n * Represents any channel on Discord\n */\nclass Channel {\n  constructor(client, data) {\n    /**\n     * The client that instantiated the Channel\n     * @name Channel#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    /**\n     * The type of the channel, either:\n     * * `dm` - a DM channel\n     * * `group` - a Group DM channel\n     * * `text` - a guild text channel\n     * * `voice` - a guild voice channel\n     * @type {string}\n     */\n    this.type = null;\n\n    if (data) this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The unique ID of the channel\n     * @type {string}\n     */\n    this.id = data.id;\n  }\n\n  /**\n   * The timestamp the channel was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return (this.id / 4194304) + 1420070400000;\n  }\n\n  /**\n   * The time the channel was created\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * Deletes the channel\n   * @returns {Promise<Channel>}\n   * @example\n   * // delete the channel\n   * channel.delete()\n   *  .then() // success\n   *  .catch(console.error); // log error\n   */\n  delete() {\n    return this.client.rest.methods.deleteChannel(this);\n  }\n}\n\nmodule.exports = Channel;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/ClientOAuth2Application.js":"const User = require('./User');\nconst OAuth2Application = require('./OAuth2Application');\n\n/**\n * Represents the client's OAuth2 Application\n * @extends {OAuth2Application}\n */\nclass ClientOAuth2Application extends OAuth2Application {\n  setup(data) {\n    super.setup(data);\n\n    /**\n     * The app's flags\n     * @type {number}\n     */\n    this.flags = data.flags;\n\n    /**\n     * The app's owner\n     * @type {User}\n     */\n    this.owner = new User(this.client, data.owner);\n  }\n}\n\nmodule.exports = ClientOAuth2Application;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/ClientUser.js":"const User = require('./User');\nconst Collection = require('../util/Collection');\n\n/**\n * Represents the logged in client's Discord user\n * @extends {User}\n */\nclass ClientUser extends User {\n  setup(data) {\n    super.setup(data);\n\n    /**\n     * Whether or not this account has been verified\n     * @type {boolean}\n     */\n    this.verified = data.verified;\n\n    /**\n     * The email of this account\n     * @type {string}\n     */\n    this.email = data.email;\n    this.localPresence = {};\n    this._typing = new Map();\n\n    /**\n     * A Collection of friends for the logged in user.\n     * <warn>This is only filled when using a user account.</warn>\n     * @type {Collection<string, User>}\n     */\n    this.friends = new Collection();\n\n    /**\n     * A Collection of blocked users for the logged in user.\n     * <warn>This is only filled when using a user account.</warn>\n     * @type {Collection<string, User>}\n     */\n    this.blocked = new Collection();\n\n    /**\n     * A Collection of notes for the logged in user.\n     * <warn>This is only filled when using a user account.</warn>\n     * @type {Collection<string, string>}\n     */\n    this.notes = new Collection();\n  }\n\n  edit(data) {\n    return this.client.rest.methods.updateCurrentUser(data);\n  }\n\n  /**\n   * Set the username of the logged in Client.\n   * <info>Changing usernames in Discord is heavily rate limited, with only 2 requests\n   * every hour. Use this sparingly!</info>\n   * @param {string} username The new username\n   * @param {string} [password] Current password (only for user accounts)\n   * @returns {Promise<ClientUser>}\n   * @example\n   * // set username\n   * client.user.setUsername('discordjs')\n   *  .then(user => console.log(`My new username is ${user.username}`))\n   *  .catch(console.error);\n   */\n  setUsername(username, password) {\n    return this.client.rest.methods.updateCurrentUser({ username }, password);\n  }\n\n  /**\n   * Changes the email for the client user's account.\n   * <warn>This is only available when using a user account.</warn>\n   * @param {string} email New email to change to\n   * @param {string} password Current password\n   * @returns {Promise<ClientUser>}\n   * @example\n   * // set email\n   * client.user.setEmail('bob@gmail.com', 'some amazing password 123')\n   *  .then(user => console.log(`My new email is ${user.email}`))\n   *  .catch(console.error);\n   */\n  setEmail(email, password) {\n    return this.client.rest.methods.updateCurrentUser({ email }, password);\n  }\n\n  /**\n   * Changes the password for the client user's account.\n   * <warn>This is only available when using a user account.</warn>\n   * @param {string} newPassword New password to change to\n   * @param {string} oldPassword Current password\n   * @returns {Promise<ClientUser>}\n   * @example\n   * // set password\n   * client.user.setPassword('some new amazing password 456', 'some amazing password 123')\n   *  .then(user => console.log('New password set!'))\n   *  .catch(console.error);\n   */\n  setPassword(newPassword, oldPassword) {\n    return this.client.rest.methods.updateCurrentUser({ password: newPassword }, oldPassword);\n  }\n\n  /**\n   * Set the avatar of the logged in Client.\n   * @param {BufferResolvable|Base64Resolvable} avatar The new avatar\n   * @returns {Promise<ClientUser>}\n   * @example\n   * // set avatar\n   * client.user.setAvatar('./avatar.png')\n   *  .then(user => console.log(`New avatar set!`))\n   *  .catch(console.error);\n   */\n  setAvatar(avatar) {\n    if (avatar.startsWith('data:')) {\n      return this.client.rest.methods.updateCurrentUser({ avatar });\n    } else {\n      return this.client.resolver.resolveBuffer(avatar).then(data =>\n        this.client.rest.methods.updateCurrentUser({ avatar: data })\n      );\n    }\n  }\n\n  /**\n   * Data resembling a raw Discord presence\n   * @typedef {Object} PresenceData\n   * @property {PresenceStatus} [status] Status of the user\n   * @property {boolean} [afk] Whether the user is AFK\n   * @property {Object} [game] Game the user is playing\n   * @property {string} [game.name] Name of the game\n   * @property {string} [game.url] Twitch stream URL\n   */\n\n  /**\n   * Sets the full presence of the client user.\n   * @param {PresenceData} data Data for the presence\n   * @returns {Promise<ClientUser>}\n   */\n  setPresence(data) {\n    // {\"op\":3,\"d\":{\"status\":\"dnd\",\"since\":0,\"game\":null,\"afk\":false}}\n    return new Promise(resolve => {\n      let status = this.localPresence.status || this.presence.status;\n      let game = this.localPresence.game;\n      let afk = this.localPresence.afk || this.presence.afk;\n\n      if (!game && this.presence.game) {\n        game = {\n          name: this.presence.game.name,\n          type: this.presence.game.type,\n          url: this.presence.game.url,\n        };\n      }\n\n      if (data.status) {\n        if (typeof data.status !== 'string') throw new TypeError('Status must be a string');\n        status = data.status;\n      }\n\n      if (data.game) {\n        game = data.game;\n        if (game.url) game.type = 1;\n      }\n\n      if (typeof data.afk !== 'undefined') afk = data.afk;\n      afk = Boolean(afk);\n\n      this.localPresence = { status, game, afk };\n      this.localPresence.since = 0;\n      this.localPresence.game = this.localPresence.game || null;\n\n      this.client.ws.send({\n        op: 3,\n        d: this.localPresence,\n      });\n\n      this.client._setPresence(this.id, this.localPresence);\n\n      resolve(this);\n    });\n  }\n\n  /**\n   * A user's status. Must be one of:\n   * - `online`\n   * - `idle`\n   * - `invisible`\n   * - `dnd` (do not disturb)\n   * @typedef {string} PresenceStatus\n   */\n\n  /**\n   * Sets the status of the client user.\n   * @param {PresenceStatus} status Status to change to\n   * @returns {Promise<ClientUser>}\n   */\n  setStatus(status) {\n    return this.setPresence({ status });\n  }\n\n  /**\n   * Sets the game the client user is playing.\n   * @param {string} game Game being played\n   * @param {string} [streamingURL] Twitch stream URL\n   * @returns {Promise<ClientUser>}\n   */\n  setGame(game, streamingURL) {\n    return this.setPresence({ game: {\n      name: game,\n      url: streamingURL,\n    } });\n  }\n\n  /**\n   * Sets/removes the AFK flag for the client user.\n   * @param {boolean} afk Whether or not the user is AFK\n   * @returns {Promise<ClientUser>}\n   */\n  setAFK(afk) {\n    return this.setPresence({ afk });\n  }\n\n  /**\n   * Fetches messages that mentioned the client's user\n   * @param {Object} [options] Options for the fetch\n   * @param {number} [options.limit=25] Maximum number of mentions to retrieve\n   * @param {boolean} [options.roles=true] Whether to include role mentions\n   * @param {boolean} [options.everyone=true] Whether to include everyone/here mentions\n   * @param {Guild|string} [options.guild] Limit the search to a specific guild\n   * @returns {Promise<Message[]>}\n   */\n  fetchMentions(options = { limit: 25, roles: true, everyone: true, guild: null }) {\n    return this.client.rest.methods.fetchMentions(options);\n  }\n\n  /**\n   * Send a friend request\n   * <warn>This is only available when using a user account.</warn>\n   * @param {UserResolvable} user The user to send the friend request to.\n   * @returns {Promise<User>} The user the friend request was sent to.\n   */\n  addFriend(user) {\n    user = this.client.resolver.resolveUser(user);\n    return this.client.rest.methods.addFriend(user);\n  }\n\n  /**\n   * Remove a friend\n   * <warn>This is only available when using a user account.</warn>\n   * @param {UserResolvable} user The user to remove from your friends\n   * @returns {Promise<User>} The user that was removed\n   */\n  removeFriend(user) {\n    user = this.client.resolver.resolveUser(user);\n    return this.client.rest.methods.removeFriend(user);\n  }\n\n  /**\n   * Creates a guild\n   * <warn>This is only available when using a user account.</warn>\n   * @param {string} name The name of the guild\n   * @param {string} region The region for the server\n   * @param {BufferResolvable|Base64Resolvable} [icon=null] The icon for the guild\n   * @returns {Promise<Guild>} The guild that was created\n   */\n  createGuild(name, region, icon = null) {\n    if (!icon) return this.client.rest.methods.createGuild({ name, icon, region });\n    if (icon.startsWith('data:')) {\n      return this.client.rest.methods.createGuild({ name, icon, region });\n    } else {\n      return this.client.resolver.resolveBuffer(icon).then(data =>\n        this.client.rest.methods.createGuild({ name, icon: data, region })\n      );\n    }\n  }\n}\n\nmodule.exports = ClientUser;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/DMChannel.js":"const Channel = require('./Channel');\nconst TextBasedChannel = require('./interface/TextBasedChannel');\nconst Collection = require('../util/Collection');\n\n/**\n * Represents a direct message channel between two users.\n * @extends {Channel}\n * @implements {TextBasedChannel}\n */\nclass DMChannel extends Channel {\n  constructor(client, data) {\n    super(client, data);\n    this.type = 'dm';\n    this.messages = new Collection();\n    this._typing = new Map();\n  }\n\n  setup(data) {\n    super.setup(data);\n\n    /**\n     * The recipient on the other end of the DM\n     * @type {User}\n     */\n    this.recipient = this.client.dataManager.newUser(data.recipients[0]);\n\n    this.lastMessageID = data.last_message_id;\n  }\n\n  /**\n   * When concatenated with a string, this automatically concatenates the recipient's mention instead of the\n   * DM channel object.\n   * @returns {string}\n   */\n  toString() {\n    return this.recipient.toString();\n  }\n\n  // These are here only for documentation purposes - they are implemented by TextBasedChannel\n  send() { return; }\n  sendMessage() { return; }\n  sendEmbed() { return; }\n  sendFile() { return; }\n  sendCode() { return; }\n  fetchMessage() { return; }\n  fetchMessages() { return; }\n  fetchPinnedMessages() { return; }\n  startTyping() { return; }\n  stopTyping() { return; }\n  get typing() { return; }\n  get typingCount() { return; }\n  createCollector() { return; }\n  awaitMessages() { return; }\n  bulkDelete() { return; }\n  _cacheMessage() { return; }\n}\n\nTextBasedChannel.applyToClass(DMChannel, true);\n\nmodule.exports = DMChannel;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/EvaluatedPermissions.js":"const Constants = require('../util/Constants');\n\n/**\n * The final evaluated permissions for a member in a channel\n */\nclass EvaluatedPermissions {\n  constructor(member, raw) {\n    /**\n     * The member this permissions refer to\n     * @type {GuildMember}\n     */\n    this.member = member;\n\n    /**\n     * A number representing the packed permissions\n     * @type {number}\n     */\n    this.raw = raw;\n  }\n\n  /**\n   * Get an object mapping permission name, e.g. `READ_MESSAGES` to a boolean - whether the user\n   * can perform this or not.\n   * @returns {Object<string, boolean>}\n   */\n  serialize() {\n    const serializedPermissions = {};\n    for (const permissionName in Constants.PermissionFlags) {\n      serializedPermissions[permissionName] = this.hasPermission(permissionName);\n    }\n    return serializedPermissions;\n  }\n\n  /**\n   * Checks whether the user has a certain permission, e.g. `READ_MESSAGES`.\n   * @param {PermissionResolvable} permission The permission to check for\n   * @param {boolean} [explicit=false] Whether to require the user to explicitly have the exact permission\n   * @returns {boolean}\n   */\n  hasPermission(permission, explicit = false) {\n    permission = this.member.client.resolver.resolvePermission(permission);\n    if (!explicit && (this.raw & Constants.PermissionFlags.ADMINISTRATOR) > 0) return true;\n    return (this.raw & permission) > 0;\n  }\n\n  /**\n   * Checks whether the user has all specified permissions.\n   * @param {PermissionResolvable[]} permissions The permissions to check for\n   * @param {boolean} [explicit=false] Whether to require the user to explicitly have the exact permissions\n   * @returns {boolean}\n   */\n  hasPermissions(permissions, explicit = false) {\n    return permissions.every(p => this.hasPermission(p, explicit));\n  }\n\n  /**\n   * Checks whether the user has all specified permissions, and lists any missing permissions.\n   * @param {PermissionResolvable[]} permissions The permissions to check for\n   * @param {boolean} [explicit=false] Whether to require the user to explicitly have the exact permissions\n   * @returns {PermissionResolvable[]}\n   */\n  missingPermissions(permissions, explicit = false) {\n    return permissions.filter(p => !this.hasPermission(p, explicit));\n  }\n}\n\nmodule.exports = EvaluatedPermissions;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/GroupDMChannel.js":"const Channel = require('./Channel');\nconst TextBasedChannel = require('./interface/TextBasedChannel');\nconst Collection = require('../util/Collection');\n\n/*\n{ type: 3,\n  recipients:\n   [ { username: 'Charlie',\n       id: '123',\n       discriminator: '6631',\n       avatar: '123' },\n     { username: 'Ben',\n       id: '123',\n       discriminator: '2055',\n       avatar: '123' },\n     { username: 'Adam',\n       id: '123',\n       discriminator: '2406',\n       avatar: '123' } ],\n  owner_id: '123',\n  name: null,\n  last_message_id: '123',\n  id: '123',\n  icon: null }\n*/\n\n/**\n * Represents a Group DM on Discord\n * @extends {Channel}\n * @implements {TextBasedChannel}\n */\nclass GroupDMChannel extends Channel {\n  constructor(client, data) {\n    super(client, data);\n    this.type = 'group';\n    this.messages = new Collection();\n    this._typing = new Map();\n  }\n\n  setup(data) {\n    super.setup(data);\n\n    /**\n     * The name of this Group DM, can be null if one isn't set.\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * A hash of the Group DM icon.\n     * @type {string}\n     */\n    this.icon = data.icon;\n\n    /**\n     * The user ID of this Group DM's owner.\n     * @type {string}\n     */\n    this.ownerID = data.owner_id;\n\n    if (!this.recipients) {\n      /**\n       * A collection of the recipients of this DM, mapped by their ID.\n       * @type {Collection<string, User>}\n       */\n      this.recipients = new Collection();\n    }\n\n    if (data.recipients) {\n      for (const recipient of data.recipients) {\n        const user = this.client.dataManager.newUser(recipient);\n        this.recipients.set(user.id, user);\n      }\n    }\n\n    this.lastMessageID = data.last_message_id;\n  }\n\n  /**\n   * The owner of this Group DM.\n   * @type {User}\n   * @readonly\n   */\n  get owner() {\n    return this.client.users.get(this.ownerID);\n  }\n\n  /**\n   * Whether this channel equals another channel. It compares all properties, so for most operations\n   * it is advisable to just compare `channel.id === channel2.id` as it is much faster and is often\n   * what most users need.\n   * @param {GroupDMChannel} channel Channel to compare with\n   * @returns {boolean}\n   */\n  equals(channel) {\n    const equal = channel &&\n      this.id === channel.id &&\n      this.name === channel.name &&\n      this.icon === channel.icon &&\n      this.ownerID === channel.ownerID;\n\n    if (equal) {\n      return this.recipients.equals(channel.recipients);\n    }\n\n    return equal;\n  }\n\n  /**\n   * When concatenated with a string, this automatically concatenates the channel's name instead of the Channel object.\n   * @returns {string}\n   * @example\n   * // logs: Hello from My Group DM!\n   * console.log(`Hello from ${channel}!`);\n   * @example\n   * // logs: Hello from My Group DM!\n   * console.log(`Hello from ' + channel + '!');\n   */\n  toString() {\n    return this.name;\n  }\n\n  // These are here only for documentation purposes - they are implemented by TextBasedChannel\n  send() { return; }\n  sendMessage() { return; }\n  sendEmbed() { return; }\n  sendFile() { return; }\n  sendCode() { return; }\n  fetchMessage() { return; }\n  fetchMessages() { return; }\n  fetchPinnedMessages() { return; }\n  startTyping() { return; }\n  stopTyping() { return; }\n  get typing() { return; }\n  get typingCount() { return; }\n  createCollector() { return; }\n  awaitMessages() { return; }\n  bulkDelete() { return; }\n  _cacheMessage() { return; }\n}\n\nTextBasedChannel.applyToClass(GroupDMChannel, true);\n\nmodule.exports = GroupDMChannel;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/GuildChannel.js":"const Channel = require('./Channel');\nconst Role = require('./Role');\nconst PermissionOverwrites = require('./PermissionOverwrites');\nconst EvaluatedPermissions = require('./EvaluatedPermissions');\nconst Constants = require('../util/Constants');\nconst Collection = require('../util/Collection');\n\n/**\n * Represents a guild channel (i.e. text channels and voice channels)\n * @extends {Channel}\n */\nclass GuildChannel extends Channel {\n  constructor(guild, data) {\n    super(guild.client, data);\n\n    /**\n     * The guild the channel is in\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  setup(data) {\n    super.setup(data);\n\n    /**\n     * The name of the guild channel\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The position of the channel in the list.\n     * @type {number}\n     */\n    this.position = data.position;\n\n    /**\n     * A map of permission overwrites in this channel for roles and users.\n     * @type {Collection<string, PermissionOverwrites>}\n     */\n    this.permissionOverwrites = new Collection();\n    if (data.permission_overwrites) {\n      for (const overwrite of data.permission_overwrites) {\n        this.permissionOverwrites.set(overwrite.id, new PermissionOverwrites(this, overwrite));\n      }\n    }\n  }\n\n  /**\n   * Gets the overall set of permissions for a user in this channel, taking into account roles and permission\n   * overwrites.\n   * @param {GuildMemberResolvable} member The user that you want to obtain the overall permissions for\n   * @returns {?EvaluatedPermissions}\n   */\n  permissionsFor(member) {\n    member = this.client.resolver.resolveGuildMember(this.guild, member);\n    if (!member) return null;\n    if (member.id === this.guild.ownerID) return new EvaluatedPermissions(member, Constants.ALL_PERMISSIONS);\n\n    let permissions = 0;\n\n    const roles = member.roles;\n    for (const role of roles.values()) permissions |= role.permissions;\n\n    const overwrites = this.overwritesFor(member, true, roles);\n    for (const overwrite of overwrites.role.concat(overwrites.member)) {\n      permissions &= ~overwrite.deny;\n      permissions |= overwrite.allow;\n    }\n\n    const admin = Boolean(permissions & Constants.PermissionFlags.ADMINISTRATOR);\n    if (admin) permissions = Constants.ALL_PERMISSIONS;\n\n    return new EvaluatedPermissions(member, permissions);\n  }\n\n  overwritesFor(member, verified = false, roles = null) {\n    if (!verified) member = this.client.resolver.resolveGuildMember(this.guild, member);\n    if (!member) return [];\n\n    roles = roles || member.roles;\n    const roleOverwrites = [];\n    const memberOverwrites = [];\n\n    for (const overwrite of this.permissionOverwrites.values()) {\n      if (overwrite.id === member.id) {\n        memberOverwrites.push(overwrite);\n      } else if (roles.has(overwrite.id)) {\n        roleOverwrites.push(overwrite);\n      }\n    }\n\n    return {\n      role: roleOverwrites,\n      member: memberOverwrites,\n    };\n  }\n\n  /**\n   * An object mapping permission flags to `true` (enabled) or `false` (disabled)\n   * ```js\n   * {\n   *  'SEND_MESSAGES': true,\n   *  'ATTACH_FILES': false,\n   * }\n   * ```\n   * @typedef {Object} PermissionOverwriteOptions\n   */\n\n  /**\n   * Overwrites the permissions for a user or role in this channel.\n   * @param {RoleResolvable|UserResolvable} userOrRole The user or role to update\n   * @param {PermissionOverwriteOptions} options The configuration for the update\n   * @returns {Promise}\n   * @example\n   * // overwrite permissions for a message author\n   * message.channel.overwritePermissions(message.author, {\n   *  SEND_MESSAGES: false\n   * })\n   * .then(() => console.log('Done!'))\n   * .catch(console.error);\n   */\n  overwritePermissions(userOrRole, options) {\n    const payload = {\n      allow: 0,\n      deny: 0,\n    };\n\n    if (userOrRole instanceof Role) {\n      payload.type = 'role';\n    } else if (this.guild.roles.has(userOrRole)) {\n      userOrRole = this.guild.roles.get(userOrRole);\n      payload.type = 'role';\n    } else {\n      userOrRole = this.client.resolver.resolveUser(userOrRole);\n      payload.type = 'member';\n      if (!userOrRole) return Promise.reject(new TypeError('Supplied parameter was neither a User nor a Role.'));\n    }\n\n    payload.id = userOrRole.id;\n\n    const prevOverwrite = this.permissionOverwrites.get(userOrRole.id);\n\n    if (prevOverwrite) {\n      payload.allow = prevOverwrite.allow;\n      payload.deny = prevOverwrite.deny;\n    }\n\n    for (const perm in options) {\n      if (options[perm] === true) {\n        payload.allow |= Constants.PermissionFlags[perm] || 0;\n        payload.deny &= ~(Constants.PermissionFlags[perm] || 0);\n      } else if (options[perm] === false) {\n        payload.allow &= ~(Constants.PermissionFlags[perm] || 0);\n        payload.deny |= Constants.PermissionFlags[perm] || 0;\n      } else if (options[perm] === null) {\n        payload.allow &= ~(Constants.PermissionFlags[perm] || 0);\n        payload.deny &= ~(Constants.PermissionFlags[perm] || 0);\n      }\n    }\n\n    return this.client.rest.methods.setChannelOverwrite(this, payload);\n  }\n\n  /**\n   * The data for a guild channel\n   * @typedef {Object} ChannelData\n   * @property {string} [name] The name of the channel\n   * @property {number} [position] The position of the channel\n   * @property {string} [topic] The topic of the text channel\n   * @property {number} [bitrate] The bitrate of the voice channel\n   * @property {number} [userLimit] The user limit of the channel\n   */\n\n  /**\n   * Edits the channel\n   * @param {ChannelData} data The new data for the channel\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // edit a channel\n   * channel.edit({name: 'new-channel'})\n   *  .then(c => console.log(`Edited channel ${c}`))\n   *  .catch(console.error);\n   */\n  edit(data) {\n    return this.client.rest.methods.updateChannel(this, data);\n  }\n\n  /**\n   * Set a new name for the guild channel\n   * @param {string} name The new name for the guild channel\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // set a new channel name\n   * channel.setName('not_general')\n   *  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n   *  .catch(console.error);\n   */\n  setName(name) {\n    return this.edit({ name });\n  }\n\n  /**\n   * Set a new position for the guild channel\n   * @param {number} position The new position for the guild channel\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // set a new channel position\n   * channel.setPosition(2)\n   *  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n   *  .catch(console.error);\n   */\n  setPosition(position) {\n    return this.client.rest.methods.updateChannel(this, { position });\n  }\n\n  /**\n   * Set a new topic for the guild channel\n   * @param {string} topic The new topic for the guild channel\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // set a new channel topic\n   * channel.setTopic('needs more rate limiting')\n   *  .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n   *  .catch(console.error);\n   */\n  setTopic(topic) {\n    return this.client.rest.methods.updateChannel(this, { topic });\n  }\n\n  /**\n   * Options given when creating a guild channel invite\n   * @typedef {Object} InviteOptions\n   * @property {boolean} [temporary=false] Whether the invite should kick users after 24hrs if they are not given a role\n   * @property {number} [maxAge=0] Time in seconds the invite expires in\n   * @property {number} [maxUses=0] Maximum amount of uses for this invite\n   */\n\n  /**\n   * Create an invite to this guild channel\n   * @param {InviteOptions} [options={}] The options for the invite\n   * @returns {Promise<Invite>}\n   */\n  createInvite(options = {}) {\n    return this.client.rest.methods.createChannelInvite(this, options);\n  }\n\n  /**\n   * Clone this channel\n   * @param {string} [name=this.name] Optional name for the new channel, otherwise it has the name of this channel\n   * @param {boolean} [withPermissions=true] Whether to clone the channel with this channel's permission overwrites\n   * @returns {Promise<GuildChannel>}\n   */\n  clone(name = this.name, withPermissions = true) {\n    return this.guild.createChannel(name, this.type, withPermissions ? this.permissionOverwrites : []);\n  }\n\n  /**\n   * Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\n   * In most cases, a simple `channel.id === channel2.id` will do, and is much faster too.\n   * @param {GuildChannel} channel Channel to compare with\n   * @returns {boolean}\n   */\n  equals(channel) {\n    let equal = channel &&\n      this.id === channel.id &&\n      this.type === channel.type &&\n      this.topic === channel.topic &&\n      this.position === channel.position &&\n      this.name === channel.name;\n\n    if (equal) {\n      if (this.permissionOverwrites && channel.permissionOverwrites) {\n        equal = this.permissionOverwrites.equals(channel.permissionOverwrites);\n      } else {\n        equal = !this.permissionOverwrites && !channel.permissionOverwrites;\n      }\n    }\n\n    return equal;\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.\n   * @returns {string}\n   * @example\n   * // Outputs: Hello from #general\n   * console.log(`Hello from ${channel}`);\n   * @example\n   * // Outputs: Hello from #general\n   * console.log('Hello from ' + channel);\n   */\n  toString() {\n    return `<#${this.id}>`;\n  }\n}\n\nmodule.exports = GuildChannel;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/Role.js":"const Constants = require('../util/Constants');\n\n/**\n * Represents a role on Discord\n */\nclass Role {\n  constructor(guild, data) {\n    /**\n     * The client that instantiated the role\n     * @name Role#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: guild.client });\n\n    /**\n     * The guild that the role belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    if (data) this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The ID of the role (unique to the guild it is part of)\n     * @type {string}\n     */\n    this.id = data.id;\n\n    /**\n     * The name of the role\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The base 10 color of the role\n     * @type {number}\n     */\n    this.color = data.color;\n\n    /**\n     * If true, users that are part of this role will appear in a separate category in the users list\n     * @type {boolean}\n     */\n    this.hoist = data.hoist;\n\n    /**\n     * The position of the role in the role manager\n     * @type {number}\n     */\n    this.position = data.position;\n\n    /**\n     * The evaluated permissions number\n     * @type {number}\n     */\n    this.permissions = data.permissions;\n\n    /**\n     * Whether or not the role is managed by an external service\n     * @type {boolean}\n     */\n    this.managed = data.managed;\n\n    /**\n     * Whether or not the role can be mentioned by anyone\n     * @type {boolean}\n     */\n    this.mentionable = data.mentionable;\n  }\n\n  /**\n   * The timestamp the role was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return (this.id / 4194304) + 1420070400000;\n  }\n\n  /**\n   * The time the role was created\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The hexadecimal version of the role color, with a leading hashtag.\n   * @type {string}\n   * @readonly\n   */\n  get hexColor() {\n    let col = this.color.toString(16);\n    while (col.length < 6) col = `0${col}`;\n    return `#${col}`;\n  }\n\n  /**\n   * The cached guild members that have this role.\n   * @type {Collection<string, GuildMember>}\n   * @readonly\n   */\n  get members() {\n    return this.guild.members.filter(m => m.roles.has(this.id));\n  }\n\n  /**\n   * Whether the role is editable by the client user.\n   * @type {boolean}\n   * @readonly\n   */\n  get editable() {\n    if (this.managed) return false;\n    const clientMember = this.guild.member(this.client.user);\n    if (!clientMember.hasPermission(Constants.PermissionFlags.MANAGE_ROLES_OR_PERMISSIONS)) return false;\n    return clientMember.highestRole.comparePositionTo(this) > 0;\n  }\n\n  /**\n   * Get an object mapping permission names to whether or not the role enables that permission\n   * @returns {Object<string, boolean>}\n   * @example\n   * // print the serialized role\n   * console.log(role.serialize());\n   */\n  serialize() {\n    const serializedPermissions = {};\n    for (const permissionName in Constants.PermissionFlags) {\n      serializedPermissions[permissionName] = this.hasPermission(permissionName);\n    }\n    return serializedPermissions;\n  }\n\n  /**\n   * Checks if the role has a permission.\n   * @param {PermissionResolvable} permission The permission to check for\n   * @param {boolean} [explicit=false] Whether to require the role to explicitly have the exact permission\n   * @returns {boolean}\n   * @example\n   * // see if a role can ban a member\n   * if (role.hasPermission('BAN_MEMBERS')) {\n   *   console.log('This role can ban members');\n   * } else {\n   *   console.log('This role can\\'t ban members');\n   * }\n   */\n  hasPermission(permission, explicit = false) {\n    permission = this.client.resolver.resolvePermission(permission);\n    if (!explicit && (this.permissions & Constants.PermissionFlags.ADMINISTRATOR) > 0) return true;\n    return (this.permissions & permission) > 0;\n  }\n\n  /**\n   * Checks if the role has all specified permissions.\n   * @param {PermissionResolvable[]} permissions The permissions to check for\n   * @param {boolean} [explicit=false] Whether to require the role to explicitly have the exact permissions\n   * @returns {boolean}\n   */\n  hasPermissions(permissions, explicit = false) {\n    return permissions.every(p => this.hasPermission(p, explicit));\n  }\n\n  /**\n   * Compares this role's position to another role's.\n   * @param {Role} role Role to compare to this one\n   * @returns {number} Negative number if the this role's position is lower (other role's is higher),\n   * positive number if the this one is higher (other's is lower), 0 if equal\n   */\n  comparePositionTo(role) {\n    return this.constructor.comparePositions(this, role);\n  }\n\n  /**\n   * The data for a role\n   * @typedef {Object} RoleData\n   * @property {string} [name] The name of the role\n   * @property {number|string} [color] The color of the role, either a hex string or a base 10 number\n   * @property {boolean} [hoist] Whether or not the role should be hoisted\n   * @property {number} [position] The position of the role\n   * @property {string[]} [permissions] The permissions of the role\n   * @property {boolean} [mentionable] Whether or not the role should be mentionable\n   */\n\n  /**\n   * Edits the role\n   * @param {RoleData} data The new data for the role\n   * @returns {Promise<Role>}\n   * @example\n   * // edit a role\n   * role.edit({name: 'new role'})\n   *  .then(r => console.log(`Edited role ${r}`))\n   *  .catch(console.error);\n   */\n  edit(data) {\n    return this.client.rest.methods.updateGuildRole(this, data);\n  }\n\n  /**\n   * Set a new name for the role\n   * @param {string} name The new name of the role\n   * @returns {Promise<Role>}\n   * @example\n   * // set the name of the role\n   * role.setName('new role')\n   *  .then(r => console.log(`Edited name of role ${r}`))\n   *  .catch(console.error);\n   */\n  setName(name) {\n    return this.edit({ name });\n  }\n\n  /**\n   * Set a new color for the role\n   * @param {number|string} color The new color for the role, either a hex string or a base 10 number\n   * @returns {Promise<Role>}\n   * @example\n   * // set the color of a role\n   * role.setColor('#FF0000')\n   *  .then(r => console.log(`Set color of role ${r}`))\n   *  .catch(console.error);\n   */\n  setColor(color) {\n    return this.edit({ color });\n  }\n\n  /**\n   * Set whether or not the role should be hoisted\n   * @param {boolean} hoist Whether or not to hoist the role\n   * @returns {Promise<Role>}\n   * @example\n   * // set the hoist of the role\n   * role.setHoist(true)\n   *  .then(r => console.log(`Role hoisted: ${r.hoist}`))\n   *  .catch(console.error);\n   */\n  setHoist(hoist) {\n    return this.edit({ hoist });\n  }\n\n  /**\n   * Set the position of the role\n   * @param {number} position The position of the role\n   * @returns {Promise<Role>}\n   * @example\n   * // set the position of the role\n   * role.setPosition(1)\n   *  .then(r => console.log(`Role position: ${r.position}`))\n   *  .catch(console.error);\n   */\n  setPosition(position) {\n    return this.guild.setRolePosition(this, position).then(() => this);\n  }\n\n  /**\n   * Set the permissions of the role\n   * @param {string[]} permissions The permissions of the role\n   * @returns {Promise<Role>}\n   * @example\n   * // set the permissions of the role\n   * role.setPermissions(['KICK_MEMBERS', 'BAN_MEMBERS'])\n   *  .then(r => console.log(`Role updated ${r}`))\n   *  .catch(console.error);\n   */\n  setPermissions(permissions) {\n    return this.edit({ permissions });\n  }\n\n  /**\n   * Set whether this role is mentionable\n   * @param {boolean} mentionable Whether this role should be mentionable\n   * @returns {Promise<Role>}\n   * @example\n   * // make the role mentionable\n   * role.setMentionable(true)\n   *  .then(r => console.log(`Role updated ${r}`))\n   *  .catch(console.error);\n   */\n  setMentionable(mentionable) {\n    return this.edit({ mentionable });\n  }\n\n  /**\n   * Deletes the role\n   * @returns {Promise<Role>}\n   * @example\n   * // delete a role\n   * role.delete()\n   *  .then(r => console.log(`Deleted role ${r}`))\n   *  .catch(console.error);\n   */\n  delete() {\n    return this.client.rest.methods.deleteGuildRole(this);\n  }\n\n  /**\n   * Whether this role equals another role. It compares all properties, so for most operations\n   * it is advisable to just compare `role.id === role2.id` as it is much faster and is often\n   * what most users need.\n   * @param {Role} role Role to compare with\n   * @returns {boolean}\n   */\n  equals(role) {\n    return role &&\n      this.id === role.id &&\n      this.name === role.name &&\n      this.color === role.color &&\n      this.hoist === role.hoist &&\n      this.position === role.position &&\n      this.permissions === role.permissions &&\n      this.managed === role.managed;\n  }\n\n  /**\n   * When concatenated with a string, this automatically concatenates the role mention rather than the Role object.\n   * @returns {string}\n   */\n  toString() {\n    if (this.id === this.guild.id) return '@everyone';\n    return `<@&${this.id}>`;\n  }\n\n  /**\n   * Compares the positions of two roles.\n   * @param {Role} role1 First role to compare\n   * @param {Role} role2 Second role to compare\n   * @returns {number} Negative number if the first role's position is lower (second role's is higher),\n   * positive number if the first's is higher (second's is lower), 0 if equal\n   */\n  static comparePositions(role1, role2) {\n    if (role1.position === role2.position) return role2.id - role1.id;\n    return role1.position - role2.position;\n  }\n}\n\nmodule.exports = Role;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/PermissionOverwrites.js":"/**\n * Represents a permission overwrite for a role or member in a guild channel.\n */\nclass PermissionOverwrites {\n  constructor(guildChannel, data) {\n    /**\n     * The GuildChannel this overwrite is for\n     * @name PermissionOverwrites#channel\n     * @type {GuildChannel}\n     * @readonly\n     */\n    Object.defineProperty(this, 'channel', { value: guildChannel });\n\n    if (data) this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The ID of this overwrite, either a user ID or a role ID\n     * @type {string}\n     */\n    this.id = data.id;\n\n    /**\n     * The type of this overwrite\n     * @type {string}\n     */\n    this.type = data.type;\n\n    this.deny = data.deny;\n    this.allow = data.allow;\n  }\n\n  /**\n   * Delete this Permission Overwrite.\n   * @returns {Promise<PermissionOverwrites>}\n   */\n  delete() {\n    return this.channel.client.rest.methods.deletePermissionOverwrites(this);\n  }\n}\n\nmodule.exports = PermissionOverwrites;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/GuildMember.js":"const TextBasedChannel = require('./interface/TextBasedChannel');\nconst Role = require('./Role');\nconst EvaluatedPermissions = require('./EvaluatedPermissions');\nconst Constants = require('../util/Constants');\nconst Collection = require('../util/Collection');\nconst Presence = require('./Presence').Presence;\n\n/**\n * Represents a member of a guild on Discord\n * @implements {TextBasedChannel}\n */\nclass GuildMember {\n  constructor(guild, data) {\n    /**\n     * The Client that instantiated this GuildMember\n     * @name GuildMember#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: guild.client });\n\n    /**\n     * The guild that this member is part of\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    /**\n     * The user that this guild member instance Represents\n     * @type {User}\n     */\n    this.user = {};\n\n    this._roles = [];\n    if (data) this.setup(data);\n\n    /**\n     * The ID of the last message sent by the member in their guild, if one was sent.\n     * @type {?string}\n     */\n    this.lastMessageID = null;\n  }\n\n  setup(data) {\n    /**\n     * Whether this member is deafened server-wide\n     * @type {boolean}\n     */\n    this.serverDeaf = data.deaf;\n\n    /**\n     * Whether this member is muted server-wide\n     * @type {boolean}\n     */\n    this.serverMute = data.mute;\n\n    /**\n     * Whether this member is self-muted\n     * @type {boolean}\n     */\n    this.selfMute = data.self_mute;\n\n    /**\n     * Whether this member is self-deafened\n     * @type {boolean}\n     */\n    this.selfDeaf = data.self_deaf;\n\n    /**\n     * The voice session ID of this member, if any\n     * @type {?string}\n     */\n    this.voiceSessionID = data.session_id;\n\n    /**\n     * The voice channel ID of this member, if any\n     * @type {?string}\n     */\n    this.voiceChannelID = data.channel_id;\n\n    /**\n     * Whether this member is speaking\n     * @type {boolean}\n     */\n    this.speaking = false;\n\n    /**\n     * The nickname of this guild member, if they have one\n     * @type {?string}\n     */\n    this.nickname = data.nick || null;\n\n    /**\n     * The timestamp the member joined the guild at\n     * @type {number}\n     */\n    this.joinedTimestamp = new Date(data.joined_at).getTime();\n\n    this.user = data.user;\n    this._roles = data.roles;\n  }\n\n  /**\n   * The time the member joined the guild\n   * @type {Date}\n   * @readonly\n   */\n  get joinedAt() {\n    return new Date(this.joinedTimestamp);\n  }\n\n  /**\n   * The presence of this guild member\n   * @type {Presence}\n   * @readonly\n   */\n  get presence() {\n    return this.frozenPresence || this.guild.presences.get(this.id) || new Presence();\n  }\n\n  /**\n   * A list of roles that are applied to this GuildMember, mapped by the role ID.\n   * @type {Collection<string, Role>}\n   * @readonly\n   */\n  get roles() {\n    const list = new Collection();\n    const everyoneRole = this.guild.roles.get(this.guild.id);\n\n    if (everyoneRole) list.set(everyoneRole.id, everyoneRole);\n\n    for (const roleID of this._roles) {\n      const role = this.guild.roles.get(roleID);\n      if (role) list.set(role.id, role);\n    }\n\n    return list;\n  }\n\n  /**\n   * The role of the member with the highest position.\n   * @type {Role}\n   * @readonly\n   */\n  get highestRole() {\n    return this.roles.reduce((prev, role) => !prev || role.comparePositionTo(prev) > 0 ? role : prev);\n  }\n\n  /**\n   * Whether this member is muted in any way\n   * @type {boolean}\n   * @readonly\n   */\n  get mute() {\n    return this.selfMute || this.serverMute;\n  }\n\n  /**\n   * Whether this member is deafened in any way\n   * @type {boolean}\n   * @readonly\n   */\n  get deaf() {\n    return this.selfDeaf || this.serverDeaf;\n  }\n\n  /**\n   * The voice channel this member is in, if any\n   * @type {?VoiceChannel}\n   * @readonly\n   */\n  get voiceChannel() {\n    return this.guild.channels.get(this.voiceChannelID);\n  }\n\n  /**\n   * The ID of this user\n   * @type {string}\n   * @readonly\n   */\n  get id() {\n    return this.user.id;\n  }\n\n  /**\n   * The nickname of the member, or their username if they don't have one\n   * @type {string}\n   * @readonly\n   */\n  get displayName() {\n    return this.nickname || this.user.username;\n  }\n\n  /**\n   * The overall set of permissions for the guild member, taking only roles into account\n   * @type {EvaluatedPermissions}\n   * @readonly\n   */\n  get permissions() {\n    if (this.user.id === this.guild.ownerID) return new EvaluatedPermissions(this, Constants.ALL_PERMISSIONS);\n\n    let permissions = 0;\n    const roles = this.roles;\n    for (const role of roles.values()) permissions |= role.permissions;\n\n    const admin = Boolean(permissions & Constants.PermissionFlags.ADMINISTRATOR);\n    if (admin) permissions = Constants.ALL_PERMISSIONS;\n\n    return new EvaluatedPermissions(this, permissions);\n  }\n\n  /**\n   * Whether the member is kickable by the client user.\n   * @type {boolean}\n   * @readonly\n   */\n  get kickable() {\n    if (this.user.id === this.guild.ownerID) return false;\n    if (this.user.id === this.client.user.id) return false;\n    const clientMember = this.guild.member(this.client.user);\n    if (!clientMember.hasPermission(Constants.PermissionFlags.KICK_MEMBERS)) return false;\n    return clientMember.highestRole.comparePositionTo(this.highestRole) > 0;\n  }\n\n  /**\n   * Whether the member is bannable by the client user.\n   * @type {boolean}\n   * @readonly\n   */\n  get bannable() {\n    if (this.user.id === this.guild.ownerID) return false;\n    if (this.user.id === this.client.user.id) return false;\n    const clientMember = this.guild.member(this.client.user);\n    if (!clientMember.hasPermission(Constants.PermissionFlags.BAN_MEMBERS)) return false;\n    return clientMember.highestRole.comparePositionTo(this.highestRole) > 0;\n  }\n\n  /**\n   * Returns `channel.permissionsFor(guildMember)`. Returns evaluated permissions for a member in a guild channel.\n   * @param {ChannelResolvable} channel Guild channel to use as context\n   * @returns {?EvaluatedPermissions}\n   */\n  permissionsIn(channel) {\n    channel = this.client.resolver.resolveChannel(channel);\n    if (!channel || !channel.guild) throw new Error('Could not resolve channel to a guild channel.');\n    return channel.permissionsFor(this);\n  }\n\n  /**\n   * Checks if any of the member's roles have a permission.\n   * @param {PermissionResolvable} permission The permission to check for\n   * @param {boolean} [explicit=false] Whether to require the roles to explicitly have the exact permission\n   * @returns {boolean}\n   */\n  hasPermission(permission, explicit = false) {\n    if (!explicit && this.user.id === this.guild.ownerID) return true;\n    return this.roles.some(r => r.hasPermission(permission, explicit));\n  }\n\n  /**\n   * Checks whether the roles of the member allows them to perform specific actions.\n   * @param {PermissionResolvable[]} permissions The permissions to check for\n   * @param {boolean} [explicit=false] Whether to require the member to explicitly have the exact permissions\n   * @returns {boolean}\n   */\n  hasPermissions(permissions, explicit = false) {\n    if (!explicit && this.user.id === this.guild.ownerID) return true;\n    return permissions.every(p => this.hasPermission(p, explicit));\n  }\n\n  /**\n   * Checks whether the roles of the member allows them to perform specific actions, and lists any missing permissions.\n   * @param {PermissionResolvable[]} permissions The permissions to check for\n   * @param {boolean} [explicit=false] Whether to require the member to explicitly have the exact permissions\n   * @returns {PermissionResolvable[]}\n   */\n  missingPermissions(permissions, explicit = false) {\n    return permissions.filter(p => !this.hasPermission(p, explicit));\n  }\n\n  /**\n   * Edit a guild member\n   * @param {GuildmemberEditData} data The data to edit the member with\n   * @returns {Promise<GuildMember>}\n   */\n  edit(data) {\n    return this.client.rest.methods.updateGuildMember(this, data);\n  }\n\n  /**\n   * Mute/unmute a user\n   * @param {boolean} mute Whether or not the member should be muted\n   * @returns {Promise<GuildMember>}\n   */\n  setMute(mute) {\n    return this.edit({ mute });\n  }\n\n  /**\n   * Deafen/undeafen a user\n   * @param {boolean} deaf Whether or not the member should be deafened\n   * @returns {Promise<GuildMember>}\n   */\n  setDeaf(deaf) {\n    return this.edit({ deaf });\n  }\n\n  /**\n   * Moves the guild member to the given channel.\n   * @param {ChannelResolvable} channel The channel to move the member to\n   * @returns {Promise<GuildMember>}\n   */\n  setVoiceChannel(channel) {\n    return this.edit({ channel });\n  }\n\n  /**\n   * Sets the roles applied to the member.\n   * @param {Collection<string, Role>|Role[]|string[]} roles The roles or role IDs to apply\n   * @returns {Promise<GuildMember>}\n   */\n  setRoles(roles) {\n    return this.edit({ roles });\n  }\n\n  /**\n   * Adds a single role to the member.\n   * @param {Role|string} role The role or ID of the role to add\n   * @returns {Promise<GuildMember>}\n   */\n  addRole(role) {\n    if (!(role instanceof Role)) role = this.guild.roles.get(role);\n    return this.client.rest.methods.addMemberRole(this, role);\n  }\n\n  /**\n   * Adds multiple roles to the member.\n   * @param {Collection<string, Role>|Role[]|string[]} roles The roles or role IDs to add\n   * @returns {Promise<GuildMember>}\n   */\n  addRoles(roles) {\n    let allRoles;\n    if (roles instanceof Collection) {\n      allRoles = this._roles.slice();\n      for (const role of roles.values()) allRoles.push(role.id);\n    } else {\n      allRoles = this._roles.concat(roles);\n    }\n    return this.edit({ roles: allRoles });\n  }\n\n  /**\n   * Removes a single role from the member.\n   * @param {Role|string} role The role or ID of the role to remove\n   * @returns {Promise<GuildMember>}\n   */\n  removeRole(role) {\n    if (!(role instanceof Role)) role = this.guild.roles.get(role);\n    return this.client.rest.methods.removeMemberRole(this, role);\n  }\n\n  /**\n   * Removes multiple roles from the member.\n   * @param {Collection<string, Role>|Role[]|string[]} roles The roles or role IDs to remove\n   * @returns {Promise<GuildMember>}\n   */\n  removeRoles(roles) {\n    const allRoles = this._roles.slice();\n    if (roles instanceof Collection) {\n      for (const role of roles.values()) {\n        const index = allRoles.indexOf(role.id);\n        if (index >= 0) allRoles.splice(index, 1);\n      }\n    } else {\n      for (const role of roles) {\n        const index = allRoles.indexOf(role instanceof Role ? role.id : role);\n        if (index >= 0) allRoles.splice(index, 1);\n      }\n    }\n    return this.edit({ roles: allRoles });\n  }\n\n  /**\n   * Set the nickname for the guild member\n   * @param {string} nick The nickname for the guild member\n   * @returns {Promise<GuildMember>}\n   */\n  setNickname(nick) {\n    return this.edit({ nick });\n  }\n\n  /**\n   * Deletes any DMs with this guild member\n   * @returns {Promise<DMChannel>}\n   */\n  deleteDM() {\n    return this.client.rest.methods.deleteChannel(this);\n  }\n\n  /**\n   * Kick this member from the guild\n   * @returns {Promise<GuildMember>}\n   */\n  kick() {\n    return this.client.rest.methods.kickGuildMember(this.guild, this);\n  }\n\n  /**\n   * Ban this guild member\n   * @param {number} [deleteDays=0] The amount of days worth of messages from this member that should\n   * also be deleted. Between `0` and `7`.\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // ban a guild member\n   * guildMember.ban(7);\n   */\n  ban(deleteDays = 0) {\n    return this.client.rest.methods.banGuildMember(this.guild, this, deleteDays);\n  }\n\n  /**\n   * When concatenated with a string, this automatically concatenates the user's mention instead of the Member object.\n   * @returns {string}\n   * @example\n   * // logs: Hello from <@123456789>!\n   * console.log(`Hello from ${member}!`);\n   */\n  toString() {\n    return `<@${this.nickname ? '!' : ''}${this.user.id}>`;\n  }\n\n  // These are here only for documentation purposes - they are implemented by TextBasedChannel\n  send() { return; }\n  sendMessage() { return; }\n  sendEmbed() { return; }\n  sendFile() { return; }\n  sendCode() { return; }\n}\n\nTextBasedChannel.applyToClass(GuildMember);\n\nmodule.exports = GuildMember;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/Invite.js":"const PartialGuild = require('./PartialGuild');\nconst PartialGuildChannel = require('./PartialGuildChannel');\nconst Constants = require('../util/Constants');\n\n/*\n{ max_age: 86400,\n  code: 'CG9A5',\n  guild:\n   { splash: null,\n     id: '123123123',\n     icon: '123123123',\n     name: 'name' },\n  created_at: '2016-08-28T19:07:04.763368+00:00',\n  temporary: false,\n  uses: 0,\n  max_uses: 0,\n  inviter:\n   { username: '123',\n     discriminator: '4204',\n     bot: true,\n     id: '123123123',\n     avatar: '123123123' },\n  channel: { type: 0, id: '123123', name: 'heavy-testing' } }\n*/\n\n/**\n * Represents an invitation to a guild channel.\n * <warn>The only guaranteed properties are `code`, `guild` and `channel`. Other properties can be missing.</warn>\n */\nclass Invite {\n  constructor(client, data) {\n    /**\n     * The client that instantiated the invite\n     * @name Invite#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The guild the invite is for. If this guild is already known, this will be a Guild object. If the guild is\n     * unknown, this will be a PartialGuild object.\n     * @type {Guild|PartialGuild}\n     */\n    this.guild = this.client.guilds.get(data.guild.id) || new PartialGuild(this.client, data.guild);\n\n    /**\n     * The code for this invite\n     * @type {string}\n     */\n    this.code = data.code;\n\n    /**\n     * Whether or not this invite is temporary\n     * @type {boolean}\n     */\n    this.temporary = data.temporary;\n\n    /**\n     * The maximum age of the invite, in seconds\n     * @type {?number}\n     */\n    this.maxAge = data.max_age;\n\n    /**\n     * How many times this invite has been used\n     * @type {number}\n     */\n    this.uses = data.uses;\n\n    /**\n     * The maximum uses of this invite\n     * @type {number}\n     */\n    this.maxUses = data.max_uses;\n\n    if (data.inviter) {\n      /**\n       * The user who created this invite\n       * @type {User}\n       */\n      this.inviter = this.client.dataManager.newUser(data.inviter);\n    }\n\n    /**\n     * The channel the invite is for. If this channel is already known, this will be a GuildChannel object.\n     * If the channel is unknown, this will be a PartialGuildChannel object.\n     * @type {GuildChannel|PartialGuildChannel}\n     */\n    this.channel = this.client.channels.get(data.channel.id) || new PartialGuildChannel(this.client, data.channel);\n\n    /**\n     * The timestamp the invite was created at\n     * @type {number}\n     */\n    this.createdTimestamp = new Date(data.created_at).getTime();\n  }\n\n  /**\n   * The time the invite was created\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The timestamp the invite will expire at\n   * @type {number}\n   * @readonly\n   */\n  get expiresTimestamp() {\n    return this.createdTimestamp + (this.maxAge * 1000);\n  }\n\n  /**\n   * The time the invite will expire\n   * @type {Date}\n   * @readonly\n   */\n  get expiresAt() {\n    return new Date(this.expiresTimestamp);\n  }\n\n  /**\n   * The URL to the invite\n   * @type {string}\n   * @readonly\n   */\n  get url() {\n    return Constants.Endpoints.inviteLink(this.code);\n  }\n\n  /**\n   * Deletes this invite\n   * @returns {Promise<Invite>}\n   */\n  delete() {\n    return this.client.rest.methods.deleteInvite(this);\n  }\n\n  /**\n   * When concatenated with a string, this automatically concatenates the invite's URL instead of the object.\n   * @returns {string}\n   * @example\n   * // logs: Invite: https://discord.gg/A1b2C3\n   * console.log(`Invite: ${invite}`);\n   */\n  toString() {\n    return this.url;\n  }\n}\n\nmodule.exports = Invite;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/PartialGuild.js":"/*\n{ splash: null,\n     id: '123123123',\n     icon: '123123123',\n     name: 'name' }\n*/\n\n/**\n * Represents a guild that the client only has limited information for - e.g. from invites.\n */\nclass PartialGuild {\n  constructor(client, data) {\n    /**\n     * The Client that instantiated this PartialGuild\n     * @name PartialGuild#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The ID of this guild\n     * @type {string}\n     */\n    this.id = data.id;\n\n    /**\n     * The name of this guild\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The hash of this guild's icon, or null if there is none.\n     * @type {?string}\n     */\n    this.icon = data.icon;\n\n    /**\n     * The hash of the guild splash image, or null if no splash (VIP only)\n     * @type {?string}\n     */\n    this.splash = data.splash;\n  }\n}\n\nmodule.exports = PartialGuild;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/PartialGuildChannel.js":"const Constants = require('../util/Constants');\n\n/*\n{ type: 0, id: '123123', name: 'heavy-testing' } }\n*/\n\n/**\n * Represents a guild channel that the client only has limited information for - e.g. from invites.\n */\nclass PartialGuildChannel {\n  constructor(client, data) {\n    /**\n     * The Client that instantiated this PartialGuildChannel\n     * @name PartialGuildChannel#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The ID of this guild channel\n     * @type {string}\n     */\n    this.id = data.id;\n\n    /**\n     * The name of this guild channel\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The type of this guild channel - `text` or `voice`\n     * @type {string}\n     */\n    this.type = Constants.ChannelTypes.text === data.type ? 'text' : 'voice';\n  }\n}\n\nmodule.exports = PartialGuildChannel;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/MessageCollector.js":"const EventEmitter = require('events').EventEmitter;\nconst Collection = require('../util/Collection');\n\n/**\n * Collects messages based on a specified filter, then emits them.\n * @extends {EventEmitter}\n */\nclass MessageCollector extends EventEmitter {\n  /**\n   * A function that takes a Message object and a MessageCollector and returns a boolean.\n   * ```js\n   * function(message, collector) {\n   *  if (message.content.includes('discord')) {\n   *    return true; // passed the filter test\n   *  }\n   *  return false; // failed the filter test\n   * }\n   * ```\n   * @typedef {Function} CollectorFilterFunction\n   */\n\n  /**\n   * An object containing options used to configure a MessageCollector. All properties are optional.\n   * @typedef {Object} CollectorOptions\n   * @property {number} [time] Duration for the collector in milliseconds\n   * @property {number} [max] Maximum number of messages to handle\n   * @property {number} [maxMatches] Maximum number of successfully filtered messages to obtain\n   */\n\n  /**\n   * @param {Channel} channel The channel to collect messages in\n   * @param {CollectorFilterFunction} filter The filter function\n   * @param {CollectorOptions} [options] Options for the collector\n   */\n  constructor(channel, filter, options = {}) {\n    super();\n\n    /**\n     * The channel this collector is operating on\n     * @type {Channel}\n     */\n    this.channel = channel;\n\n    /**\n     * A function used to filter messages that the collector collects.\n     * @type {CollectorFilterFunction}\n     */\n    this.filter = filter;\n\n    /**\n     * Options for the collecor.\n     * @type {CollectorOptions}\n     */\n    this.options = options;\n\n    /**\n     * Whether this collector has stopped collecting messages.\n     * @type {boolean}\n     */\n    this.ended = false;\n\n    /**\n     * A collection of collected messages, mapped by message ID.\n     * @type {Collection<string, Message>}\n     */\n    this.collected = new Collection();\n\n    this.listener = message => this.verify(message);\n    this.channel.client.on('message', this.listener);\n    if (options.time) this.channel.client.setTimeout(() => this.stop('time'), options.time);\n  }\n\n  /**\n   * Verifies a message against the filter and options\n   * @private\n   * @param {Message} message The message\n   * @returns {boolean}\n   */\n  verify(message) {\n    if (this.channel ? this.channel.id !== message.channel.id : false) return false;\n    if (this.filter(message, this)) {\n      this.collected.set(message.id, message);\n      /**\n       * Emitted whenever the collector receives a message that passes the filter test.\n       * @param {Message} message The received message\n       * @param {MessageCollector} collector The collector the message passed through\n       * @event MessageCollector#message\n       */\n      this.emit('message', message, this);\n      if (this.collected.size >= this.options.maxMatches) this.stop('matchesLimit');\n      else if (this.options.max && this.collected.size === this.options.max) this.stop('limit');\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Returns a promise that resolves when a valid message is sent. Rejects\n   * with collected messages if the Collector ends before receiving a message.\n   * @type {Promise<Message>}\n   * @readonly\n   */\n  get next() {\n    return new Promise((resolve, reject) => {\n      if (this.ended) {\n        reject(this.collected);\n        return;\n      }\n\n      const cleanup = () => {\n        this.removeListener('message', onMessage);\n        this.removeListener('end', onEnd);\n      };\n\n      const onMessage = (...args) => {\n        cleanup();\n        resolve(...args);\n      };\n\n      const onEnd = (...args) => {\n        cleanup();\n        reject(...args);\n      };\n\n      this.once('message', onMessage);\n      this.once('end', onEnd);\n    });\n  }\n\n  /**\n   * Stops the collector and emits `end`.\n   * @param {string} [reason='user'] An optional reason for stopping the collector\n   */\n  stop(reason = 'user') {\n    if (this.ended) return;\n    this.ended = true;\n    this.channel.client.removeListener('message', this.listener);\n    /**\n     * Emitted when the Collector stops collecting.\n     * @param {Collection<string, Message>} collection A collection of messages collected\n     * during the lifetime of the collector, mapped by the ID of the messages.\n     * @param {string} reason The reason for the end of the collector. If it ended because it reached the specified time\n     * limit, this would be `time`. If you invoke `.stop()` without specifying a reason, this would be `user`. If it\n     * ended because it reached its message limit, it will be `limit`.\n     * @event MessageCollector#end\n     */\n    this.emit('end', this.collected, reason);\n  }\n}\n\nmodule.exports = MessageCollector;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/OAuth2Application.js":"/**\n * Represents an OAuth2 Application\n */\nclass OAuth2Application {\n  constructor(client, data) {\n    /**\n     * The client that instantiated the application\n     * @name OAuth2Application#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The ID of the app\n     * @type {string}\n     */\n    this.id = data.id;\n\n    /**\n     * The name of the app\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The app's description\n     * @type {string}\n     */\n    this.description = data.description;\n\n    /**\n     * The app's icon hash\n     * @type {string}\n     */\n    this.icon = data.icon;\n\n    /**\n     * The app's icon URL\n     * @type {string}\n     */\n    this.iconURL = `https://cdn.discordapp.com/app-icons/${this.id}/${this.icon}.jpg`;\n\n    /**\n     * The app's RPC origins\n     * @type {Array<string>}\n     */\n    this.rpcOrigins = data.rpc_origins;\n  }\n\n  /**\n   * The timestamp the app was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return (this.id / 4194304) + 1420070400000;\n  }\n\n  /**\n   * The time the app was created\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * When concatenated with a string, this automatically concatenates the app name rather than the app object.\n   * @returns {string}\n   */\n  toString() {\n    return this.name;\n  }\n}\n\nmodule.exports = OAuth2Application;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/Presence.js":"/**\n * Represents a user's presence\n */\nclass Presence {\n  constructor(data = {}) {\n    /**\n     * The status of the presence:\n     *\n     * * **`online`** - user is online\n     * * **`offline`** - user is offline or invisible\n     * * **`idle`** - user is AFK\n     * * **`dnd`** - user is in Do not Disturb\n     * @type {string}\n     */\n    this.status = data.status || 'offline';\n\n    /**\n     * The game that the user is playing, `null` if they aren't playing a game.\n     * @type {?Game}\n     */\n    this.game = data.game ? new Game(data.game) : null;\n  }\n\n  update(data) {\n    this.status = data.status || this.status;\n    this.game = data.game ? new Game(data.game) : null;\n  }\n\n  /**\n   * Whether this presence is equal to another\n   * @param {Presence} presence Presence to compare with\n   * @returns {boolean}\n   */\n  equals(presence) {\n    return this === presence || (\n      presence &&\n      this.status === presence.status &&\n      this.game ? this.game.equals(presence.game) : !presence.game\n    );\n  }\n}\n\n/**\n * Represents a game that is part of a user's presence.\n */\nclass Game {\n  constructor(data) {\n    /**\n     * The name of the game being played\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The type of the game status\n     * @type {number}\n     */\n    this.type = data.type;\n\n    /**\n     * If the game is being streamed, a link to the stream\n     * @type {?string}\n     */\n    this.url = data.url || null;\n  }\n\n  /**\n   * Whether or not the game is being streamed\n   * @type {boolean}\n   * @readonly\n   */\n  get streaming() {\n    return this.type === 1;\n  }\n\n  /**\n   * Whether this game is equal to another game\n   * @param {Game} game Game to compare with\n   * @returns {boolean}\n   */\n  equals(game) {\n    return this === game || (\n      game &&\n      this.name === game.name &&\n      this.type === game.type &&\n      this.url === game.url\n    );\n  }\n}\n\nexports.Presence = Presence;\nexports.Game = Game;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/RichEmbed.js":"/**\n * A rich embed to be sent with a message\n * @param {Object} [data] Data to set in the rich embed\n */\nclass RichEmbed {\n  constructor(data = {}) {\n    /**\n     * Title for this Embed\n     * @type {string}\n     */\n    this.title = data.title;\n\n    /**\n     * Description for this Embed\n     * @type {string}\n     */\n    this.description = data.description;\n\n    /**\n     * URL for this Embed\n     * @type {string}\n     */\n    this.url = data.url;\n\n    /**\n     * Color for this Embed\n     * @type {number}\n     */\n    this.color = data.color;\n\n    /**\n     * Author for this Embed\n     * @type {Object}\n     */\n    this.author = data.author;\n\n    /**\n     * Timestamp for this Embed\n     * @type {Date}\n     */\n    this.timestamp = data.timestamp;\n\n    /**\n     * Fields for this Embed\n     * @type {Object[]}\n     */\n    this.fields = data.fields || [];\n\n    /**\n     * Thumbnail for this Embed\n     * @type {Object}\n     */\n    this.thumbnail = data.thumbnail;\n\n    /**\n     * Image for this Embed\n     * @type {Object}\n     */\n    this.image = data.image;\n\n    /**\n     * Footer for this Embed\n     * @type {Object}\n     */\n    this.footer = data.footer;\n  }\n\n  /**\n   * Sets the title of this embed\n   * @param {StringResolvable} title The title\n   * @returns {RichEmbed} This embed\n   */\n  setTitle(title) {\n    title = resolveString(title);\n    if (title.length > 256) throw new RangeError('RichEmbed titles may not exceed 256 characters.');\n    this.title = title;\n    return this;\n  }\n\n  /**\n   * Sets the description of this embed\n   * @param {StringResolvable} description The description\n   * @returns {RichEmbed} This embed\n   */\n  setDescription(description) {\n    description = resolveString(description);\n    if (description.length > 2048) throw new RangeError('RichEmbed descriptions may not exceed 2048 characters.');\n    this.description = description;\n    return this;\n  }\n\n  /**\n   * Sets the URL of this embed\n   * @param {string} url The URL\n   * @returns {RichEmbed} This embed\n   */\n  setURL(url) {\n    this.url = url;\n    return this;\n  }\n\n  /**\n   * Sets the color of this embed\n   * @param {string|number|number[]} color The color to set\n   * @returns {RichEmbed} This embed\n   */\n  setColor(color) {\n    let radix = 10;\n    if (color instanceof Array) {\n      color = (color[0] << 16) + (color[1] << 8) + color[2];\n    } else if (typeof color === 'string' && color.startsWith('#')) {\n      radix = 16;\n      color = color.replace('#', '');\n    }\n    color = parseInt(color, radix);\n    if (color < 0 || color > 0xFFFFFF) {\n      throw new RangeError('RichEmbed color must be within the range 0 - 16777215 (0xFFFFFF).');\n    } else if (color && isNaN(color)) {\n      throw new TypeError('Unable to convert RichEmbed color to a number.');\n    }\n    this.color = color;\n    return this;\n  }\n\n  /**\n   * Sets the author of this embed\n   * @param {StringResolvable} name The name of the author\n   * @param {string} [icon] The icon URL of the author\n   * @param {string} [url] The URL of the author\n   * @returns {RichEmbed} This embed\n   */\n  setAuthor(name, icon, url) {\n    this.author = { name: resolveString(name), icon_url: icon, url };\n    return this;\n  }\n\n  /**\n   * Sets the timestamp of this embed\n   * @param {Date} [timestamp=current date] The timestamp\n   * @returns {RichEmbed} This embed\n   */\n  setTimestamp(timestamp = new Date()) {\n    this.timestamp = timestamp;\n    return this;\n  }\n\n  /**\n   * Adds a field to the embed (max 25)\n   * @param {StringResolvable} name The name of the field\n   * @param {StringResolvable} value The value of the field\n   * @param {boolean} [inline=false] Set the field to display inline\n   * @returns {RichEmbed} This embed\n   */\n  addField(name, value, inline = false) {\n    if (this.fields.length >= 25) throw new RangeError('RichEmbeds may not exceed 25 fields.');\n    name = resolveString(name);\n    if (name.length > 256) throw new RangeError('RichEmbed field names may not exceed 256 characters.');\n    value = resolveString(value);\n    if (value.length > 1024) throw new RangeError('RichEmbed field values may not exceed 1024 characters.');\n    this.fields.push({ name: String(name), value: value, inline });\n    return this;\n  }\n\n  /**\n   * Set the thumbnail of this embed\n   * @param {string} url The URL of the thumbnail\n   * @returns {RichEmbed} This embed\n   */\n  setThumbnail(url) {\n    this.thumbnail = { url };\n    return this;\n  }\n\n  /**\n   * Set the image of this embed\n   * @param {string} url The URL of the thumbnail\n   * @returns {RichEmbed} This embed\n   */\n  setImage(url) {\n    this.image = { url };\n    return this;\n  }\n\n  /**\n   * Sets the footer of this embed\n   * @param {StringResolvable} text The text of the footer\n   * @param {string} [icon] The icon URL of the footer\n   * @returns {RichEmbed} This embed\n   */\n  setFooter(text, icon) {\n    text = resolveString(text);\n    if (text.length > 2048) throw new RangeError('RichEmbed footer text may not exceed 2048 characters.');\n    this.footer = { text, icon_url: icon };\n    return this;\n  }\n}\n\nmodule.exports = RichEmbed;\n\nfunction resolveString(data) {\n  if (typeof data === 'string') return data;\n  if (data instanceof Array) return data.join('\\n');\n  return String(data);\n}\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/TextChannel.js":"const GuildChannel = require('./GuildChannel');\nconst TextBasedChannel = require('./interface/TextBasedChannel');\nconst Collection = require('../util/Collection');\n\n/**\n * Represents a guild text channel on Discord.\n * @extends {GuildChannel}\n * @implements {TextBasedChannel}\n */\nclass TextChannel extends GuildChannel {\n  constructor(guild, data) {\n    super(guild, data);\n    this.type = 'text';\n    this.messages = new Collection();\n    this._typing = new Map();\n  }\n\n  setup(data) {\n    super.setup(data);\n\n    /**\n     * The topic of the text channel, if there is one.\n     * @type {?string}\n     */\n    this.topic = data.topic;\n\n    this.lastMessageID = data.last_message_id;\n  }\n\n  /**\n   * A collection of members that can see this channel, mapped by their ID.\n   * @type {Collection<string, GuildMember>}\n   * @readonly\n   */\n  get members() {\n    const members = new Collection();\n    for (const member of this.guild.members.values()) {\n      if (this.permissionsFor(member).hasPermission('READ_MESSAGES')) {\n        members.set(member.id, member);\n      }\n    }\n    return members;\n  }\n\n  /**\n   * Fetch all webhooks for the channel.\n   * @returns {Promise<Collection<string, Webhook>>}\n   */\n  fetchWebhooks() {\n    return this.client.rest.methods.getChannelWebhooks(this);\n  }\n\n  /**\n   * Create a webhook for the channel.\n   * @param {string} name The name of the webhook.\n   * @param {BufferResolvable} avatar The avatar for the webhook.\n   * @returns {Promise<Webhook>} webhook The created webhook.\n   * @example\n   * channel.createWebhook('Snek', 'http://snek.s3.amazonaws.com/topSnek.png')\n   *  .then(webhook => console.log(`Created Webhook ${webhook}`))\n   *  .catch(console.error)\n   */\n  createWebhook(name, avatar) {\n    return new Promise(resolve => {\n      if (avatar.startsWith('data:')) {\n        resolve(this.client.rest.methods.createWebhook(this, name, avatar));\n      } else {\n        this.client.resolver.resolveBuffer(avatar).then(data =>\n           resolve(this.client.rest.methods.createWebhook(this, name, data))\n        );\n      }\n    });\n  }\n\n  // These are here only for documentation purposes - they are implemented by TextBasedChannel\n  send() { return; }\n  sendMessage() { return; }\n  sendEmbed() { return; }\n  sendFile() { return; }\n  sendCode() { return; }\n  fetchMessage() { return; }\n  fetchMessages() { return; }\n  fetchPinnedMessages() { return; }\n  startTyping() { return; }\n  stopTyping() { return; }\n  get typing() { return; }\n  get typingCount() { return; }\n  createCollector() { return; }\n  awaitMessages() { return; }\n  bulkDelete() { return; }\n  _cacheMessage() { return; }\n}\n\nTextBasedChannel.applyToClass(TextChannel, true);\n\nmodule.exports = TextChannel;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/UserConnection.js":"/**\n * Represents a user connection (or \"platform identity\")\n */\nclass UserConnection {\n  constructor(user, data) {\n    /**\n     * The user that owns the Connection\n     * @type {User}\n     */\n    this.user = user;\n\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The type of the Connection\n     * @type {string}\n     */\n    this.type = data.type;\n\n    /**\n     * The username of the connection account\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The id of the connection account\n     * @type {string}\n     */\n    this.id = data.id;\n\n    /**\n     * Whether the connection is revoked\n     * @type {boolean}\n     */\n    this.revoked = data.revoked;\n\n    /**\n     * an array of partial server integrations (not yet implemented in this lib)\n     * @type {Object[]}\n     */\n    this.integrations = data.integrations;\n  }\n}\n\nmodule.exports = UserConnection;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/UserProfile.js":"const Collection = require('../util/Collection');\nconst UserConnection = require('./UserConnection');\n\n/**\n * Represents a user's profile on Discord.\n */\nclass UserProfile {\n  constructor(user, data) {\n    /**\n     * The owner of the profile\n     * @type {User}\n     */\n    this.user = user;\n\n    /**\n     * The Client that created the instance of the the UserProfile.\n     * @name UserProfile#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: user.client });\n\n    /**\n     * Guilds that the client user and the user share\n     * @type {Collection<Guild>}\n     */\n    this.mutualGuilds = new Collection();\n\n    /**\n     * The user's connections\n     * @type {Collection<UserConnection>}\n     */\n    this.connections = new Collection();\n\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * If the user has Discord Premium\n     * @type {boolean}\n     */\n    this.premium = data.premium;\n\n    for (const guild of data.mutual_guilds) {\n      if (this.client.guilds.has(guild.id)) {\n        this.mutualGuilds.set(guild.id, this.client.guilds.get(guild.id));\n      }\n    }\n    for (const connection of data.connected_accounts) {\n      this.connections.set(connection.id, new UserConnection(this.user, connection));\n    }\n  }\n}\n\nmodule.exports = UserProfile;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/structures/VoiceChannel.js":"const GuildChannel = require('./GuildChannel');\nconst Collection = require('../util/Collection');\n\n/**\n * Represents a guild voice channel on Discord.\n * @extends {GuildChannel}\n */\nclass VoiceChannel extends GuildChannel {\n  constructor(guild, data) {\n    super(guild, data);\n\n    /**\n     * The members in this voice channel.\n     * @type {Collection<string, GuildMember>}\n     */\n    this.members = new Collection();\n\n    this.type = 'voice';\n  }\n\n  setup(data) {\n    super.setup(data);\n\n    /**\n     * The bitrate of this voice channel\n     * @type {number}\n     */\n    this.bitrate = data.bitrate;\n\n    /**\n     * The maximum amount of users allowed in this channel - 0 means unlimited.\n     * @type {number}\n     */\n    this.userLimit = data.user_limit;\n  }\n\n  /**\n   * The voice connection for this voice channel, if the client is connected\n   * @type {?VoiceConnection}\n   * @readonly\n   */\n  get connection() {\n    const connection = this.guild.voiceConnection;\n    if (connection && connection.channel.id === this.id) return connection;\n    return null;\n  }\n\n  /**\n   * Checks if the client has permission join the voice channel\n   * @type {boolean}\n   */\n  get joinable() {\n    if (this.client.browser) return false;\n    return this.permissionsFor(this.client.user).hasPermission('CONNECT');\n  }\n\n  /**\n   * Checks if the client has permission to send audio to the voice channel\n   * @type {boolean}\n   */\n  get speakable() {\n    return this.permissionsFor(this.client.user).hasPermission('SPEAK');\n  }\n\n  /**\n   * Sets the bitrate of the channel\n   * @param {number} bitrate The new bitrate\n   * @returns {Promise<VoiceChannel>}\n   * @example\n   * // set the bitrate of a voice channel\n   * voiceChannel.setBitrate(48000)\n   *  .then(vc => console.log(`Set bitrate to ${vc.bitrate} for ${vc.name}`))\n   *  .catch(console.error);\n   */\n  setBitrate(bitrate) {\n    return this.edit({ bitrate });\n  }\n\n  /**\n   * Sets the user limit of the channel\n   * @param {number} userLimit The new user limit\n   * @returns {Promise<VoiceChannel>}\n   * @example\n   * // set the user limit of a voice channel\n   * voiceChannel.setUserLimit(42)\n   *  .then(vc => console.log(`Set user limit to ${vc.userLimit} for ${vc.name}`))\n   *  .catch(console.error);\n   */\n  setUserLimit(userLimit) {\n    return this.edit({ userLimit });\n  }\n\n  /**\n   * Attempts to join this voice channel\n   * @returns {Promise<VoiceConnection>}\n   * @example\n   * // join a voice channel\n   * voiceChannel.join()\n   *  .then(connection => console.log('Connected!'))\n   *  .catch(console.error);\n   */\n  join() {\n    if (this.client.browser) return Promise.reject(new Error('Voice connections are not available in browsers.'));\n    return this.client.voice.joinChannel(this);\n  }\n\n  /**\n   * Leaves this voice channel\n   * @example\n   * // leave a voice channel\n   * voiceChannel.leave();\n   */\n  leave() {\n    if (this.client.browser) return;\n    const connection = this.client.voice.connections.get(this.guild.id);\n    if (connection && connection.channel.id === this.id) connection.disconnect();\n  }\n}\n\nmodule.exports = VoiceChannel;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/util/ArraysEqual.js":"module.exports = function arraysEqual(a, b) {\n  if (a === b) return true;\n  if (a.length !== b.length) return false;\n\n  for (const itemInd in a) {\n    const item = a[itemInd];\n    const ind = b.indexOf(item);\n    if (ind) {\n      b.splice(ind, 1);\n    }\n  }\n\n  return b.length === 0;\n};\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/util/ParseEmoji.js":"module.exports = function parseEmoji(text) {\n  if (text.includes('%')) {\n    text = decodeURIComponent(text);\n  }\n  if (text.includes(':')) {\n    const [name, id] = text.split(':');\n    return { name, id };\n  } else {\n    return {\n      name: text,\n      id: null,\n    };\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/actions/Action.js":"/*\n\nABOUT ACTIONS\n\nActions are similar to WebSocket Packet Handlers, but since introducing\nthe REST API methods, in order to prevent rewriting code to handle data,\n\"actions\" have been introduced. They're basically what Packet Handlers\nused to be but they're strictly for manipulating data and making sure\nthat WebSocket events don't clash with REST methods.\n\n*/\n\nclass GenericAction {\n  constructor(client) {\n    this.client = client;\n  }\n\n  handle(data) {\n    return data;\n  }\n}\n\nmodule.exports = GenericAction;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/actions/ActionsManager.js":"class ActionsManager {\n  constructor(client) {\n    this.client = client;\n\n    this.register(require('./MessageCreate'));\n    this.register(require('./MessageDelete'));\n    this.register(require('./MessageDeleteBulk'));\n    this.register(require('./MessageUpdate'));\n    this.register(require('./MessageReactionAdd'));\n    this.register(require('./MessageReactionRemove'));\n    this.register(require('./MessageReactionRemoveAll'));\n    this.register(require('./ChannelCreate'));\n    this.register(require('./ChannelDelete'));\n    this.register(require('./ChannelUpdate'));\n    this.register(require('./GuildDelete'));\n    this.register(require('./GuildUpdate'));\n    this.register(require('./GuildMemberGet'));\n    this.register(require('./GuildMemberRemove'));\n    this.register(require('./GuildBanRemove'));\n    this.register(require('./GuildRoleCreate'));\n    this.register(require('./GuildRoleDelete'));\n    this.register(require('./GuildRoleUpdate'));\n    this.register(require('./UserGet'));\n    this.register(require('./UserUpdate'));\n    this.register(require('./UserNoteUpdate'));\n    this.register(require('./GuildSync'));\n    this.register(require('./GuildEmojiCreate'));\n    this.register(require('./GuildEmojiDelete'));\n    this.register(require('./GuildEmojiUpdate'));\n    this.register(require('./GuildRolesPositionUpdate'));\n  }\n\n  register(Action) {\n    this[Action.name.replace(/Action$/, '')] = new Action(this.client);\n  }\n}\n\nmodule.exports = ActionsManager;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/actions/ChannelCreate.js":"const Action = require('./Action');\n\nclass ChannelCreateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const channel = client.dataManager.newChannel(data);\n    return {\n      channel,\n    };\n  }\n}\n\nmodule.exports = ChannelCreateAction;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/actions/ChannelDelete.js":"const Action = require('./Action');\n\nclass ChannelDeleteAction extends Action {\n  constructor(client) {\n    super(client);\n    this.deleted = new Map();\n  }\n\n  handle(data) {\n    const client = this.client;\n\n    let channel = client.channels.get(data.id);\n    if (channel) {\n      client.dataManager.killChannel(channel);\n      this.deleted.set(channel.id, channel);\n      this.scheduleForDeletion(channel.id);\n    } else {\n      channel = this.deleted.get(data.id) || null;\n    }\n\n    return {\n      channel,\n    };\n  }\n\n  scheduleForDeletion(id) {\n    this.client.setTimeout(() => this.deleted.delete(id), this.client.options.restWsBridgeTimeout);\n  }\n}\n\nmodule.exports = ChannelDeleteAction;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/actions/ChannelUpdate.js":"const Action = require('./Action');\nconst Constants = require('../../util/Constants');\nconst cloneObject = require('../../util/CloneObject');\n\nclass ChannelUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n\n    const channel = client.channels.get(data.id);\n    if (channel) {\n      const oldChannel = cloneObject(channel);\n      channel.setup(data);\n      client.emit(Constants.Events.CHANNEL_UPDATE, oldChannel, channel);\n      return {\n        old: oldChannel,\n        updated: channel,\n      };\n    }\n\n    return {\n      old: null,\n      updated: null,\n    };\n  }\n}\n\n/**\n * Emitted whenever a channel is updated - e.g. name change, topic change.\n * @event Client#channelUpdate\n * @param {Channel} oldChannel The channel before the update\n * @param {Channel} newChannel The channel after the update\n */\n\nmodule.exports = ChannelUpdateAction;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/actions/GuildBanRemove.js":"const Action = require('./Action');\nconst Constants = require('../../util/Constants');\n\nclass GuildBanRemove extends Action {\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.get(data.guild_id);\n    const user = client.dataManager.newUser(data.user);\n    if (guild && user) client.emit(Constants.Events.GUILD_BAN_REMOVE, guild, user);\n  }\n}\n\nmodule.exports = GuildBanRemove;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/actions/GuildDelete.js":"const Action = require('./Action');\nconst Constants = require('../../util/Constants');\n\nclass GuildDeleteAction extends Action {\n  constructor(client) {\n    super(client);\n    this.deleted = new Map();\n  }\n\n  handle(data) {\n    const client = this.client;\n\n    let guild = client.guilds.get(data.id);\n    if (guild) {\n      if (guild.available && data.unavailable) {\n        // guild is unavailable\n        guild.available = false;\n        client.emit(Constants.Events.GUILD_UNAVAILABLE, guild);\n\n        // stops the GuildDelete packet thinking a guild was actually deleted,\n        // handles emitting of event itself\n        return {\n          guild: null,\n        };\n      }\n\n      // delete guild\n      client.guilds.delete(guild.id);\n      this.deleted.set(guild.id, guild);\n      this.scheduleForDeletion(guild.id);\n    } else {\n      guild = this.deleted.get(data.id) || null;\n    }\n\n    return {\n      guild,\n    };\n  }\n\n  scheduleForDeletion(id) {\n    this.client.setTimeout(() => this.deleted.delete(id), this.client.options.restWsBridgeTimeout);\n  }\n}\n\n/**\n * Emitted whenever a guild becomes unavailable, likely due to a server outage.\n * @event Client#guildUnavailable\n * @param {Guild} guild The guild that has become unavailable.\n */\n\nmodule.exports = GuildDeleteAction;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/actions/GuildEmojiCreate.js":"const Action = require('./Action');\n\nclass GuildEmojiCreateAction extends Action {\n  handle(guild, createdEmoji) {\n    const client = this.client;\n    const emoji = client.dataManager.newEmoji(createdEmoji, guild);\n    return {\n      emoji,\n    };\n  }\n}\n\n/**\n * Emitted whenever a custom emoji is created in a guild\n * @event Client#emojiCreate\n * @param {Emoji} emoji The emoji that was created.\n */\nmodule.exports = GuildEmojiCreateAction;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/actions/GuildEmojiDelete.js":"const Action = require('./Action');\n\nclass GuildEmojiDeleteAction extends Action {\n  handle(emoji) {\n    const client = this.client;\n    client.dataManager.killEmoji(emoji);\n    return {\n      emoji,\n    };\n  }\n}\n\n/**\n * Emitted whenever a custom guild emoji is deleted\n * @event Client#emojiDelete\n * @param {Emoji} emoji The emoji that was deleted.\n */\nmodule.exports = GuildEmojiDeleteAction;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/actions/GuildEmojiUpdate.js":"const Action = require('./Action');\n\nclass GuildEmojiUpdateAction extends Action {\n  handle(oldEmoji, newEmoji) {\n    this.client.dataManager.updateEmoji(oldEmoji, newEmoji);\n  }\n}\n\n/**\n * Emitted whenever a custom guild emoji is updated\n * @event Client#emojiUpdate\n * @param {Emoji} oldEmoji The old emoji\n * @param {Emoji} newEmoji The new emoji\n */\nmodule.exports = GuildEmojiUpdateAction;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/actions/GuildMemberGet.js":"const Action = require('./Action');\n\nclass GuildMemberGetAction extends Action {\n  handle(guild, data) {\n    const member = guild._addMember(data, false);\n    return {\n      member,\n    };\n  }\n}\n\nmodule.exports = GuildMemberGetAction;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/actions/GuildMemberRemove.js":"const Action = require('./Action');\nconst Constants = require('../../util/Constants');\n\nclass GuildMemberRemoveAction extends Action {\n  constructor(client) {\n    super(client);\n    this.deleted = new Map();\n  }\n\n  handle(data) {\n    const client = this.client;\n\n    const guild = client.guilds.get(data.guild_id);\n    if (guild) {\n      let member = guild.members.get(data.user.id);\n      if (member) {\n        guild.memberCount--;\n        guild._removeMember(member);\n        this.deleted.set(guild.id + data.user.id, member);\n        if (client.status === Constants.Status.READY) client.emit(Constants.Events.GUILD_MEMBER_REMOVE, member);\n        this.scheduleForDeletion(guild.id, data.user.id);\n      } else {\n        member = this.deleted.get(guild.id + data.user.id) || null;\n      }\n\n      return {\n        guild,\n        member,\n      };\n    }\n\n    return {\n      guild,\n      member: null,\n    };\n  }\n\n  scheduleForDeletion(guildID, userID) {\n    this.client.setTimeout(() => this.deleted.delete(guildID + userID), this.client.options.restWsBridgeTimeout);\n  }\n}\n\n/**\n * Emitted whenever a member leaves a guild, or is kicked.\n * @event Client#guildMemberRemove\n * @param {GuildMember} member The member that has left/been kicked from the guild.\n */\n\nmodule.exports = GuildMemberRemoveAction;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/actions/GuildRoleCreate.js":"const Action = require('./Action');\nconst Constants = require('../../util/Constants');\nconst Role = require('../../structures/Role');\n\nclass GuildRoleCreate extends Action {\n  handle(data) {\n    const client = this.client;\n\n    const guild = client.guilds.get(data.guild_id);\n    if (guild) {\n      const already = guild.roles.has(data.role.id);\n      const role = new Role(guild, data.role);\n      guild.roles.set(role.id, role);\n      if (!already) client.emit(Constants.Events.GUILD_ROLE_CREATE, role);\n      return {\n        role,\n      };\n    }\n\n    return {\n      role: null,\n    };\n  }\n}\n\n/**\n * Emitted whenever a role is created.\n * @event Client#roleCreate\n * @param {Role} role The role that was created.\n */\n\nmodule.exports = GuildRoleCreate;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/actions/GuildRoleDelete.js":"const Action = require('./Action');\nconst Constants = require('../../util/Constants');\n\nclass GuildRoleDeleteAction extends Action {\n  constructor(client) {\n    super(client);\n    this.deleted = new Map();\n  }\n\n  handle(data) {\n    const client = this.client;\n\n    const guild = client.guilds.get(data.guild_id);\n    if (guild) {\n      let role = guild.roles.get(data.role_id);\n      if (role) {\n        guild.roles.delete(data.role_id);\n        this.deleted.set(guild.id + data.role_id, role);\n        this.scheduleForDeletion(guild.id, data.role_id);\n        client.emit(Constants.Events.GUILD_ROLE_DELETE, role);\n      } else {\n        role = this.deleted.get(guild.id + data.role_id) || null;\n      }\n\n      return {\n        role,\n      };\n    }\n\n    return {\n      role: null,\n    };\n  }\n\n  scheduleForDeletion(guildID, roleID) {\n    this.client.setTimeout(() => this.deleted.delete(guildID + roleID), this.client.options.restWsBridgeTimeout);\n  }\n}\n\n/**\n * Emitted whenever a guild role is deleted.\n * @event Client#roleDelete\n * @param {Role} role The role that was deleted.\n */\n\nmodule.exports = GuildRoleDeleteAction;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/actions/GuildRolesPositionUpdate.js":"const Action = require('./Action');\r\n\r\nclass GuildRolesPositionUpdate extends Action {\r\n  handle(data) {\r\n    const client = this.client;\r\n\r\n    const guild = client.guilds.get(data.guild_id);\r\n    if (guild) {\r\n      for (const partialRole of data.roles) {\r\n        const role = guild.roles.get(partialRole.id);\r\n        if (role) {\r\n          role.position = partialRole.position;\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      guild,\r\n    };\r\n  }\r\n}\r\n\r\nmodule.exports = GuildRolesPositionUpdate;\r\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/actions/GuildRoleUpdate.js":"const Action = require('./Action');\nconst Constants = require('../../util/Constants');\nconst cloneObject = require('../../util/CloneObject');\n\nclass GuildRoleUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n\n    const guild = client.guilds.get(data.guild_id);\n    if (guild) {\n      const roleData = data.role;\n      let oldRole = null;\n\n      const role = guild.roles.get(roleData.id);\n      if (role) {\n        oldRole = cloneObject(role);\n        role.setup(data.role);\n        client.emit(Constants.Events.GUILD_ROLE_UPDATE, oldRole, role);\n      }\n\n      return {\n        old: oldRole,\n        updated: role,\n      };\n    }\n\n    return {\n      old: null,\n      updated: null,\n    };\n  }\n}\n\n/**\n * Emitted whenever a guild role is updated.\n * @event Client#roleUpdate\n * @param {Role} oldRole The role before the update.\n * @param {Role} newRole The role after the update.\n */\n\nmodule.exports = GuildRoleUpdateAction;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/actions/GuildSync.js":"const Action = require('./Action');\n\nclass GuildSync extends Action {\n  handle(data) {\n    const client = this.client;\n\n    const guild = client.guilds.get(data.id);\n    if (guild) {\n      data.presences = data.presences || [];\n      for (const presence of data.presences) {\n        guild._setPresence(presence.user.id, presence);\n      }\n\n      data.members = data.members || [];\n      for (const syncMember of data.members) {\n        const member = guild.members.get(syncMember.user.id);\n        if (member) {\n          guild._updateMember(member, syncMember);\n        } else {\n          guild._addMember(syncMember, false);\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = GuildSync;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/actions/GuildUpdate.js":"const Action = require('./Action');\nconst Constants = require('../../util/Constants');\nconst cloneObject = require('../../util/CloneObject');\n\nclass GuildUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n\n    const guild = client.guilds.get(data.id);\n    if (guild) {\n      const oldGuild = cloneObject(guild);\n      guild.setup(data);\n      client.emit(Constants.Events.GUILD_UPDATE, oldGuild, guild);\n      return {\n        old: oldGuild,\n        updated: guild,\n      };\n    }\n\n    return {\n      old: null,\n      updated: null,\n    };\n  }\n}\n\n/**\n * Emitted whenever a guild is updated - e.g. name change.\n * @event Client#guildUpdate\n * @param {Guild} oldGuild The guild before the update.\n * @param {Guild} newGuild The guild after the update.\n */\n\nmodule.exports = GuildUpdateAction;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/actions/MessageCreate.js":"const Action = require('./Action');\nconst Message = require('../../structures/Message');\n\nclass MessageCreateAction extends Action {\n  handle(data) {\n    const client = this.client;\n\n    const channel = client.channels.get((data instanceof Array ? data[0] : data).channel_id);\n    const user = client.users.get((data instanceof Array ? data[0] : data).author.id);\n    if (channel) {\n      const member = channel.guild ? channel.guild.member(user) : null;\n      if (data instanceof Array) {\n        const messages = new Array(data.length);\n        for (let i = 0; i < data.length; i++) {\n          messages[i] = channel._cacheMessage(new Message(channel, data[i], client));\n        }\n        channel.lastMessageID = messages[messages.length - 1].id;\n        if (user) user.lastMessageID = messages[messages.length - 1].id;\n        if (member) member.lastMessageID = messages[messages.length - 1].id;\n        return {\n          messages,\n        };\n      } else {\n        const message = channel._cacheMessage(new Message(channel, data, client));\n        channel.lastMessageID = data.id;\n        if (user) user.lastMessageID = data.id;\n        if (member) member.lastMessageID = data.id;\n        return {\n          message,\n        };\n      }\n    }\n\n    return {\n      message: null,\n    };\n  }\n}\n\nmodule.exports = MessageCreateAction;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/actions/MessageDeleteBulk.js":"const Action = require('./Action');\nconst Collection = require('../../util/Collection');\nconst Constants = require('../../util/Constants');\n\nclass MessageDeleteBulkAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const channel = client.channels.get(data.channel_id);\n\n    const ids = data.ids;\n    const messages = new Collection();\n    for (const id of ids) {\n      const message = channel.messages.get(id);\n      if (message) messages.set(message.id, message);\n    }\n\n    if (messages.size > 0) client.emit(Constants.Events.MESSAGE_BULK_DELETE, messages);\n    return {\n      messages,\n    };\n  }\n}\n\nmodule.exports = MessageDeleteBulkAction;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/actions/MessageDelete.js":"const Action = require('./Action');\n\nclass MessageDeleteAction extends Action {\n  constructor(client) {\n    super(client);\n    this.deleted = new Map();\n  }\n\n  handle(data) {\n    const client = this.client;\n\n    const channel = client.channels.get(data.channel_id);\n    if (channel) {\n      let message = channel.messages.get(data.id);\n\n      if (message) {\n        channel.messages.delete(message.id);\n        this.deleted.set(channel.id + message.id, message);\n        this.scheduleForDeletion(channel.id, message.id);\n      } else {\n        message = this.deleted.get(channel.id + data.id) || null;\n      }\n\n      return {\n        message,\n      };\n    }\n\n    return {\n      message: null,\n    };\n  }\n\n  scheduleForDeletion(channelID, messageID) {\n    this.client.setTimeout(() => this.deleted.delete(channelID + messageID),\n      this.client.options.restWsBridgeTimeout);\n  }\n}\n\nmodule.exports = MessageDeleteAction;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/actions/MessageReactionAdd.js":"const Action = require('./Action');\nconst Constants = require('../../util/Constants');\n\n/*\n{ user_id: 'id',\n     message_id: 'id',\n     emoji: { name: '�', id: null },\n     channel_id: 'id' } }\n*/\n\nclass MessageReactionAdd extends Action {\n  handle(data) {\n    const user = this.client.users.get(data.user_id);\n    if (!user) return false;\n\n    const channel = this.client.channels.get(data.channel_id);\n    if (!channel || channel.type === 'voice') return false;\n\n    const message = channel.messages.get(data.message_id);\n    if (!message) return false;\n\n    if (!data.emoji) return false;\n\n    const reaction = message._addReaction(data.emoji, user);\n\n    if (reaction) {\n      this.client.emit(Constants.Events.MESSAGE_REACTION_ADD, reaction, user);\n    }\n\n    return {\n      message,\n      reaction,\n      user,\n    };\n  }\n}\n/**\n * Emitted whenever a reaction is added to a message.\n * @event Client#messageReactionAdd\n * @param {MessageReaction} messageReaction The reaction object.\n * @param {User} user The user that applied the emoji or reaction emoji.\n */\nmodule.exports = MessageReactionAdd;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/actions/MessageReactionRemoveAll.js":"const Action = require('./Action');\nconst Constants = require('../../util/Constants');\n\nclass MessageReactionRemoveAll extends Action {\n  handle(data) {\n    const channel = this.client.channels.get(data.channel_id);\n    if (!channel || channel.type === 'voice') return false;\n\n    const message = channel.messages.get(data.message_id);\n    if (!message) return false;\n\n    message._clearReactions();\n    this.client.emit(Constants.Events.MESSAGE_REACTION_REMOVE_ALL, message);\n\n    return {\n      message,\n    };\n  }\n}\n/**\n * Emitted whenever all reactions are removed from a message.\n * @event Client#messageReactionRemoveAll\n * @param {MessageReaction} messageReaction The reaction object.\n */\nmodule.exports = MessageReactionRemoveAll;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/actions/MessageReactionRemove.js":"const Action = require('./Action');\nconst Constants = require('../../util/Constants');\n\n/*\n{ user_id: 'id',\n     message_id: 'id',\n     emoji: { name: '�', id: null },\n     channel_id: 'id' } }\n*/\n\nclass MessageReactionRemove extends Action {\n  handle(data) {\n    const user = this.client.users.get(data.user_id);\n    if (!user) return false;\n\n    const channel = this.client.channels.get(data.channel_id);\n    if (!channel || channel.type === 'voice') return false;\n\n    const message = channel.messages.get(data.message_id);\n    if (!message) return false;\n\n    if (!data.emoji) return false;\n\n    const reaction = message._removeReaction(data.emoji, user);\n\n    if (reaction) {\n      this.client.emit(Constants.Events.MESSAGE_REACTION_REMOVE, reaction, user);\n    }\n\n    return {\n      message,\n      reaction,\n      user,\n    };\n  }\n}\n/**\n * Emitted whenever a reaction is removed from a message.\n * @event Client#messageReactionRemove\n * @param {MessageReaction} messageReaction The reaction object.\n * @param {User} user The user that removed the emoji or reaction emoji.\n */\nmodule.exports = MessageReactionRemove;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/actions/MessageUpdate.js":"const Action = require('./Action');\nconst Constants = require('../../util/Constants');\nconst cloneObject = require('../../util/CloneObject');\n\nclass MessageUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n\n    const channel = client.channels.get(data.channel_id);\n    if (channel) {\n      const message = channel.messages.get(data.id);\n      if (message) {\n        const oldMessage = cloneObject(message);\n        message.patch(data);\n        message._edits.unshift(oldMessage);\n        client.emit(Constants.Events.MESSAGE_UPDATE, oldMessage, message);\n        return {\n          old: oldMessage,\n          updated: message,\n        };\n      }\n\n      return {\n        old: message,\n        updated: message,\n      };\n    }\n\n    return {\n      old: null,\n      updated: null,\n    };\n  }\n}\n\n/**\n * Emitted whenever a message is updated - e.g. embed or content change.\n * @event Client#messageUpdate\n * @param {Message} oldMessage The message before the update.\n * @param {Message} newMessage The message after the update.\n */\n\nmodule.exports = MessageUpdateAction;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/actions/UserGet.js":"const Action = require('./Action');\n\nclass UserGetAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const user = client.dataManager.newUser(data);\n    return {\n      user,\n    };\n  }\n}\n\nmodule.exports = UserGetAction;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/actions/UserNoteUpdate.js":"const Action = require('./Action');\nconst Constants = require('../../util/Constants');\n\nclass UserNoteUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n\n    const oldNote = client.user.notes.get(data.id);\n    const note = data.note.length ? data.note : null;\n\n    client.user.notes.set(data.id, note);\n\n    client.emit(Constants.Events.USER_NOTE_UPDATE, data.id, oldNote, note);\n\n    return {\n      old: oldNote,\n      updated: note,\n    };\n  }\n}\n\n/**\n * Emitted whenever a note is updated.\n * @event Client#userNoteUpdate\n * @param {User} user The user the note belongs to\n * @param {string} oldNote The note content before the update\n * @param {string} newNote The note content after the update\n */\n\nmodule.exports = UserNoteUpdateAction;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/actions/UserUpdate.js":"const Action = require('./Action');\nconst Constants = require('../../util/Constants');\nconst cloneObject = require('../../util/CloneObject');\n\nclass UserUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n\n    if (client.user) {\n      if (client.user.equals(data)) {\n        return {\n          old: client.user,\n          updated: client.user,\n        };\n      }\n\n      const oldUser = cloneObject(client.user);\n      client.user.patch(data);\n      client.emit(Constants.Events.USER_UPDATE, oldUser, client.user);\n      return {\n        old: oldUser,\n        updated: client.user,\n      };\n    }\n\n    return {\n      old: null,\n      updated: null,\n    };\n  }\n}\n\nmodule.exports = UserUpdateAction;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/rest/APIRequest.js":"const request = require('superagent');\nconst Constants = require('../../util/Constants');\n\nfunction getRoute(url) {\n  let route = url.split('?')[0];\n  if (route.includes('/channels/') || route.includes('/guilds/')) {\n    const startInd = route.includes('/channels/') ? route.indexOf('/channels/') : route.indexOf('/guilds/');\n    const majorID = route.substring(startInd).split('/')[2];\n    route = route.replace(/(\\d{8,})/g, ':id').replace(':id', majorID);\n  }\n  return route;\n}\n\nclass APIRequest {\n  constructor(rest, method, url, auth, data, file) {\n    this.rest = rest;\n    this.method = method;\n    this.url = url;\n    this.auth = auth;\n    this.data = data;\n    this.file = file;\n    this.route = getRoute(this.url);\n  }\n\n  getAuth() {\n    if (this.rest.client.token && this.rest.client.user && this.rest.client.user.bot) {\n      return `Bot ${this.rest.client.token}`;\n    } else if (this.rest.client.token) {\n      return this.rest.client.token;\n    }\n    throw new Error(Constants.Errors.NO_TOKEN);\n  }\n\n  gen() {\n    const apiRequest = request[this.method](this.url);\n    if (this.auth) apiRequest.set('authorization', this.getAuth());\n    if (this.file && this.file.file) {\n      apiRequest.attach('file', this.file.file, this.file.name);\n      this.data = this.data || {};\n      apiRequest.field('payload_json', JSON.stringify(this.data));\n    } else if (this.data) {\n      apiRequest.send(this.data);\n    }\n    if (!this.rest.client.browser) apiRequest.set('User-Agent', this.rest.userAgentManager.userAgent);\n    return apiRequest;\n  }\n}\n\nmodule.exports = APIRequest;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/voice/ClientVoiceManager.js":"const Collection = require('../../util/Collection');\nconst mergeDefault = require('../../util/MergeDefault');\nconst Constants = require('../../util/Constants');\nconst VoiceConnection = require('./VoiceConnection');\nconst EventEmitter = require('events').EventEmitter;\n\n/**\n * Manages all the voice stuff for the Client\n * @private\n */\nclass ClientVoiceManager {\n  constructor(client) {\n    /**\n     * The client that instantiated this voice manager\n     * @type {Client}\n     */\n    this.client = client;\n\n    /**\n     * A collection mapping connection IDs to the Connection objects\n     * @type {Collection<string, VoiceConnection>}\n     */\n    this.connections = new Collection();\n\n    /**\n     * Pending connection attempts, maps guild ID to VoiceChannel\n     * @type {Collection<string, VoiceChannel>}\n     */\n    this.pending = new Collection();\n\n    this.client.on('self.voiceServer', this.onVoiceServer.bind(this));\n    this.client.on('self.voiceStateUpdate', this.onVoiceStateUpdate.bind(this));\n  }\n\n  onVoiceServer(data) {\n    if (this.pending.has(data.guild_id)) this.pending.get(data.guild_id).setTokenAndEndpoint(data.token, data.endpoint);\n  }\n\n  onVoiceStateUpdate(data) {\n    if (this.pending.has(data.guild_id)) this.pending.get(data.guild_id).setSessionID(data.session_id);\n  }\n\n  /**\n   * Sends a request to the main gateway to join a voice channel\n   * @param {VoiceChannel} channel The channel to join\n   * @param {Object} [options] The options to provide\n   */\n  sendVoiceStateUpdate(channel, options = {}) {\n    if (!this.client.user) throw new Error('Unable to join because there is no client user.');\n    if (!channel.permissionsFor) {\n      throw new Error('Channel does not support permissionsFor; is it really a voice channel?');\n    }\n    const permissions = channel.permissionsFor(this.client.user);\n    if (!permissions) {\n      throw new Error('There is no permission set for the client user in this channel - are they part of the guild?');\n    }\n    if (!permissions.hasPermission('CONNECT')) {\n      throw new Error('You do not have permission to join this voice channel.');\n    }\n\n    options = mergeDefault({\n      guild_id: channel.guild.id,\n      channel_id: channel.id,\n      self_mute: false,\n      self_deaf: false,\n    }, options);\n\n    this.client.ws.send({\n      op: Constants.OPCodes.VOICE_STATE_UPDATE,\n      d: options,\n    });\n  }\n\n  /**\n   * Sets up a request to join a voice channel\n   * @param {VoiceChannel} channel The voice channel to join\n   * @returns {Promise<VoiceConnection>}\n   */\n  joinChannel(channel) {\n    return new Promise((resolve, reject) => {\n      if (this.pending.get(channel.guild.id)) throw new Error('Already connecting to this guild\\'s voice server.');\n      if (!channel.joinable) throw new Error('You do not have permission to join this voice channel.');\n\n      const existingConnection = this.connections.get(channel.guild.id);\n      if (existingConnection) {\n        if (existingConnection.channel.id !== channel.id) {\n          this.sendVoiceStateUpdate(channel);\n          this.connections.get(channel.guild.id).channel = channel;\n        }\n        resolve(existingConnection);\n        return;\n      }\n\n      const pendingConnection = new PendingVoiceConnection(this, channel);\n      this.pending.set(channel.guild.id, pendingConnection);\n\n      pendingConnection.on('fail', reason => {\n        this.pending.delete(channel.guild.id);\n        reject(reason);\n      });\n\n      pendingConnection.on('pass', voiceConnection => {\n        this.pending.delete(channel.guild.id);\n        this.connections.set(channel.guild.id, voiceConnection);\n        voiceConnection.once('ready', () => resolve(voiceConnection));\n        voiceConnection.once('error', reject);\n        voiceConnection.once('disconnect', () => this.connections.delete(channel.guild.id));\n      });\n    });\n  }\n}\n\n/**\n * Represents a Pending Voice Connection\n * @private\n */\nclass PendingVoiceConnection extends EventEmitter {\n  constructor(voiceManager, channel) {\n    super();\n\n    /**\n     * The ClientVoiceManager that instantiated this pending connection\n     * @type {ClientVoiceManager}\n     */\n    this.voiceManager = voiceManager;\n\n    /**\n     * The channel that this pending voice connection will attempt to join\n     * @type {VoiceChannel}\n     */\n    this.channel = channel;\n\n    /**\n     * The timeout that will be invoked after 15 seconds signifying a failure to connect\n     * @type {Timeout}\n     */\n    this.deathTimer = this.voiceManager.client.setTimeout(\n      () => this.fail(new Error('Connection not established within 15 seconds.')), 15000);\n\n    /**\n     * An object containing data required to connect to the voice servers with\n     * @type {Object}\n     */\n    this.data = {};\n\n    this.sendVoiceStateUpdate();\n  }\n\n  checkReady() {\n    if (this.data.token && this.data.endpoint && this.data.session_id) {\n      this.pass();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Set the token and endpoint required to connect to the the voice servers\n   * @param {string} token the token\n   * @param {string} endpoint the endpoint\n   * @returns {void}\n   */\n  setTokenAndEndpoint(token, endpoint) {\n    if (!token) {\n      this.fail(new Error('Token not provided from voice server packet.'));\n      return;\n    }\n    if (!endpoint) {\n      this.fail(new Error('Endpoint not provided from voice server packet.'));\n      return;\n    }\n    if (this.data.token) {\n      this.fail(new Error('There is already a registered token for this connection.'));\n      return;\n    }\n    if (this.data.endpoint) {\n      this.fail(new Error('There is already a registered endpoint for this connection.'));\n      return;\n    }\n\n    endpoint = endpoint.match(/([^:]*)/)[0];\n\n    if (!endpoint) {\n      this.fail(new Error('Failed to find an endpoint.'));\n      return;\n    }\n\n    this.data.token = token;\n    this.data.endpoint = endpoint;\n\n    this.checkReady();\n  }\n\n  /**\n   * Sets the Session ID for the connection\n   * @param {string} sessionID the session ID\n   */\n  setSessionID(sessionID) {\n    if (!sessionID) {\n      this.fail(new Error('Session ID not supplied.'));\n      return;\n    }\n    if (this.data.session_id) {\n      this.fail(new Error('There is already a registered session ID for this connection.'));\n      return;\n    }\n    this.data.session_id = sessionID;\n\n    this.checkReady();\n  }\n\n  clean() {\n    clearInterval(this.deathTimer);\n    this.emit('fail', new Error('Clean-up triggered :fourTriggered:'));\n  }\n\n  pass() {\n    clearInterval(this.deathTimer);\n    this.emit('pass', this.upgrade());\n  }\n\n  fail(reason) {\n    this.emit('fail', reason);\n    this.clean();\n  }\n\n  sendVoiceStateUpdate() {\n    try {\n      this.voiceManager.sendVoiceStateUpdate(this.channel);\n    } catch (error) {\n      this.fail(error);\n    }\n  }\n\n  /**\n   * Upgrades this Pending Connection to a full Voice Connection\n   * @returns {VoiceConnection}\n   */\n  upgrade() {\n    return new VoiceConnection(this);\n  }\n}\n\nmodule.exports = ClientVoiceManager;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/voice/VoiceConnection.js":"const VoiceWebSocket = require('./VoiceWebSocket');\nconst VoiceUDP = require('./VoiceUDPClient');\nconst Constants = require('../../util/Constants');\nconst AudioPlayer = require('./player/AudioPlayer');\nconst VoiceReceiver = require('./receiver/VoiceReceiver');\nconst EventEmitter = require('events').EventEmitter;\nconst fs = require('fs');\n\n/**\n * Represents a connection to a voice channel in Discord.\n * ```js\n * // obtained using:\n * voiceChannel.join().then(connection => {\n *\n * });\n * ```\n * @extends {EventEmitter}\n */\nclass VoiceConnection extends EventEmitter {\n  constructor(pendingConnection) {\n    super();\n\n    /**\n     * The Voice Manager that instantiated this connection\n     * @type {ClientVoiceManager}\n     */\n    this.voiceManager = pendingConnection.voiceManager;\n\n    /**\n     * The voice channel this connection is currently serving\n     * @type {VoiceChannel}\n     */\n    this.channel = pendingConnection.channel;\n\n    /**\n     * Whether we're currently transmitting audio\n     * @type {boolean}\n     */\n    this.speaking = false;\n\n    /**\n     * An array of Voice Receivers that have been created for this connection\n     * @type {VoiceReceiver[]}\n     */\n    this.receivers = [];\n\n    /**\n     * The authentication data needed to connect to the voice server\n     * @type {Object}\n     * @private\n     */\n    this.authentication = pendingConnection.data;\n\n    /**\n     * The audio player for this voice connection\n     * @type {AudioPlayer}\n     */\n    this.player = new AudioPlayer(this);\n\n    this.player.on('debug', m => {\n      /**\n       * Debug info from the connection\n       * @event VoiceConnection#debug\n       * @param {string} message the debug message\n       */\n      this.emit('debug', `audio player - ${m}`);\n    });\n\n    this.player.on('error', e => {\n      /**\n       * Warning info from the connection\n       * @event VoiceConnection#warn\n       * @param {string|Error} warning the warning\n       */\n      this.emit('warn', e);\n      this.player.cleanup();\n    });\n\n    /**\n     * Map SSRC to speaking values\n     * @type {Map<number, boolean>}\n     * @private\n     */\n    this.ssrcMap = new Map();\n\n    /**\n     * Whether this connection is ready\n     * @type {boolean}\n     * @private\n     */\n    this.ready = false;\n\n    /**\n     * Object that wraps contains the `ws` and `udp` sockets of this voice connection\n     * @type {Object}\n     * @private\n     */\n    this.sockets = {};\n    this.connect();\n  }\n\n  /**\n   * Sets whether the voice connection should display as \"speaking\" or not\n   * @param {boolean} value whether or not to speak\n   * @private\n   */\n  setSpeaking(value) {\n    if (this.speaking === value) return;\n    this.speaking = value;\n    this.sockets.ws.sendPacket({\n      op: Constants.VoiceOPCodes.SPEAKING,\n      d: {\n        speaking: true,\n        delay: 0,\n      },\n    }).catch(e => {\n      this.emit('debug', e);\n    });\n  }\n\n  /**\n   * Disconnect the voice connection, causing a disconnect and closing event to be emitted.\n   */\n  disconnect() {\n    this.emit('closing');\n    this.voiceManager.client.ws.send({\n      op: Constants.OPCodes.VOICE_STATE_UPDATE,\n      d: {\n        guild_id: this.channel.guild.id,\n        channel_id: null,\n        self_mute: false,\n        self_deaf: false,\n      },\n    });\n    /**\n     * Emitted when the voice connection disconnects\n     * @event VoiceConnection#disconnect\n     */\n    this.emit('disconnect');\n  }\n\n  /**\n   * Connect the voice connection\n   * @private\n   */\n  connect() {\n    if (this.sockets.ws) throw new Error('There is already an existing WebSocket connection.');\n    if (this.sockets.udp) throw new Error('There is already an existing UDP connection.');\n    this.sockets.ws = new VoiceWebSocket(this);\n    this.sockets.udp = new VoiceUDP(this);\n    this.sockets.ws.on('error', e => this.emit('error', e));\n    this.sockets.udp.on('error', e => this.emit('error', e));\n    this.sockets.ws.once('ready', d => {\n      this.authentication.port = d.port;\n      this.authentication.ssrc = d.ssrc;\n      /**\n       * Emitted whenever the connection encounters an error.\n       * @event VoiceConnection#error\n       * @param {Error} error the encountered error\n       */\n      this.sockets.udp.findEndpointAddress()\n        .then(address => {\n          this.sockets.udp.createUDPSocket(address);\n        }, e => this.emit('error', e));\n    });\n    this.sockets.ws.once('sessionDescription', (mode, secret) => {\n      this.authentication.encryptionMode = mode;\n      this.authentication.secretKey = secret;\n      /**\n       * Emitted once the connection is ready, when a promise to join a voice channel resolves,\n       * the connection will already be ready.\n       * @event VoiceConnection#ready\n       */\n      this.emit('ready');\n      this.ready = true;\n    });\n    this.sockets.ws.on('speaking', data => {\n      const guild = this.channel.guild;\n      const user = this.voiceManager.client.users.get(data.user_id);\n      this.ssrcMap.set(+data.ssrc, user);\n      if (!data.speaking) {\n        for (const receiver of this.receivers) {\n          const opusStream = receiver.opusStreams.get(user.id);\n          const pcmStream = receiver.pcmStreams.get(user.id);\n          if (opusStream) {\n            opusStream.push(null);\n            opusStream.open = false;\n            receiver.opusStreams.delete(user.id);\n          }\n          if (pcmStream) {\n            pcmStream.push(null);\n            pcmStream.open = false;\n            receiver.pcmStreams.delete(user.id);\n          }\n        }\n      }\n      /**\n       * Emitted whenever a user starts/stops speaking\n       * @event VoiceConnection#speaking\n       * @param {User} user The user that has started/stopped speaking\n       * @param {boolean} speaking Whether or not the user is speaking\n       */\n      if (this.ready) this.emit('speaking', user, data.speaking);\n      guild._memberSpeakUpdate(data.user_id, data.speaking);\n    });\n  }\n\n  /**\n   * Options that can be passed to stream-playing methods:\n   * @typedef {Object} StreamOptions\n   * @property {number} [seek=0] The time to seek to\n   * @property {number} [volume=1] The volume to play at\n   * @property {number} [passes=1] How many times to send the voice packet to reduce packet loss\n   */\n\n  /**\n   * Play the given file in the voice connection.\n   * @param {string} file The path to the file\n   * @param {StreamOptions} [options] Options for playing the stream\n   * @returns {StreamDispatcher}\n   * @example\n   * // play files natively\n   * voiceChannel.join()\n   *  .then(connection => {\n   *    const dispatcher = connection.playFile('C:/Users/Discord/Desktop/music.mp3');\n   *  })\n   *  .catch(console.error);\n   */\n  playFile(file, options) {\n    return this.playStream(fs.createReadStream(file), options);\n  }\n\n  /**\n   * Plays and converts an audio stream in the voice connection.\n   * @param {ReadableStream} stream The audio stream to play\n   * @param {StreamOptions} [options] Options for playing the stream\n   * @returns {StreamDispatcher}\n   * @example\n   * // play streams using ytdl-core\n   * const ytdl = require('ytdl-core');\n   * const streamOptions = { seek: 0, volume: 1 };\n   * voiceChannel.join()\n   *  .then(connection => {\n   *    const stream = ytdl('https://www.youtube.com/watch?v=XAWgeLF9EVQ', {filter : 'audioonly'});\n   *    const dispatcher = connection.playStream(stream, streamOptions);\n   *  })\n   *  .catch(console.error);\n   */\n  playStream(stream, { seek = 0, volume = 1, passes = 1 } = {}) {\n    const options = { seek, volume, passes };\n    return this.player.playUnknownStream(stream, options);\n  }\n\n  /**\n   * Plays a stream of 16-bit signed stereo PCM at 48KHz.\n   * @param {ReadableStream} stream The audio stream to play.\n   * @param {StreamOptions} [options] Options for playing the stream\n   * @returns {StreamDispatcher}\n   */\n  playConvertedStream(stream, { seek = 0, volume = 1, passes = 1 } = {}) {\n    const options = { seek, volume, passes };\n    return this.player.playPCMStream(stream, null, options);\n  }\n\n  /**\n   * Creates a VoiceReceiver so you can start listening to voice data. It's recommended to only create one of these.\n   * @returns {VoiceReceiver}\n   */\n  createReceiver() {\n    const receiver = new VoiceReceiver(this);\n    this.receivers.push(receiver);\n    return receiver;\n  }\n}\n\nmodule.exports = VoiceConnection;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/voice/VoiceUDPClient.js":"const udp = require('dgram');\nconst dns = require('dns');\nconst Constants = require('../../util/Constants');\nconst EventEmitter = require('events').EventEmitter;\n\n/**\n * Represents a UDP Client for a Voice Connection\n * @extends {EventEmitter}\n * @private\n */\nclass VoiceConnectionUDPClient extends EventEmitter {\n  constructor(voiceConnection) {\n    super();\n\n    /**\n     * The voice connection that this UDP client serves\n     * @type {VoiceConnection}\n     */\n    this.voiceConnection = voiceConnection;\n\n    /**\n     * The UDP socket\n     * @type {?Socket}\n     */\n    this.socket = null;\n\n    /**\n     * The address of the discord voice server\n     * @type {?string}\n     */\n    this.discordAddress = null;\n\n    /**\n     * The local IP address\n     * @type {?string}\n     */\n    this.localAddress = null;\n\n    /**\n     * The local port\n     * @type {?string}\n     */\n    this.localPort = null;\n\n    this.voiceConnection.on('closing', this.shutdown.bind(this));\n  }\n\n  shutdown() {\n    if (this.socket) {\n      try {\n        this.socket.close();\n      } catch (e) {\n        return;\n      }\n      this.socket = null;\n    }\n  }\n\n  /**\n   * The port of the discord voice server\n   * @type {number}\n   * @readonly\n   */\n  get discordPort() {\n    return this.voiceConnection.authentication.port;\n  }\n\n  /**\n   * Tries to resolve the voice server endpoint to an address\n   * @returns {Promise<string>}\n   */\n  findEndpointAddress() {\n    return new Promise((resolve, reject) => {\n      dns.lookup(this.voiceConnection.authentication.endpoint, (error, address) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n        this.discordAddress = address;\n        resolve(address);\n      });\n    });\n  }\n\n  /**\n   * Send a packet to the UDP client\n   * @param {Object} packet the packet to send\n   * @returns {Promise<Object>}\n   */\n  send(packet) {\n    return new Promise((resolve, reject) => {\n      if (!this.socket) throw new Error('Tried to send a UDP packet, but there is no socket available.');\n      if (!this.discordAddress || !this.discordPort) throw new Error('Malformed UDP address or port.');\n      this.socket.send(packet, 0, packet.length, this.discordPort, this.discordAddress, error => {\n        if (error) reject(error); else resolve(packet);\n      });\n    });\n  }\n\n  createUDPSocket(address) {\n    this.discordAddress = address;\n    const socket = this.socket = udp.createSocket('udp4');\n\n    socket.once('message', message => {\n      const packet = parseLocalPacket(message);\n      if (packet.error) {\n        this.emit('error', packet.error);\n        return;\n      }\n\n      this.localAddress = packet.address;\n      this.localPort = packet.port;\n\n      this.voiceConnection.sockets.ws.sendPacket({\n        op: Constants.VoiceOPCodes.SELECT_PROTOCOL,\n        d: {\n          protocol: 'udp',\n          data: {\n            address: packet.address,\n            port: packet.port,\n            mode: 'xsalsa20_poly1305',\n          },\n        },\n      });\n    });\n\n    const blankMessage = new Buffer(70);\n    blankMessage.writeUIntBE(this.voiceConnection.authentication.ssrc, 0, 4);\n    this.send(blankMessage);\n  }\n}\n\nfunction parseLocalPacket(message) {\n  try {\n    const packet = new Buffer(message);\n    let address = '';\n    for (let i = 4; i < packet.indexOf(0, i); i++) address += String.fromCharCode(packet[i]);\n    const port = parseInt(packet.readUIntLE(packet.length - 2, 2).toString(10), 10);\n    return { address, port };\n  } catch (error) {\n    return { error };\n  }\n}\n\nmodule.exports = VoiceConnectionUDPClient;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/voice/VoiceWebSocket.js":"const Constants = require('../../util/Constants');\nconst SecretKey = require('./util/SecretKey');\nconst EventEmitter = require('events').EventEmitter;\n\nlet WebSocket;\ntry {\n  WebSocket = require('uws');\n} catch (err) {\n  WebSocket = require('ws');\n}\n\n/**\n * Represents a Voice Connection's WebSocket\n * @extends {EventEmitter}\n * @private\n */\nclass VoiceWebSocket extends EventEmitter {\n  constructor(voiceConnection) {\n    super();\n\n    /**\n     * The Voice Connection that this WebSocket serves\n     * @type {VoiceConnection}\n     */\n    this.voiceConnection = voiceConnection;\n\n    /**\n     * How many connection attempts have been made\n     * @type {number}\n     */\n    this.attempts = 0;\n\n    this.connect();\n    this.dead = false;\n    this.voiceConnection.on('closing', this.shutdown.bind(this));\n  }\n\n  shutdown() {\n    this.dead = true;\n    this.reset();\n  }\n\n  /**\n   * The client of this voice websocket\n   * @type {Client}\n   * @readonly\n   */\n  get client() {\n    return this.voiceConnection.voiceManager.client;\n  }\n\n  /**\n   * Resets the current WebSocket\n   */\n  reset() {\n    if (this.ws) {\n      if (this.ws.readyState !== WebSocket.CLOSED) this.ws.close();\n      this.ws = null;\n    }\n    this.clearHeartbeat();\n  }\n\n  /**\n   * Starts connecting to the Voice WebSocket Server.\n   */\n  connect() {\n    if (this.dead) return;\n    if (this.ws) this.reset();\n    if (this.attempts > 5) {\n      this.emit('error', new Error(`Too many connection attempts (${this.attempts}).`));\n      return;\n    }\n\n    this.attempts++;\n\n    /**\n     * The actual WebSocket used to connect to the Voice WebSocket Server.\n     * @type {WebSocket}\n     */\n    this.ws = new WebSocket(`wss://${this.voiceConnection.authentication.endpoint}`);\n    this.ws.onopen = this.onOpen.bind(this);\n    this.ws.onmessage = this.onMessage.bind(this);\n    this.ws.onclose = this.onClose.bind(this);\n    this.ws.onerror = this.onError.bind(this);\n  }\n\n  /**\n   * Sends data to the WebSocket if it is open.\n   * @param {string} data the data to send to the WebSocket\n   * @returns {Promise<string>}\n   */\n  send(data) {\n    return new Promise((resolve, reject) => {\n      if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n        throw new Error(`Voice websocket not open to send ${data}.`);\n      }\n      this.ws.send(data, null, error => {\n        if (error) reject(error); else resolve(data);\n      });\n    });\n  }\n\n  /**\n   * JSON.stringify's a packet and then sends it to the WebSocket Server.\n   * @param {Object} packet the packet to send\n   * @returns {Promise<string>}\n   */\n  sendPacket(packet) {\n    try {\n      packet = JSON.stringify(packet);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n    return this.send(packet);\n  }\n\n  /**\n   * Called whenever the WebSocket opens\n   */\n  onOpen() {\n    this.sendPacket({\n      op: Constants.OPCodes.DISPATCH,\n      d: {\n        server_id: this.voiceConnection.channel.guild.id,\n        user_id: this.client.user.id,\n        token: this.voiceConnection.authentication.token,\n        session_id: this.voiceConnection.authentication.session_id,\n      },\n    }).catch(() => {\n      this.emit('error', new Error('Tried to send join packet, but the WebSocket is not open.'));\n    });\n  }\n\n  /**\n   * Called whenever a message is received from the WebSocket\n   * @param {MessageEvent} event the message event that was received\n   * @returns {void}\n   */\n  onMessage(event) {\n    try {\n      return this.onPacket(JSON.parse(event.data));\n    } catch (error) {\n      return this.onError(error);\n    }\n  }\n\n  /**\n   * Called whenever the connection to the WebSocket Server is lost\n   */\n  onClose() {\n    if (!this.dead) this.client.setTimeout(this.connect.bind(this), this.attempts * 1000);\n  }\n\n  /**\n   * Called whenever an error occurs with the WebSocket.\n   * @param {Error} error the error that occurred\n   */\n  onError(error) {\n    this.emit('error', error);\n  }\n\n  /**\n   * Called whenever a valid packet is received from the WebSocket\n   * @param {Object} packet the received packet\n   */\n  onPacket(packet) {\n    switch (packet.op) {\n      case Constants.VoiceOPCodes.READY:\n        this.setHeartbeat(packet.d.heartbeat_interval);\n        /**\n         * Emitted once the voice websocket receives the ready packet\n         * @param {Object} packet the received packet\n         * @event VoiceWebSocket#ready\n         */\n        this.emit('ready', packet.d);\n        break;\n      case Constants.VoiceOPCodes.SESSION_DESCRIPTION:\n        /**\n         * Emitted once the Voice Websocket receives a description of this voice session\n         * @param {string} encryptionMode the type of encryption being used\n         * @param {SecretKey} secretKey the secret key used for encryption\n         * @event VoiceWebSocket#sessionDescription\n         */\n        this.emit('sessionDescription', packet.d.mode, new SecretKey(packet.d.secret_key));\n        break;\n      case Constants.VoiceOPCodes.SPEAKING:\n        /**\n         * Emitted whenever a speaking packet is received\n         * @param {Object} data\n         * @event VoiceWebSocket#speaking\n         */\n        this.emit('speaking', packet.d);\n        break;\n      default:\n        /**\n         * Emitted when an unhandled packet is received\n         * @param {Object} packet\n         * @event VoiceWebSocket#unknownPacket\n         */\n        this.emit('unknownPacket', packet);\n        break;\n    }\n  }\n\n  /**\n   * Sets an interval at which to send a heartbeat packet to the WebSocket\n   * @param {number} interval the interval at which to send a heartbeat packet\n   */\n  setHeartbeat(interval) {\n    if (!interval || isNaN(interval)) {\n      this.onError(new Error('Tried to set voice heartbeat but no valid interval was specified.'));\n      return;\n    }\n    if (this.heartbeatInterval) {\n      /**\n       * Emitted whenver the voice websocket encounters a non-fatal error\n       * @param {string} warn the warning\n       * @event VoiceWebSocket#warn\n       */\n      this.emit('warn', 'A voice heartbeat interval is being overwritten');\n      clearInterval(this.heartbeatInterval);\n    }\n    this.heartbeatInterval = this.client.setInterval(this.sendHeartbeat.bind(this), interval);\n  }\n\n  /**\n   * Clears a heartbeat interval, if one exists\n   */\n  clearHeartbeat() {\n    if (!this.heartbeatInterval) {\n      this.emit('warn', 'Tried to clear a heartbeat interval that does not exist');\n      return;\n    }\n    clearInterval(this.heartbeatInterval);\n    this.heartbeatInterval = null;\n  }\n\n  /**\n   * Sends a heartbeat packet\n   */\n  sendHeartbeat() {\n    this.sendPacket({ op: Constants.VoiceOPCodes.HEARTBEAT, d: null }).catch(() => {\n      this.emit('warn', 'Tried to send heartbeat, but connection is not open');\n      this.clearHeartbeat();\n    });\n  }\n}\n\nmodule.exports = VoiceWebSocket;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/voice/util/SecretKey.js":"/**\n * Represents a Secret Key used in encryption over voice\n * @private\n */\nclass SecretKey {\n  constructor(key) {\n    /**\n     * The key used for encryption\n     * @type {Uint8Array}\n     */\n    this.key = new Uint8Array(new ArrayBuffer(key.length));\n    for (const index in key) this.key[index] = key[index];\n  }\n}\n\nmodule.exports = SecretKey;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/websocket/WebSocketManager.js":"const browser = typeof window !== 'undefined';\nconst EventEmitter = require('events').EventEmitter;\nconst Constants = require('../../util/Constants');\nconst convertArrayBuffer = require('../../util/ConvertArrayBuffer');\nconst pako = require('pako');\nconst zlib = require('zlib');\nconst PacketManager = require('./packets/WebSocketPacketManager');\n\nlet WebSocket, erlpack;\nlet serialize = JSON.stringify;\nif (browser) {\n  WebSocket = window.WebSocket; // eslint-disable-line no-undef\n} else {\n  try {\n    WebSocket = require('uws');\n  } catch (err) {\n    WebSocket = require('ws');\n  }\n\n  try {\n    erlpack = require('erlpack');\n    serialize = erlpack.pack;\n  } catch (err) {\n    erlpack = null;\n  }\n}\n\n/**\n * The WebSocket Manager of the Client\n * @private\n */\nclass WebSocketManager extends EventEmitter {\n  constructor(client) {\n    super();\n    /**\n     * The Client that instantiated this WebSocketManager\n     * @type {Client}\n     */\n    this.client = client;\n\n    /**\n     * A WebSocket Packet manager, it handles all the messages\n     * @type {PacketManager}\n     */\n    this.packetManager = new PacketManager(this);\n\n    /**\n     * The status of the WebSocketManager, a type of Constants.Status. It defaults to IDLE.\n     * @type {number}\n     */\n    this.status = Constants.Status.IDLE;\n\n    /**\n     * The session ID of the connection, null if not yet available.\n     * @type {?string}\n     */\n    this.sessionID = null;\n\n    /**\n     * The packet count of the client, null if not yet available.\n     * @type {?number}\n     */\n    this.sequence = -1;\n\n    /**\n     * The gateway address for this WebSocket connection, null if not yet available.\n     * @type {?string}\n     */\n    this.gateway = null;\n\n    /**\n     * Whether READY was emitted normally (all packets received) or not\n     * @type {boolean}\n     */\n    this.normalReady = false;\n\n    /**\n     * The WebSocket connection to the gateway\n     * @type {?WebSocket}\n     */\n    this.ws = null;\n\n    /**\n     * An object with keys that are websocket event names that should be ignored\n     * @type {Object}\n     */\n    this.disabledEvents = {};\n    for (const event of client.options.disabledEvents) this.disabledEvents[event] = true;\n\n    this.first = true;\n\n    this.lastHeartbeatAck = true;\n  }\n\n  /**\n   * Connects the client to a given gateway\n   * @param {string} gateway The gateway to connect to\n   */\n  _connect(gateway) {\n    this.client.emit('debug', `Connecting to gateway ${gateway}`);\n    this.normalReady = false;\n    if (this.status !== Constants.Status.RECONNECTING) this.status = Constants.Status.CONNECTING;\n    this.ws = new WebSocket(gateway);\n    if (browser) this.ws.binaryType = 'arraybuffer';\n    this.ws.onopen = this.eventOpen.bind(this);\n    this.ws.onmessage = this.eventMessage.bind(this);\n    this.ws.onclose = this.eventClose.bind(this);\n    this.ws.onerror = this.eventError.bind(this);\n    this._queue = [];\n    this._remaining = 120;\n    this.client.setInterval(() => {\n      this._remaining = 120;\n      this._remainingReset = Date.now();\n    }, 60e3);\n  }\n\n  connect(gateway) {\n    gateway = `${gateway}&encoding=${erlpack ? 'etf' : 'json'}`;\n    if (this.first) {\n      this._connect(gateway);\n      this.first = false;\n    } else {\n      this.client.setTimeout(() => this._connect(gateway), 5500);\n    }\n  }\n\n  heartbeat(normal) {\n    if (normal && !this.lastHeartbeatAck) {\n      this.ws.close(1007);\n      return;\n    }\n\n    this.client.emit('debug', 'Sending heartbeat');\n    this.client._pingTimestamp = Date.now();\n    this.client.ws.send({\n      op: Constants.OPCodes.HEARTBEAT,\n      d: this.sequence,\n    }, true);\n\n    this.lastHeartbeatAck = false;\n  }\n\n  /**\n   * Sends a packet to the gateway\n   * @param {Object} data An object that can be JSON stringified\n   * @param {boolean} force Whether or not to send the packet immediately\n   */\n  send(data, force = false) {\n    if (force) {\n      this._send(serialize(data));\n      return;\n    }\n    this._queue.push(serialize(data));\n    this.doQueue();\n  }\n\n  destroy() {\n    this.ws.close(1000);\n    this._queue = [];\n    this.status = Constants.Status.IDLE;\n  }\n\n  _send(data) {\n    if (this.ws.readyState === WebSocket.OPEN) {\n      this.emit('send', data);\n      this.ws.send(data);\n    }\n  }\n\n  doQueue() {\n    const item = this._queue[0];\n    if (!(this.ws.readyState === WebSocket.OPEN && item)) return;\n    if (this.remaining === 0) {\n      this.client.setTimeout(this.doQueue.bind(this), Date.now() - this.remainingReset);\n      return;\n    }\n    this._remaining--;\n    this._send(item);\n    this._queue.shift();\n    this.doQueue();\n  }\n\n  /**\n   * Run whenever the gateway connections opens up\n   */\n  eventOpen() {\n    this.client.emit('debug', 'Connection to gateway opened');\n    this.lastHeartbeatAck = true;\n    if (this.status === Constants.Status.RECONNECTING) this._sendResume();\n    else this._sendNewIdentify();\n  }\n\n  /**\n   * Sends a gateway resume packet, in cases of unexpected disconnections.\n   */\n  _sendResume() {\n    if (!this.sessionID) {\n      this._sendNewIdentify();\n      return;\n    }\n    this.client.emit('debug', 'Identifying as resumed session');\n    const payload = {\n      token: this.client.token,\n      session_id: this.sessionID,\n      seq: this.sequence,\n    };\n\n    this.send({\n      op: Constants.OPCodes.RESUME,\n      d: payload,\n    });\n  }\n\n  /**\n   * Sends a new identification packet, in cases of new connections or failed reconnections.\n   */\n  _sendNewIdentify() {\n    this.reconnecting = false;\n    const payload = this.client.options.ws;\n    payload.token = this.client.token;\n    if (this.client.options.shardCount > 0) {\n      payload.shard = [Number(this.client.options.shardId), Number(this.client.options.shardCount)];\n    }\n    this.client.emit('debug', 'Identifying as new session');\n    this.send({\n      op: Constants.OPCodes.IDENTIFY,\n      d: payload,\n    });\n    this.sequence = -1;\n  }\n\n  /**\n   * @external CloseEvent\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n   */\n\n  /**\n   * Run whenever the connection to the gateway is closed, it will try to reconnect the client.\n   * @param {CloseEvent} event The WebSocket close event\n   */\n  eventClose(event) {\n    this.emit('close', event);\n    this.client.clearInterval(this.client.manager.heartbeatInterval);\n    this.status = Constants.Status.DISCONNECTED;\n    this._queue = [];\n    /**\n     * Emitted whenever the client websocket is disconnected\n     * @event Client#disconnect\n     * @param {CloseEvent} event The WebSocket close event\n     */\n    if (!this.reconnecting) this.client.emit(Constants.Events.DISCONNECT, event);\n    if (event.code === 4004) return;\n    if (event.code === 4010) return;\n    if (!this.reconnecting && event.code !== 1000) this.tryReconnect();\n  }\n\n  /**\n   * Run whenever a message is received from the WebSocket. Returns `true` if the message\n   * was handled properly.\n   * @param {Object} event The received websocket data\n   * @returns {boolean}\n   */\n  eventMessage(event) {\n    const data = this.tryParseEventData(event.data);\n    if (data === null) {\n      this.eventError(new Error(Constants.Errors.BAD_WS_MESSAGE));\n      return false;\n    }\n\n    this.client.emit('raw', data);\n\n    if (data.op === Constants.OPCodes.HELLO) this.client.manager.setupKeepAlive(data.d.heartbeat_interval);\n    return this.packetManager.handle(data);\n  }\n\n  /**\n   * Parses the raw data from a websocket event, inflating it if necessary\n   * @param {*} data Event data\n   * @returns {Object}\n   */\n  parseEventData(data) {\n    if (erlpack) {\n      if (data instanceof ArrayBuffer) data = convertArrayBuffer(data);\n      return erlpack.unpack(data);\n    } else {\n      if (data instanceof ArrayBuffer) data = pako.inflate(data, { to: 'string' });\n      else if (data instanceof Buffer) data = zlib.inflateSync(data).toString();\n      return JSON.parse(data);\n    }\n  }\n\n  /**\n   * Tries to call `parseEventData()` and return its result, or returns `null` upon thrown errors.\n   * @param {*} data Event data\n   * @returns {?Object}\n   */\n  tryParseEventData(data) {\n    try {\n      return this.parseEventData(data);\n    } catch (err) {\n      return null;\n    }\n  }\n\n  /**\n   * Run whenever an error occurs with the WebSocket connection. Tries to reconnect\n   * @param {Error} err The encountered error\n   */\n  eventError(err) {\n    /**\n     * Emitted whenever the Client encounters a serious connection error\n     * @event Client#error\n     * @param {Error} error The encountered error\n     */\n    if (this.client.listenerCount('error') > 0) this.client.emit('error', err);\n    this.tryReconnect();\n  }\n\n  _emitReady(normal = true) {\n    /**\n     * Emitted when the Client becomes ready to start working\n     * @event Client#ready\n     */\n    this.status = Constants.Status.READY;\n    this.client.emit(Constants.Events.READY);\n    this.packetManager.handleQueue();\n    this.normalReady = normal;\n  }\n\n  /**\n   * Runs on new packets before `READY` to see if the Client is ready yet, if it is prepares\n   * the `READY` event.\n   */\n  checkIfReady() {\n    if (this.status !== Constants.Status.READY && this.status !== Constants.Status.NEARLY) {\n      let unavailableCount = 0;\n      for (const guildID of this.client.guilds.keys()) {\n        unavailableCount += this.client.guilds.get(guildID).available ? 0 : 1;\n      }\n      if (unavailableCount === 0) {\n        this.status = Constants.Status.NEARLY;\n        if (this.client.options.fetchAllMembers) {\n          const promises = this.client.guilds.map(g => g.fetchMembers());\n          Promise.all(promises).then(() => this._emitReady(), e => {\n            this.client.emit(Constants.Events.WARN, 'Error in pre-ready guild member fetching');\n            this.client.emit(Constants.Events.ERROR, e);\n            this._emitReady();\n          });\n          return;\n        }\n        this._emitReady();\n      }\n    }\n  }\n\n  /**\n   * Tries to reconnect the client, changing the status to Constants.Status.RECONNECTING.\n   */\n  tryReconnect() {\n    if (this.status === Constants.Status.RECONNECTING || this.status === Constants.Status.CONNECTING) return;\n    this.status = Constants.Status.RECONNECTING;\n    this.ws.close();\n    this.packetManager.handleQueue();\n    /**\n     * Emitted when the Client tries to reconnect after being disconnected\n     * @event Client#reconnecting\n     */\n    this.client.emit(Constants.Events.RECONNECTING);\n    this.connect(this.client.ws.gateway);\n  }\n}\n\nmodule.exports = WebSocketManager;\n","/home/travis/build/npmtest/node-npmtest-discord.js/node_modules/discord.js/src/client/websocket/packets/WebSocketPacketManager.js":"const Constants = require('../../../util/Constants');\n\nconst BeforeReadyWhitelist = [\n  Constants.WSEvents.READY,\n  Constants.WSEvents.GUILD_CREATE,\n  Constants.WSEvents.GUILD_DELETE,\n  Constants.WSEvents.GUILD_MEMBERS_CHUNK,\n  Constants.WSEvents.GUILD_MEMBER_ADD,\n  Constants.WSEvents.GUILD_MEMBER_REMOVE,\n];\n\nclass WebSocketPacketManager {\n  constructor(websocketManager) {\n    this.ws = websocketManager;\n    this.handlers = {};\n    this.queue = [];\n\n    this.register(Constants.WSEvents.READY, require('./handlers/Ready'));\n    this.register(Constants.WSEvents.GUILD_CREATE, require('./handlers/GuildCreate'));\n    this.register(Constants.WSEvents.GUILD_DELETE, require('./handlers/GuildDelete'));\n    this.register(Constants.WSEvents.GUILD_UPDATE, require('./handlers/GuildUpdate'));\n    this.register(Constants.WSEvents.GUILD_BAN_ADD, require('./handlers/GuildBanAdd'));\n    this.register(Constants.WSEvents.GUILD_BAN_REMOVE, require('./handlers/GuildBanRemove'));\n    this.register(Constants.WSEvents.GUILD_MEMBER_ADD, require('./handlers/GuildMemberAdd'));\n    this.register(Constants.WSEvents.GUILD_MEMBER_REMOVE, require('./handlers/GuildMemberRemove'));\n    this.register(Constants.WSEvents.GUILD_MEMBER_UPDATE, require('./handlers/GuildMemberUpdate'));\n    this.register(Constants.WSEvents.GUILD_ROLE_CREATE, require('./handlers/GuildRoleCreate'));\n    this.register(Constants.WSEvents.GUILD_ROLE_DELETE, require('./handlers/GuildRoleDelete'));\n    this.register(Constants.WSEvents.GUILD_ROLE_UPDATE, require('./handlers/GuildRoleUpdate'));\n    this.register(Constants.WSEvents.GUILD_EMOJIS_UPDATE, require('./handlers/GuildEmojisUpdate'));\n    this.register(Constants.WSEvents.GUILD_MEMBERS_CHUNK, require('./handlers/GuildMembersChunk'));\n    this.register(Constants.WSEvents.CHANNEL_CREATE, require('./handlers/ChannelCreate'));\n    this.register(Constants.WSEvents.CHANNEL_DELETE, require('./handlers/ChannelDelete'));\n    this.register(Constants.WSEvents.CHANNEL_UPDATE, require('./handlers/ChannelUpdate'));\n    this.register(Constants.WSEvents.CHANNEL_PINS_UPDATE, require('./handlers/ChannelPinsUpdate'));\n    this.register(Constants.WSEvents.PRESENCE_UPDATE, require('./handlers/PresenceUpdate'));\n    this.register(Constants.WSEvents.USER_UPDATE, require('./handlers/UserUpdate'));\n    this.register(Constants.WSEvents.USER_NOTE_UPDATE, require('./handlers/UserNoteUpdate'));\n    this.register(Constants.WSEvents.VOICE_STATE_UPDATE, require('./handlers/VoiceStateUpdate'));\n    this.register(Constants.WSEvents.TYPING_START, require('./handlers/TypingStart'));\n    this.register(Constants.WSEvents.MESSAGE_CREATE, require('./handlers/MessageCreate'));\n    this.register(Constants.WSEvents.MESSAGE_DELETE, require('./handlers/MessageDelete'));\n    this.register(Constants.WSEvents.MESSAGE_UPDATE, require('./handlers/MessageUpdate'));\n    this.register(Constants.WSEvents.MESSAGE_DELETE_BULK, require('./handlers/MessageDeleteBulk'));\n    this.register(Constants.WSEvents.VOICE_SERVER_UPDATE, require('./handlers/VoiceServerUpdate'));\n    this.register(Constants.WSEvents.GUILD_SYNC, require('./handlers/GuildSync'));\n    this.register(Constants.WSEvents.RELATIONSHIP_ADD, require('./handlers/RelationshipAdd'));\n    this.register(Constants.WSEvents.RELATIONSHIP_REMOVE, require('./handlers/RelationshipRemove'));\n    this.register(Constants.WSEvents.MESSAGE_REACTION_ADD, require('./handlers/MessageReactionAdd'));\n    this.register(Constants.WSEvents.MESSAGE_REACTION_REMOVE, require('./handlers/MessageReactionRemove'));\n    this.register(Constants.WSEvents.MESSAGE_REACTION_REMOVE_ALL, require('./handlers/MessageReactionRemoveAll'));\n  }\n\n  get client() {\n    return this.ws.client;\n  }\n\n  register(event, Handler) {\n    this.handlers[event] = new Handler(this);\n  }\n\n  handleQueue() {\n    this.queue.forEach((element, index) => {\n      this.handle(this.queue[index]);\n      this.queue.splice(index, 1);\n    });\n  }\n\n  setSequence(s) {\n    if (s && s > this.ws.sequence) this.ws.sequence = s;\n  }\n\n  handle(packet) {\n    if (packet.op === Constants.OPCodes.RECONNECT) {\n      this.setSequence(packet.s);\n      this.ws.tryReconnect();\n      return false;\n    }\n\n    if (packet.op === Constants.OPCodes.INVALID_SESSION) {\n      if (packet.d) {\n        setTimeout(() => {\n          this.ws._sendResume();\n        }, 2500);\n      } else {\n        this.ws.sessionID = null;\n        this.ws._sendNewIdentify();\n      }\n      return false;\n    }\n\n    if (packet.op === Constants.OPCodes.HEARTBEAT_ACK) {\n      this.ws.client._pong(this.ws.client._pingTimestamp);\n      this.ws.lastHeartbeatAck = true;\n      this.ws.client.emit('debug', 'Heartbeat acknowledged');\n    } else if (packet.op === Constants.OPCodes.HEARTBEAT) {\n      this.client.ws.send({\n        op: Constants.OPCodes.HEARTBEAT,\n        d: this.client.ws.sequence,\n      });\n      this.ws.client.emit('debug', 'Received gateway heartbeat');\n    }\n\n    if (this.ws.status === Constants.Status.RECONNECTING) {\n      this.ws.reconnecting = false;\n      this.ws.checkIfReady();\n    }\n\n    this.setSequence(packet.s);\n\n    if (this.ws.disabledEvents[packet.t] !== undefined) return false;\n\n    if (this.ws.status !== Constants.Status.READY) {\n      if (BeforeReadyWhitelist.indexOf(packet.t) === -1) {\n        this.queue.push(packet);\n        return false;\n      }\n    }\n\n    if (this.handlers[packet.t]) return this.handlers[packet.t].handle(packet);\n    return false;\n  }\n}\n\nmodule.exports = WebSocketPacketManager;\n"}